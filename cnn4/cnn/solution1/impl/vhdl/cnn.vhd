-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cnn is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_stream_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_stream_V_TVALID : IN STD_LOGIC;
    in_stream_V_TREADY : OUT STD_LOGIC;
    out_stream_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_stream_V_TVALID : OUT STD_LOGIC;
    out_stream_V_TREADY : IN STD_LOGIC );
end;


architecture behav of cnn is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "cnn_cnn,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=30.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=21.898000,HLS_SYN_LAT=47670,HLS_SYN_TPT=none,HLS_SYN_MEM=42,HLS_SYN_DSP=0,HLS_SYN_FF=32703,HLS_SYN_LUT=55455,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000100000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (21 downto 0) := "0000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (21 downto 0) := "0000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (21 downto 0) := "0000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (21 downto 0) := "0000001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (21 downto 0) := "0000010000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (21 downto 0) := "0000100000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (21 downto 0) := "0001000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (21 downto 0) := "0010000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (21 downto 0) := "0100000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (21 downto 0) := "1000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3F05AEE6 : STD_LOGIC_VECTOR (31 downto 0) := "00111111000001011010111011100110";
    constant ap_const_lv32_3EB07C85 : STD_LOGIC_VECTOR (31 downto 0) := "00111110101100000111110010000101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_C8 : STD_LOGIC_VECTOR (7 downto 0) := "11001000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv59_0 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal fc_layer2_weights_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal fc_layer2_weights_ce0 : STD_LOGIC;
    signal fc_layer2_weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_stream_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal i_reg_244 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_state10_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln239_reg_582 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal fc1_out_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal fc1_out_empty_n : STD_LOGIC;
    signal fc1_out_read : STD_LOGIC;
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_fu_334_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_fu_326_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_356 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal empty_98_fu_362_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal read_fu_379_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_reg_572 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal add_ln239_fu_383_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal icmp_ln239_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln239_reg_582_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_cast_fu_395_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_586 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_586_pp1_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal output_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal output_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_406_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_reg_619 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal icmp_ln242_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal read_273_fu_433_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_273_reg_634 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln242_fu_438_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal select_ln174_fu_486_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln174_17_fu_537_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state10 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal output_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_ce0 : STD_LOGIC;
    signal output_we0 : STD_LOGIC;
    signal output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_ce1 : STD_LOGIC;
    signal grp_pool_layer1_fu_287_ap_start : STD_LOGIC;
    signal grp_pool_layer1_fu_287_ap_done : STD_LOGIC;
    signal grp_pool_layer1_fu_287_ap_idle : STD_LOGIC;
    signal grp_pool_layer1_fu_287_ap_ready : STD_LOGIC;
    signal grp_pool_layer1_fu_287_out_r_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pool_layer1_fu_287_out_r_write : STD_LOGIC;
    signal grp_pool_layer1_fu_287_in_r_read : STD_LOGIC;
    signal grp_conv_layer1_fu_293_ap_start : STD_LOGIC;
    signal grp_conv_layer1_fu_293_ap_done : STD_LOGIC;
    signal grp_conv_layer1_fu_293_ap_idle : STD_LOGIC;
    signal grp_conv_layer1_fu_293_ap_ready : STD_LOGIC;
    signal grp_conv_layer1_fu_293_out_r_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_layer1_fu_293_out_r_write : STD_LOGIC;
    signal grp_conv_layer1_fu_293_in_stream_V_TREADY : STD_LOGIC;
    signal grp_conv_layer1_fu_293_grp_fu_326_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_layer1_fu_293_grp_fu_326_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_layer1_fu_293_grp_fu_326_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv_layer1_fu_293_grp_fu_326_p_dout0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_layer1_fu_293_grp_fu_326_p_ce : STD_LOGIC;
    signal grp_conv_layer1_fu_293_grp_fu_659_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_layer1_fu_293_grp_fu_659_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_layer1_fu_293_grp_fu_659_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv_layer1_fu_293_grp_fu_659_p_dout0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_layer1_fu_293_grp_fu_659_p_ce : STD_LOGIC;
    signal grp_conv_layer1_fu_293_grp_fu_663_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_layer1_fu_293_grp_fu_663_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_layer1_fu_293_grp_fu_663_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv_layer1_fu_293_grp_fu_663_p_dout0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_layer1_fu_293_grp_fu_663_p_ce : STD_LOGIC;
    signal grp_conv_layer1_fu_293_grp_fu_667_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_layer1_fu_293_grp_fu_667_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_layer1_fu_293_grp_fu_667_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv_layer1_fu_293_grp_fu_667_p_dout0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_layer1_fu_293_grp_fu_667_p_ce : STD_LOGIC;
    signal grp_conv_layer1_fu_293_grp_fu_671_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_layer1_fu_293_grp_fu_671_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_layer1_fu_293_grp_fu_671_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv_layer1_fu_293_grp_fu_671_p_dout0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_layer1_fu_293_grp_fu_671_p_ce : STD_LOGIC;
    signal grp_conv_layer1_fu_293_grp_fu_334_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_layer1_fu_293_grp_fu_334_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_layer1_fu_293_grp_fu_334_p_dout0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_layer1_fu_293_grp_fu_334_p_ce : STD_LOGIC;
    signal grp_conv_layer1_fu_293_grp_fu_675_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_layer1_fu_293_grp_fu_675_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_layer1_fu_293_grp_fu_675_p_dout0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_layer1_fu_293_grp_fu_675_p_ce : STD_LOGIC;
    signal grp_conv_layer1_fu_293_grp_fu_679_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_layer1_fu_293_grp_fu_679_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_layer1_fu_293_grp_fu_679_p_dout0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_layer1_fu_293_grp_fu_679_p_ce : STD_LOGIC;
    signal grp_conv_layer1_fu_293_grp_fu_683_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_layer1_fu_293_grp_fu_683_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_layer1_fu_293_grp_fu_683_p_dout0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_layer1_fu_293_grp_fu_683_p_ce : STD_LOGIC;
    signal grp_fc_layer1_fu_300_ap_start : STD_LOGIC;
    signal grp_fc_layer1_fu_300_ap_done : STD_LOGIC;
    signal grp_fc_layer1_fu_300_ap_idle : STD_LOGIC;
    signal grp_fc_layer1_fu_300_ap_ready : STD_LOGIC;
    signal grp_fc_layer1_fu_300_fc1_out5_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc_layer1_fu_300_fc1_out5_write : STD_LOGIC;
    signal grp_fc_layer1_fu_300_pool1_out4_read : STD_LOGIC;
    signal grp_fc_layer1_fu_300_grp_fu_326_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc_layer1_fu_300_grp_fu_326_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc_layer1_fu_300_grp_fu_326_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fc_layer1_fu_300_grp_fu_326_p_dout0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc_layer1_fu_300_grp_fu_326_p_ce : STD_LOGIC;
    signal grp_fc_layer1_fu_300_grp_fu_659_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc_layer1_fu_300_grp_fu_659_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc_layer1_fu_300_grp_fu_659_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fc_layer1_fu_300_grp_fu_659_p_dout0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc_layer1_fu_300_grp_fu_659_p_ce : STD_LOGIC;
    signal grp_fc_layer1_fu_300_grp_fu_334_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc_layer1_fu_300_grp_fu_334_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc_layer1_fu_300_grp_fu_334_p_dout0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc_layer1_fu_300_grp_fu_334_p_ce : STD_LOGIC;
    signal grp_fc_layer1_fu_300_grp_fu_675_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc_layer1_fu_300_grp_fu_675_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc_layer1_fu_300_grp_fu_675_p_dout0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc_layer1_fu_300_grp_fu_675_p_ce : STD_LOGIC;
    signal empty_97_reg_233 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal exitcond94_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_255 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_113_i_reg_267 : STD_LOGIC_VECTOR (31 downto 0);
    signal add12_i_reg_277 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pool_layer1_fu_287_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal pool1_out_full_n : STD_LOGIC;
    signal pool1_out_write : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal conv1_out_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal conv1_out_empty_n : STD_LOGIC;
    signal conv1_out_read : STD_LOGIC;
    signal grp_conv_layer1_fu_293_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal conv1_out_full_n : STD_LOGIC;
    signal conv1_out_write : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fc_layer1_fu_300_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal fc1_out_full_n : STD_LOGIC;
    signal fc1_out_write : STD_LOGIC;
    signal pool1_out_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal pool1_out_empty_n : STD_LOGIC;
    signal pool1_out_read : STD_LOGIC;
    signal p_cast_fu_374_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal zext_ln247_fu_414_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_424_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_326_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_326_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_fu_334_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_334_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln247_fu_419_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal bitcast_ln34_fu_444_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_448_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_fu_458_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln34_35_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln34_17_fu_495_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_999_fu_499_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_17_fu_509_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln34_37_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_36_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_17_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_17_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_326_ce : STD_LOGIC;
    signal grp_fu_334_ce : STD_LOGIC;
    signal grp_fu_659_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_659_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_659_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_659_ce : STD_LOGIC;
    signal grp_fu_663_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_663_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_663_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_663_ce : STD_LOGIC;
    signal grp_fu_667_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_667_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_667_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_667_ce : STD_LOGIC;
    signal grp_fu_671_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_671_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_671_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_671_ce : STD_LOGIC;
    signal grp_fu_675_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_675_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_675_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_675_ce : STD_LOGIC;
    signal grp_fu_679_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_679_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_679_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_679_ce : STD_LOGIC;
    signal grp_fu_683_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_683_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_683_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_683_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (21 downto 0);
    signal regslice_both_out_stream_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state24 : BOOLEAN;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal regslice_both_in_stream_V_U_apdone_blk : STD_LOGIC;
    signal in_stream_V_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal in_stream_V_TVALID_int_regslice : STD_LOGIC;
    signal in_stream_V_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_in_stream_V_U_ack_in : STD_LOGIC;
    signal out_stream_V_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal out_stream_V_TVALID_int_regslice : STD_LOGIC;
    signal out_stream_V_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_out_stream_V_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component cnn_pool_layer1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_r_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_r_full_n : IN STD_LOGIC;
        out_r_write : OUT STD_LOGIC;
        in_r_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        in_r_empty_n : IN STD_LOGIC;
        in_r_read : OUT STD_LOGIC );
    end component;


    component cnn_conv_layer1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_r_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_r_full_n : IN STD_LOGIC;
        out_r_write : OUT STD_LOGIC;
        in_stream_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        in_stream_V_TVALID : IN STD_LOGIC;
        in_stream_V_TREADY : OUT STD_LOGIC;
        grp_fu_326_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_326_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_326_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_326_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_326_p_ce : OUT STD_LOGIC;
        grp_fu_659_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_659_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_659_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_659_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_659_p_ce : OUT STD_LOGIC;
        grp_fu_663_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_663_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_663_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_663_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_663_p_ce : OUT STD_LOGIC;
        grp_fu_667_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_667_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_667_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_667_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_667_p_ce : OUT STD_LOGIC;
        grp_fu_671_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_671_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_671_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_671_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_671_p_ce : OUT STD_LOGIC;
        grp_fu_334_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_334_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_334_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_334_p_ce : OUT STD_LOGIC;
        grp_fu_675_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_675_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_675_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_675_p_ce : OUT STD_LOGIC;
        grp_fu_679_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_679_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_679_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_679_p_ce : OUT STD_LOGIC;
        grp_fu_683_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_683_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_683_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_683_p_ce : OUT STD_LOGIC );
    end component;


    component cnn_fc_layer1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        fc1_out5_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        fc1_out5_full_n : IN STD_LOGIC;
        fc1_out5_write : OUT STD_LOGIC;
        pool1_out4_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        pool1_out4_empty_n : IN STD_LOGIC;
        pool1_out4_read : OUT STD_LOGIC;
        grp_fu_326_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_326_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_326_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_326_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_326_p_ce : OUT STD_LOGIC;
        grp_fu_659_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_659_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_659_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_659_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_659_p_ce : OUT STD_LOGIC;
        grp_fu_334_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_334_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_334_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_334_p_ce : OUT STD_LOGIC;
        grp_fu_675_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_675_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_675_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_675_p_ce : OUT STD_LOGIC );
    end component;


    component cnn_fadd_32ns_32ns_32_2_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fmul_32ns_32ns_32_2_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fcmp_32ns_32ns_1_1_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component cnn_fc_layer2_weights IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_output IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component cnn_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    fc_layer2_weights_U : component cnn_fc_layer2_weights
    generic map (
        DataWidth => 32,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => fc_layer2_weights_address0,
        ce0 => fc_layer2_weights_ce0,
        q0 => fc_layer2_weights_q0);

    output_U : component cnn_output
    generic map (
        DataWidth => 32,
        AddressRange => 200,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => output_address0,
        ce0 => output_ce0,
        we0 => output_we0,
        d0 => output_d0,
        q0 => output_q0,
        address1 => output_address1,
        ce1 => output_ce1,
        q1 => output_q1);

    grp_pool_layer1_fu_287 : component cnn_pool_layer1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_pool_layer1_fu_287_ap_start,
        ap_done => grp_pool_layer1_fu_287_ap_done,
        ap_idle => grp_pool_layer1_fu_287_ap_idle,
        ap_ready => grp_pool_layer1_fu_287_ap_ready,
        out_r_din => grp_pool_layer1_fu_287_out_r_din,
        out_r_full_n => pool1_out_full_n,
        out_r_write => grp_pool_layer1_fu_287_out_r_write,
        in_r_dout => conv1_out_dout,
        in_r_empty_n => conv1_out_empty_n,
        in_r_read => grp_pool_layer1_fu_287_in_r_read);

    grp_conv_layer1_fu_293 : component cnn_conv_layer1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_conv_layer1_fu_293_ap_start,
        ap_done => grp_conv_layer1_fu_293_ap_done,
        ap_idle => grp_conv_layer1_fu_293_ap_idle,
        ap_ready => grp_conv_layer1_fu_293_ap_ready,
        out_r_din => grp_conv_layer1_fu_293_out_r_din,
        out_r_full_n => conv1_out_full_n,
        out_r_write => grp_conv_layer1_fu_293_out_r_write,
        in_stream_V_TDATA => in_stream_V_TDATA_int_regslice,
        in_stream_V_TVALID => in_stream_V_TVALID_int_regslice,
        in_stream_V_TREADY => grp_conv_layer1_fu_293_in_stream_V_TREADY,
        grp_fu_326_p_din0 => grp_conv_layer1_fu_293_grp_fu_326_p_din0,
        grp_fu_326_p_din1 => grp_conv_layer1_fu_293_grp_fu_326_p_din1,
        grp_fu_326_p_opcode => grp_conv_layer1_fu_293_grp_fu_326_p_opcode,
        grp_fu_326_p_dout0 => grp_conv_layer1_fu_293_grp_fu_326_p_dout0,
        grp_fu_326_p_ce => grp_conv_layer1_fu_293_grp_fu_326_p_ce,
        grp_fu_659_p_din0 => grp_conv_layer1_fu_293_grp_fu_659_p_din0,
        grp_fu_659_p_din1 => grp_conv_layer1_fu_293_grp_fu_659_p_din1,
        grp_fu_659_p_opcode => grp_conv_layer1_fu_293_grp_fu_659_p_opcode,
        grp_fu_659_p_dout0 => grp_conv_layer1_fu_293_grp_fu_659_p_dout0,
        grp_fu_659_p_ce => grp_conv_layer1_fu_293_grp_fu_659_p_ce,
        grp_fu_663_p_din0 => grp_conv_layer1_fu_293_grp_fu_663_p_din0,
        grp_fu_663_p_din1 => grp_conv_layer1_fu_293_grp_fu_663_p_din1,
        grp_fu_663_p_opcode => grp_conv_layer1_fu_293_grp_fu_663_p_opcode,
        grp_fu_663_p_dout0 => grp_conv_layer1_fu_293_grp_fu_663_p_dout0,
        grp_fu_663_p_ce => grp_conv_layer1_fu_293_grp_fu_663_p_ce,
        grp_fu_667_p_din0 => grp_conv_layer1_fu_293_grp_fu_667_p_din0,
        grp_fu_667_p_din1 => grp_conv_layer1_fu_293_grp_fu_667_p_din1,
        grp_fu_667_p_opcode => grp_conv_layer1_fu_293_grp_fu_667_p_opcode,
        grp_fu_667_p_dout0 => grp_conv_layer1_fu_293_grp_fu_667_p_dout0,
        grp_fu_667_p_ce => grp_conv_layer1_fu_293_grp_fu_667_p_ce,
        grp_fu_671_p_din0 => grp_conv_layer1_fu_293_grp_fu_671_p_din0,
        grp_fu_671_p_din1 => grp_conv_layer1_fu_293_grp_fu_671_p_din1,
        grp_fu_671_p_opcode => grp_conv_layer1_fu_293_grp_fu_671_p_opcode,
        grp_fu_671_p_dout0 => grp_conv_layer1_fu_293_grp_fu_671_p_dout0,
        grp_fu_671_p_ce => grp_conv_layer1_fu_293_grp_fu_671_p_ce,
        grp_fu_334_p_din0 => grp_conv_layer1_fu_293_grp_fu_334_p_din0,
        grp_fu_334_p_din1 => grp_conv_layer1_fu_293_grp_fu_334_p_din1,
        grp_fu_334_p_dout0 => grp_conv_layer1_fu_293_grp_fu_334_p_dout0,
        grp_fu_334_p_ce => grp_conv_layer1_fu_293_grp_fu_334_p_ce,
        grp_fu_675_p_din0 => grp_conv_layer1_fu_293_grp_fu_675_p_din0,
        grp_fu_675_p_din1 => grp_conv_layer1_fu_293_grp_fu_675_p_din1,
        grp_fu_675_p_dout0 => grp_conv_layer1_fu_293_grp_fu_675_p_dout0,
        grp_fu_675_p_ce => grp_conv_layer1_fu_293_grp_fu_675_p_ce,
        grp_fu_679_p_din0 => grp_conv_layer1_fu_293_grp_fu_679_p_din0,
        grp_fu_679_p_din1 => grp_conv_layer1_fu_293_grp_fu_679_p_din1,
        grp_fu_679_p_dout0 => grp_conv_layer1_fu_293_grp_fu_679_p_dout0,
        grp_fu_679_p_ce => grp_conv_layer1_fu_293_grp_fu_679_p_ce,
        grp_fu_683_p_din0 => grp_conv_layer1_fu_293_grp_fu_683_p_din0,
        grp_fu_683_p_din1 => grp_conv_layer1_fu_293_grp_fu_683_p_din1,
        grp_fu_683_p_dout0 => grp_conv_layer1_fu_293_grp_fu_683_p_dout0,
        grp_fu_683_p_ce => grp_conv_layer1_fu_293_grp_fu_683_p_ce);

    grp_fc_layer1_fu_300 : component cnn_fc_layer1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_fc_layer1_fu_300_ap_start,
        ap_done => grp_fc_layer1_fu_300_ap_done,
        ap_idle => grp_fc_layer1_fu_300_ap_idle,
        ap_ready => grp_fc_layer1_fu_300_ap_ready,
        fc1_out5_din => grp_fc_layer1_fu_300_fc1_out5_din,
        fc1_out5_full_n => fc1_out_full_n,
        fc1_out5_write => grp_fc_layer1_fu_300_fc1_out5_write,
        pool1_out4_dout => pool1_out_dout,
        pool1_out4_empty_n => pool1_out_empty_n,
        pool1_out4_read => grp_fc_layer1_fu_300_pool1_out4_read,
        grp_fu_326_p_din0 => grp_fc_layer1_fu_300_grp_fu_326_p_din0,
        grp_fu_326_p_din1 => grp_fc_layer1_fu_300_grp_fu_326_p_din1,
        grp_fu_326_p_opcode => grp_fc_layer1_fu_300_grp_fu_326_p_opcode,
        grp_fu_326_p_dout0 => grp_fc_layer1_fu_300_grp_fu_326_p_dout0,
        grp_fu_326_p_ce => grp_fc_layer1_fu_300_grp_fu_326_p_ce,
        grp_fu_659_p_din0 => grp_fc_layer1_fu_300_grp_fu_659_p_din0,
        grp_fu_659_p_din1 => grp_fc_layer1_fu_300_grp_fu_659_p_din1,
        grp_fu_659_p_opcode => grp_fc_layer1_fu_300_grp_fu_659_p_opcode,
        grp_fu_659_p_dout0 => grp_fc_layer1_fu_300_grp_fu_659_p_dout0,
        grp_fu_659_p_ce => grp_fc_layer1_fu_300_grp_fu_659_p_ce,
        grp_fu_334_p_din0 => grp_fc_layer1_fu_300_grp_fu_334_p_din0,
        grp_fu_334_p_din1 => grp_fc_layer1_fu_300_grp_fu_334_p_din1,
        grp_fu_334_p_dout0 => grp_fc_layer1_fu_300_grp_fu_334_p_dout0,
        grp_fu_334_p_ce => grp_fc_layer1_fu_300_grp_fu_334_p_ce,
        grp_fu_675_p_din0 => grp_fc_layer1_fu_300_grp_fu_675_p_din0,
        grp_fu_675_p_din1 => grp_fc_layer1_fu_300_grp_fu_675_p_din1,
        grp_fu_675_p_dout0 => grp_fc_layer1_fu_300_grp_fu_675_p_dout0,
        grp_fu_675_p_ce => grp_fc_layer1_fu_300_grp_fu_675_p_ce);

    fadd_32ns_32ns_32_2_full_dsp_1_U36 : component cnn_fadd_32ns_32ns_32_2_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_326_p0,
        din1 => grp_fu_326_p1,
        ce => grp_fu_326_ce,
        dout => grp_fu_326_p2);

    fmul_32ns_32ns_32_2_max_dsp_1_U37 : component cnn_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_334_p0,
        din1 => grp_fu_334_p1,
        ce => grp_fu_334_ce,
        dout => grp_fu_334_p2);

    fcmp_32ns_32ns_1_1_no_dsp_1_U38 : component cnn_fcmp_32ns_32ns_1_1_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => reg_356,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => grp_fu_341_p2);

    fadd_32ns_32ns_32_2_full_dsp_1_U39 : component cnn_fadd_32ns_32ns_32_2_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_659_p0,
        din1 => grp_fu_659_p1,
        ce => grp_fu_659_ce,
        dout => grp_fu_659_p2);

    fadd_32ns_32ns_32_2_full_dsp_1_U40 : component cnn_fadd_32ns_32ns_32_2_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_663_p0,
        din1 => grp_fu_663_p1,
        ce => grp_fu_663_ce,
        dout => grp_fu_663_p2);

    fadd_32ns_32ns_32_2_full_dsp_1_U41 : component cnn_fadd_32ns_32ns_32_2_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_667_p0,
        din1 => grp_fu_667_p1,
        ce => grp_fu_667_ce,
        dout => grp_fu_667_p2);

    fadd_32ns_32ns_32_2_full_dsp_1_U42 : component cnn_fadd_32ns_32ns_32_2_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_671_p0,
        din1 => grp_fu_671_p1,
        ce => grp_fu_671_ce,
        dout => grp_fu_671_p2);

    fmul_32ns_32ns_32_2_max_dsp_1_U43 : component cnn_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_675_p0,
        din1 => grp_fu_675_p1,
        ce => grp_fu_675_ce,
        dout => grp_fu_675_p2);

    fmul_32ns_32ns_32_2_max_dsp_1_U44 : component cnn_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_679_p0,
        din1 => grp_fu_679_p1,
        ce => grp_fu_679_ce,
        dout => grp_fu_679_p2);

    fmul_32ns_32ns_32_2_max_dsp_1_U45 : component cnn_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_683_p0,
        din1 => grp_fu_683_p1,
        ce => grp_fu_683_ce,
        dout => grp_fu_683_p2);

    conv1_out_fifo_U : component cnn_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_conv_layer1_fu_293_out_r_din,
        if_full_n => conv1_out_full_n,
        if_write => conv1_out_write,
        if_dout => conv1_out_dout,
        if_empty_n => conv1_out_empty_n,
        if_read => conv1_out_read);

    pool1_out_fifo_U : component cnn_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_pool_layer1_fu_287_out_r_din,
        if_full_n => pool1_out_full_n,
        if_write => pool1_out_write,
        if_dout => pool1_out_dout,
        if_empty_n => pool1_out_empty_n,
        if_read => pool1_out_read);

    fc1_out_fifo_U : component cnn_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_fc_layer1_fu_300_fc1_out5_din,
        if_full_n => fc1_out_full_n,
        if_write => fc1_out_write,
        if_dout => fc1_out_dout,
        if_empty_n => fc1_out_empty_n,
        if_read => fc1_out_read);

    regslice_both_in_stream_V_U : component cnn_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_stream_V_TDATA,
        vld_in => in_stream_V_TVALID,
        ack_in => regslice_both_in_stream_V_U_ack_in,
        data_out => in_stream_V_TDATA_int_regslice,
        vld_out => in_stream_V_TVALID_int_regslice,
        ack_out => in_stream_V_TREADY_int_regslice,
        apdone_blk => regslice_both_in_stream_V_U_apdone_blk);

    regslice_both_out_stream_V_U : component cnn_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_stream_V_TDATA_int_regslice,
        vld_in => out_stream_V_TVALID_int_regslice,
        ack_in => out_stream_V_TREADY_int_regslice,
        data_out => out_stream_V_TDATA,
        vld_out => regslice_both_out_stream_V_U_vld_out,
        ack_out => out_stream_V_TREADY,
        apdone_blk => regslice_both_out_stream_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state10))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((fc1_out_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state10)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state10);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif (((fc1_out_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_conv_layer1_fu_293_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_conv_layer1_fu_293_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_conv_layer1_fu_293_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv_layer1_fu_293_ap_ready = ap_const_logic_1)) then 
                    grp_conv_layer1_fu_293_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_fc_layer1_fu_300_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_fc_layer1_fu_300_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_fc_layer1_fu_300_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fc_layer1_fu_300_ap_ready = ap_const_logic_1)) then 
                    grp_fc_layer1_fu_300_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pool_layer1_fu_287_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_pool_layer1_fu_287_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_pool_layer1_fu_287_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pool_layer1_fu_287_ap_ready = ap_const_logic_1)) then 
                    grp_pool_layer1_fu_287_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    add12_i_reg_277_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                add12_i_reg_277 <= output_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                add12_i_reg_277 <= reg_356;
            end if; 
        end if;
    end process;

    add_113_i_reg_267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                add_113_i_reg_267 <= output_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                add_113_i_reg_267 <= grp_fu_326_p2;
            end if; 
        end if;
    end process;

    empty_97_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond94_fu_368_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                empty_97_reg_233 <= empty_98_fu_362_p2;
            elsif (((grp_fc_layer1_fu_300_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                empty_97_reg_233 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((fc1_out_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                i_reg_244 <= ap_const_lv2_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln239_fu_389_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                i_reg_244 <= add_ln239_fu_383_p2;
            end if; 
        end if;
    end process;

    j_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                j_reg_255 <= ap_const_lv4_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                j_reg_255 <= add_ln242_fu_438_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln239_fu_389_p2 = ap_const_lv1_0))) then
                    i_cast_reg_586(1 downto 0) <= i_cast_fu_395_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                    i_cast_reg_586_pp1_iter1_reg(1 downto 0) <= i_cast_reg_586(1 downto 0);
                icmp_ln239_reg_582 <= icmp_ln239_fu_389_p2;
                icmp_ln239_reg_582_pp1_iter1_reg <= icmp_ln239_reg_582;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                read_273_reg_634 <= read_273_fu_433_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                read_reg_572 <= read_fu_379_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state18) or ((out_stream_V_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22)))) then
                reg_356 <= grp_fu_326_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln242_fu_400_p2 = ap_const_lv1_0))) then
                    tmp_1_reg_619(4 downto 1) <= tmp_1_fu_406_p3(4 downto 1);
            end if;
        end if;
    end process;
    i_cast_reg_586(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_586_pp1_iter1_reg(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";
    tmp_1_reg_619(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_enable_reg_pp1_iter1, ap_CS_fsm_state16, fc1_out_empty_n, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_enable_reg_pp1_iter0, icmp_ln239_fu_389_p2, ap_CS_fsm_state15, icmp_ln242_fu_400_p2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter2, grp_pool_layer1_fu_287_ap_done, grp_conv_layer1_fu_293_ap_done, grp_fc_layer1_fu_300_ap_done, ap_CS_fsm_state7, exitcond94_fu_368_p2, ap_CS_fsm_state5, ap_CS_fsm_state3, regslice_both_out_stream_V_U_apdone_blk, out_stream_V_TREADY_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((grp_conv_layer1_fu_293_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((grp_pool_layer1_fu_287_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((grp_fc_layer1_fu_300_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((exitcond94_fu_368_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((fc1_out_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln239_fu_389_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln239_fu_389_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln242_fu_400_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state16 => 
                if (((fc1_out_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((out_stream_V_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                if (((out_stream_V_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if ((not(((out_stream_V_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_out_stream_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln239_fu_383_p2 <= std_logic_vector(unsigned(i_reg_244) + unsigned(ap_const_lv2_1));
    add_ln242_fu_438_p2 <= std_logic_vector(unsigned(j_reg_255) + unsigned(ap_const_lv4_1));
    and_ln34_17_fu_531_p2 <= (or_ln34_17_fu_525_p2 and grp_fu_341_p2);
    and_ln34_fu_480_p2 <= (or_ln34_fu_474_p2 and grp_fu_341_p2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(9);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state14 <= ap_CS_fsm(11);
    ap_CS_fsm_state15 <= ap_CS_fsm(12);
    ap_CS_fsm_state16 <= ap_CS_fsm(13);
    ap_CS_fsm_state17 <= ap_CS_fsm(14);
    ap_CS_fsm_state18 <= ap_CS_fsm(15);
    ap_CS_fsm_state19 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(17);
    ap_CS_fsm_state21 <= ap_CS_fsm(18);
    ap_CS_fsm_state22 <= ap_CS_fsm(19);
    ap_CS_fsm_state23 <= ap_CS_fsm(20);
    ap_CS_fsm_state24 <= ap_CS_fsm(21);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state24_assign_proc : process(regslice_both_out_stream_V_U_apdone_blk, out_stream_V_TREADY_int_regslice)
    begin
                ap_block_state24 <= ((out_stream_V_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_out_stream_V_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_condition_pp1_exit_iter0_state10_assign_proc : process(icmp_ln239_fu_389_p2)
    begin
        if ((icmp_ln239_fu_389_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state10 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state10 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln34_17_fu_495_p1 <= reg_356;
    bitcast_ln34_fu_444_p1 <= reg_356;

    conv1_out_read_assign_proc : process(grp_pool_layer1_fu_287_in_r_read, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            conv1_out_read <= grp_pool_layer1_fu_287_in_r_read;
        else 
            conv1_out_read <= ap_const_logic_0;
        end if; 
    end process;


    conv1_out_write_assign_proc : process(grp_conv_layer1_fu_293_out_r_write, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            conv1_out_write <= grp_conv_layer1_fu_293_out_r_write;
        else 
            conv1_out_write <= ap_const_logic_0;
        end if; 
    end process;

    empty_98_fu_362_p2 <= std_logic_vector(unsigned(empty_97_reg_233) + unsigned(ap_const_lv8_1));
    exitcond94_fu_368_p2 <= "1" when (empty_97_reg_233 = ap_const_lv8_C8) else "0";

    fc1_out_read_assign_proc : process(ap_CS_fsm_state16, fc1_out_empty_n, ap_CS_fsm_state9)
    begin
        if ((((fc1_out_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((fc1_out_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            fc1_out_read <= ap_const_logic_1;
        else 
            fc1_out_read <= ap_const_logic_0;
        end if; 
    end process;


    fc1_out_write_assign_proc : process(grp_fc_layer1_fu_300_fc1_out5_write, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            fc1_out_write <= grp_fc_layer1_fu_300_fc1_out5_write;
        else 
            fc1_out_write <= ap_const_logic_0;
        end if; 
    end process;


    fc_layer2_weights_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_state16, ap_enable_reg_pp1_iter0, i_cast_fu_395_p1, ap_CS_fsm_state15, ap_block_pp1_stage0, zext_ln247_fu_414_p1, tmp_2_fu_424_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            fc_layer2_weights_address0 <= tmp_2_fu_424_p3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            fc_layer2_weights_address0 <= zext_ln247_fu_414_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            fc_layer2_weights_address0 <= i_cast_fu_395_p1(5 - 1 downto 0);
        else 
            fc_layer2_weights_address0 <= "XXXXX";
        end if; 
    end process;


    fc_layer2_weights_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_state16, fc1_out_empty_n, ap_enable_reg_pp1_iter0, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or ((fc1_out_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
            fc_layer2_weights_ce0 <= ap_const_logic_1;
        else 
            fc_layer2_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_conv_layer1_fu_293_ap_start <= grp_conv_layer1_fu_293_ap_start_reg;
    grp_conv_layer1_fu_293_grp_fu_326_p_dout0 <= grp_fu_326_p2;
    grp_conv_layer1_fu_293_grp_fu_334_p_dout0 <= grp_fu_334_p2;
    grp_conv_layer1_fu_293_grp_fu_659_p_dout0 <= grp_fu_659_p2;
    grp_conv_layer1_fu_293_grp_fu_663_p_dout0 <= grp_fu_663_p2;
    grp_conv_layer1_fu_293_grp_fu_667_p_dout0 <= grp_fu_667_p2;
    grp_conv_layer1_fu_293_grp_fu_671_p_dout0 <= grp_fu_671_p2;
    grp_conv_layer1_fu_293_grp_fu_675_p_dout0 <= grp_fu_675_p2;
    grp_conv_layer1_fu_293_grp_fu_679_p_dout0 <= grp_fu_679_p2;
    grp_conv_layer1_fu_293_grp_fu_683_p_dout0 <= grp_fu_683_p2;
    grp_fc_layer1_fu_300_ap_start <= grp_fc_layer1_fu_300_ap_start_reg;
    grp_fc_layer1_fu_300_grp_fu_326_p_dout0 <= grp_fu_326_p2;
    grp_fc_layer1_fu_300_grp_fu_334_p_dout0 <= grp_fu_334_p2;
    grp_fc_layer1_fu_300_grp_fu_659_p_dout0 <= grp_fu_659_p2;
    grp_fc_layer1_fu_300_grp_fu_675_p_dout0 <= grp_fu_675_p2;

    grp_fu_326_ce_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state21, ap_CS_fsm_state19, grp_conv_layer1_fu_293_grp_fu_326_p_ce, grp_fc_layer1_fu_300_grp_fu_326_p_ce, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state20, out_stream_V_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_fu_326_ce <= grp_fc_layer1_fu_300_grp_fu_326_p_ce;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_326_ce <= grp_conv_layer1_fu_293_grp_fu_326_p_ce;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or ((out_stream_V_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22)))) then 
            grp_fu_326_ce <= ap_const_logic_1;
        else 
            grp_fu_326_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_326_p0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state21, grp_conv_layer1_fu_293_grp_fu_326_p_din0, grp_fc_layer1_fu_300_grp_fu_326_p_din0, ap_CS_fsm_state7, add_113_i_reg_267, add12_i_reg_277, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_fu_326_p0 <= grp_fc_layer1_fu_300_grp_fu_326_p_din0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_326_p0 <= grp_conv_layer1_fu_293_grp_fu_326_p_din0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_fu_326_p0 <= add_113_i_reg_267;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            grp_fu_326_p0 <= add12_i_reg_277;
        else 
            grp_fu_326_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_326_p1_assign_proc : process(ap_CS_fsm_state17, grp_fu_334_p2, ap_CS_fsm_state18, ap_CS_fsm_state21, grp_conv_layer1_fu_293_grp_fu_326_p_din1, grp_fc_layer1_fu_300_grp_fu_326_p_din1, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_fu_326_p1 <= grp_fc_layer1_fu_300_grp_fu_326_p_din1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_326_p1 <= grp_conv_layer1_fu_293_grp_fu_326_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_326_p1 <= ap_const_lv32_3EB07C85;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_326_p1 <= ap_const_lv32_3F05AEE6;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            grp_fu_326_p1 <= grp_fu_334_p2;
        else 
            grp_fu_326_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_334_ce_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_state16, fc1_out_empty_n, ap_CS_fsm_state17, ap_CS_fsm_state18, grp_conv_layer1_fu_293_grp_fu_334_p_ce, grp_fc_layer1_fu_300_grp_fu_334_p_ce, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_fu_334_ce <= grp_fc_layer1_fu_300_grp_fu_334_p_ce;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_334_ce <= grp_conv_layer1_fu_293_grp_fu_334_p_ce;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or ((fc1_out_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            grp_fu_334_ce <= ap_const_logic_1;
        else 
            grp_fu_334_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_334_p0_assign_proc : process(fc_layer2_weights_q0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_state16, ap_CS_fsm_state17, grp_conv_layer1_fu_293_grp_fu_334_p_din0, grp_fc_layer1_fu_300_grp_fu_334_p_din0, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_block_pp1_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_fu_334_p0 <= grp_fc_layer1_fu_300_grp_fu_334_p_din0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_334_p0 <= grp_conv_layer1_fu_293_grp_fu_334_p_din0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state17) or ((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            grp_fu_334_p0 <= fc_layer2_weights_q0;
        else 
            grp_fu_334_p0 <= fc_layer2_weights_q0;
        end if; 
    end process;


    grp_fu_334_p1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_state16, ap_CS_fsm_state17, read_reg_572, read_273_fu_433_p1, read_273_reg_634, grp_conv_layer1_fu_293_grp_fu_334_p_din1, grp_fc_layer1_fu_300_grp_fu_334_p_din1, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_block_pp1_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_fu_334_p1 <= grp_fc_layer1_fu_300_grp_fu_334_p_din1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_334_p1 <= grp_conv_layer1_fu_293_grp_fu_334_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_334_p1 <= read_273_reg_634;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_334_p1 <= read_273_fu_433_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            grp_fu_334_p1 <= read_reg_572;
        else 
            grp_fu_334_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_659_ce_assign_proc : process(grp_conv_layer1_fu_293_grp_fu_659_p_ce, grp_fc_layer1_fu_300_grp_fu_659_p_ce, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_fu_659_ce <= grp_fc_layer1_fu_300_grp_fu_659_p_ce;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_659_ce <= grp_conv_layer1_fu_293_grp_fu_659_p_ce;
        else 
            grp_fu_659_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_659_p0_assign_proc : process(grp_conv_layer1_fu_293_grp_fu_659_p_din0, grp_fc_layer1_fu_300_grp_fu_659_p_din0, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_fu_659_p0 <= grp_fc_layer1_fu_300_grp_fu_659_p_din0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_659_p0 <= grp_conv_layer1_fu_293_grp_fu_659_p_din0;
        end if; 
    end process;


    grp_fu_659_p1_assign_proc : process(grp_conv_layer1_fu_293_grp_fu_659_p_din1, grp_fc_layer1_fu_300_grp_fu_659_p_din1, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_fu_659_p1 <= grp_fc_layer1_fu_300_grp_fu_659_p_din1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_659_p1 <= grp_conv_layer1_fu_293_grp_fu_659_p_din1;
        end if; 
    end process;


    grp_fu_663_ce_assign_proc : process(grp_conv_layer1_fu_293_grp_fu_663_p_ce, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_663_ce <= grp_conv_layer1_fu_293_grp_fu_663_p_ce;
        else 
            grp_fu_663_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_663_p0 <= grp_conv_layer1_fu_293_grp_fu_663_p_din0;
    grp_fu_663_p1 <= grp_conv_layer1_fu_293_grp_fu_663_p_din1;

    grp_fu_667_ce_assign_proc : process(grp_conv_layer1_fu_293_grp_fu_667_p_ce, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_667_ce <= grp_conv_layer1_fu_293_grp_fu_667_p_ce;
        else 
            grp_fu_667_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_667_p0 <= grp_conv_layer1_fu_293_grp_fu_667_p_din0;
    grp_fu_667_p1 <= grp_conv_layer1_fu_293_grp_fu_667_p_din1;

    grp_fu_671_ce_assign_proc : process(grp_conv_layer1_fu_293_grp_fu_671_p_ce, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_671_ce <= grp_conv_layer1_fu_293_grp_fu_671_p_ce;
        else 
            grp_fu_671_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_671_p0 <= grp_conv_layer1_fu_293_grp_fu_671_p_din0;
    grp_fu_671_p1 <= grp_conv_layer1_fu_293_grp_fu_671_p_din1;

    grp_fu_675_ce_assign_proc : process(grp_conv_layer1_fu_293_grp_fu_675_p_ce, grp_fc_layer1_fu_300_grp_fu_675_p_ce, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_fu_675_ce <= grp_fc_layer1_fu_300_grp_fu_675_p_ce;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_675_ce <= grp_conv_layer1_fu_293_grp_fu_675_p_ce;
        else 
            grp_fu_675_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_675_p0_assign_proc : process(grp_conv_layer1_fu_293_grp_fu_675_p_din0, grp_fc_layer1_fu_300_grp_fu_675_p_din0, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_fu_675_p0 <= grp_fc_layer1_fu_300_grp_fu_675_p_din0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_675_p0 <= grp_conv_layer1_fu_293_grp_fu_675_p_din0;
        end if; 
    end process;


    grp_fu_675_p1_assign_proc : process(grp_conv_layer1_fu_293_grp_fu_675_p_din1, grp_fc_layer1_fu_300_grp_fu_675_p_din1, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_fu_675_p1 <= grp_fc_layer1_fu_300_grp_fu_675_p_din1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_675_p1 <= grp_conv_layer1_fu_293_grp_fu_675_p_din1;
        end if; 
    end process;


    grp_fu_679_ce_assign_proc : process(grp_conv_layer1_fu_293_grp_fu_679_p_ce, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_679_ce <= grp_conv_layer1_fu_293_grp_fu_679_p_ce;
        else 
            grp_fu_679_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_679_p0 <= grp_conv_layer1_fu_293_grp_fu_679_p_din0;
    grp_fu_679_p1 <= grp_conv_layer1_fu_293_grp_fu_679_p_din1;

    grp_fu_683_ce_assign_proc : process(grp_conv_layer1_fu_293_grp_fu_683_p_ce, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_683_ce <= grp_conv_layer1_fu_293_grp_fu_683_p_ce;
        else 
            grp_fu_683_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_683_p0 <= grp_conv_layer1_fu_293_grp_fu_683_p_din0;
    grp_fu_683_p1 <= grp_conv_layer1_fu_293_grp_fu_683_p_din1;
    grp_pool_layer1_fu_287_ap_start <= grp_pool_layer1_fu_287_ap_start_reg;
    i_cast_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_244),64));
    icmp_ln239_fu_389_p2 <= "1" when (i_reg_244 = ap_const_lv2_2) else "0";
    icmp_ln242_fu_400_p2 <= "1" when (j_reg_255 = ap_const_lv4_A) else "0";
    icmp_ln34_35_fu_468_p2 <= "1" when (trunc_ln34_fu_458_p1 = ap_const_lv23_0) else "0";
    icmp_ln34_36_fu_513_p2 <= "0" when (tmp_999_fu_499_p4 = ap_const_lv8_FF) else "1";
    icmp_ln34_37_fu_519_p2 <= "1" when (trunc_ln34_17_fu_509_p1 = ap_const_lv23_0) else "0";
    icmp_ln34_fu_462_p2 <= "0" when (tmp_fu_448_p4 = ap_const_lv8_FF) else "1";
    in_stream_V_TREADY <= regslice_both_in_stream_V_U_ack_in;

    in_stream_V_TREADY_int_regslice_assign_proc : process(grp_conv_layer1_fu_293_in_stream_V_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_stream_V_TREADY_int_regslice <= grp_conv_layer1_fu_293_in_stream_V_TREADY;
        else 
            in_stream_V_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    or_ln247_fu_419_p2 <= (tmp_1_reg_619 or ap_const_lv5_1);
    or_ln34_17_fu_525_p2 <= (icmp_ln34_37_fu_519_p2 or icmp_ln34_36_fu_513_p2);
    or_ln34_fu_474_p2 <= (icmp_ln34_fu_462_p2 or icmp_ln34_35_fu_468_p2);

    out_stream_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, out_stream_V_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_stream_V_TDATA_blk_n <= out_stream_V_TREADY_int_regslice;
        else 
            out_stream_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_stream_V_TDATA_int_regslice_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state23, select_ln174_fu_486_p3, select_ln174_17_fu_537_p3, out_stream_V_TREADY_int_regslice)
    begin
        if ((out_stream_V_TREADY_int_regslice = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                out_stream_V_TDATA_int_regslice <= select_ln174_17_fu_537_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                out_stream_V_TDATA_int_regslice <= select_ln174_fu_486_p3;
            else 
                out_stream_V_TDATA_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            out_stream_V_TDATA_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    out_stream_V_TVALID <= regslice_both_out_stream_V_U_vld_out;

    out_stream_V_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state23, out_stream_V_TREADY_int_regslice)
    begin
        if ((((out_stream_V_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((out_stream_V_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22)))) then 
            out_stream_V_TVALID_int_regslice <= ap_const_logic_1;
        else 
            out_stream_V_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    output_address0_assign_proc : process(ap_CS_fsm_state8, i_cast_reg_586_pp1_iter1_reg, ap_CS_fsm_state13, ap_enable_reg_pp1_iter2, p_cast_fu_374_p1, ap_block_pp1_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            output_address0 <= ap_const_lv64_1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            output_address0 <= i_cast_reg_586_pp1_iter1_reg(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_address0 <= p_cast_fu_374_p1(8 - 1 downto 0);
        else 
            output_address0 <= "XXXXXXXX";
        end if; 
    end process;

    output_address1 <= ap_const_lv64_0(8 - 1 downto 0);

    output_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_state8, ap_CS_fsm_state13, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)))) then 
            output_ce0 <= ap_const_logic_1;
        else 
            output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_ce1_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            output_ce1 <= ap_const_logic_1;
        else 
            output_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_d0_assign_proc : process(grp_fu_334_p2, ap_CS_fsm_state8, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            output_d0 <= grp_fu_334_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_d0 <= ap_const_lv32_0;
        else 
            output_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_we0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_state8, icmp_ln239_reg_582_pp1_iter1_reg, ap_enable_reg_pp1_iter2, exitcond94_fu_368_p2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln239_reg_582_pp1_iter1_reg = ap_const_lv1_0)) or ((exitcond94_fu_368_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            output_we0 <= ap_const_logic_1;
        else 
            output_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_cast_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_97_reg_233),64));

    pool1_out_read_assign_proc : process(grp_fc_layer1_fu_300_pool1_out4_read, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            pool1_out_read <= grp_fc_layer1_fu_300_pool1_out4_read;
        else 
            pool1_out_read <= ap_const_logic_0;
        end if; 
    end process;


    pool1_out_write_assign_proc : process(grp_pool_layer1_fu_287_out_r_write, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            pool1_out_write <= grp_pool_layer1_fu_287_out_r_write;
        else 
            pool1_out_write <= ap_const_logic_0;
        end if; 
    end process;

    read_273_fu_433_p1 <= fc1_out_dout;
    read_fu_379_p1 <= fc1_out_dout;
    select_ln174_17_fu_537_p3 <= 
        bitcast_ln34_17_fu_495_p1 when (and_ln34_17_fu_531_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln174_fu_486_p3 <= 
        bitcast_ln34_fu_444_p1 when (and_ln34_fu_480_p2(0) = '1') else 
        ap_const_lv32_0;
    tmp_1_fu_406_p3 <= (j_reg_255 & ap_const_lv1_0);
    tmp_2_fu_424_p3 <= (ap_const_lv59_0 & or_ln247_fu_419_p2);
    tmp_999_fu_499_p4 <= bitcast_ln34_17_fu_495_p1(30 downto 23);
    tmp_fu_448_p4 <= bitcast_ln34_fu_444_p1(30 downto 23);
    trunc_ln34_17_fu_509_p1 <= bitcast_ln34_17_fu_495_p1(23 - 1 downto 0);
    trunc_ln34_fu_458_p1 <= bitcast_ln34_fu_444_p1(23 - 1 downto 0);
    zext_ln247_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_406_p3),64));
end behav;
