-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cnn_fc_layer1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    fc1_out5_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    fc1_out5_full_n : IN STD_LOGIC;
    fc1_out5_write : OUT STD_LOGIC;
    pool1_out4_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    pool1_out4_empty_n : IN STD_LOGIC;
    pool1_out4_read : OUT STD_LOGIC;
    grp_fu_326_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_326_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_326_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_326_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_326_p_ce : OUT STD_LOGIC;
    grp_fu_659_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_659_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_659_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_659_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_659_p_ce : OUT STD_LOGIC;
    grp_fu_334_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_334_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_334_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_334_p_ce : OUT STD_LOGIC;
    grp_fu_675_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_675_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_675_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_675_p_ce : OUT STD_LOGIC );
end;


architecture behav of cnn_fc_layer1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (55 downto 0) := "00000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (55 downto 0) := "00000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (55 downto 0) := "00000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (55 downto 0) := "00000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (55 downto 0) := "00000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (55 downto 0) := "00000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (55 downto 0) := "00001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (55 downto 0) := "00010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (55 downto 0) := "00100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (55 downto 0) := "01000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (55 downto 0) := "10000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_3D9205BC : STD_LOGIC_VECTOR (31 downto 0) := "00111101100100100000010110111100";
    constant ap_const_lv32_3CCD9E84 : STD_LOGIC_VECTOR (31 downto 0) := "00111100110011011001111010000100";
    constant ap_const_lv32_BCDB8BAC : STD_LOGIC_VECTOR (31 downto 0) := "10111100110110111000101110101100";
    constant ap_const_lv32_3E41F213 : STD_LOGIC_VECTOR (31 downto 0) := "00111110010000011111001000010011";
    constant ap_const_lv32_BAB78034 : STD_LOGIC_VECTOR (31 downto 0) := "10111010101101111000000000110100";
    constant ap_const_lv32_BCD9E83E : STD_LOGIC_VECTOR (31 downto 0) := "10111100110110011110100000111110";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_3C09A027 : STD_LOGIC_VECTOR (31 downto 0) := "00111100000010011010000000100111";
    constant ap_const_lv32_BD3020C5 : STD_LOGIC_VECTOR (31 downto 0) := "10111101001100000010000011000101";
    constant ap_const_lv32_BB79096C : STD_LOGIC_VECTOR (31 downto 0) := "10111011011110010000100101101100";
    constant ap_const_lv32_BCC8B439 : STD_LOGIC_VECTOR (31 downto 0) := "10111100110010001011010000111001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_C4 : STD_LOGIC_VECTOR (7 downto 0) := "11000100";
    constant ap_const_lv9_C4 : STD_LOGIC_VECTOR (8 downto 0) := "011000100";
    constant ap_const_lv10_188 : STD_LOGIC_VECTOR (9 downto 0) := "0110001000";
    constant ap_const_lv10_24C : STD_LOGIC_VECTOR (9 downto 0) := "1001001100";
    constant ap_const_lv9_110 : STD_LOGIC_VECTOR (8 downto 0) := "100010000";
    constant ap_const_lv11_3D4 : STD_LOGIC_VECTOR (10 downto 0) := "01111010100";
    constant ap_const_lv11_498 : STD_LOGIC_VECTOR (10 downto 0) := "10010011000";
    constant ap_const_lv11_55C : STD_LOGIC_VECTOR (10 downto 0) := "10101011100";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal fc_layer1_weights_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal fc_layer1_weights_0_ce0 : STD_LOGIC;
    signal fc_layer1_weights_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_1_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal fc_layer1_weights_1_ce0 : STD_LOGIC;
    signal fc_layer1_weights_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_2_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal fc_layer1_weights_2_ce0 : STD_LOGIC;
    signal fc_layer1_weights_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_3_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal fc_layer1_weights_3_ce0 : STD_LOGIC;
    signal fc_layer1_weights_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_4_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal fc_layer1_weights_4_ce0 : STD_LOGIC;
    signal fc_layer1_weights_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_5_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal fc_layer1_weights_5_ce0 : STD_LOGIC;
    signal fc_layer1_weights_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_6_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal fc_layer1_weights_6_ce0 : STD_LOGIC;
    signal fc_layer1_weights_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_7_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal fc_layer1_weights_7_ce0 : STD_LOGIC;
    signal fc_layer1_weights_7_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_8_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal fc_layer1_weights_8_ce0 : STD_LOGIC;
    signal fc_layer1_weights_8_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_9_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal fc_layer1_weights_9_ce0 : STD_LOGIC;
    signal fc_layer1_weights_9_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc1_out5_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal pool1_out4_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal reg_983 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_988 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_993 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_998 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1003 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1008 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1013 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1018 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1023 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1028 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_966_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal grp_fu_972_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1043 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1047 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1052 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_937_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1057 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal grp_fu_942_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1064 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1071 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1078 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1085 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1091 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1098 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1104 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1110 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1115 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln213_fu_1120_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln213_reg_1850 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln213_fu_1126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln213_3_fu_1146_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln213_3_reg_1908 : STD_LOGIC_VECTOR (8 downto 0);
    signal read_fu_1150_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_reg_1913 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln213_1_fu_1176_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln213_1_reg_1969 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln213_2_fu_1180_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln213_2_reg_1976 : STD_LOGIC_VECTOR (9 downto 0);
    signal fc_layer1_weights_4_load_1_reg_1981 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_5_load_1_reg_1986 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_6_load_1_reg_1991 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_7_load_1_reg_1996 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_8_load_1_reg_2001 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_9_load_1_reg_2006 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool1_out4_read_2_reg_2061 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_0_load_2_reg_2066 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_1_load_2_reg_2071 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_4_load_2_reg_2076 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_5_load_2_reg_2081 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_6_load_2_reg_2086 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_7_load_2_reg_2091 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_8_load_2_reg_2096 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_9_load_2_reg_2101 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool1_out4_read_3_reg_2156 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_0_load_3_reg_2161 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_1_load_3_reg_2166 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_2_load_3_reg_2171 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_3_load_3_reg_2176 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_6_load_3_reg_2181 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_7_load_3_reg_2186 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_8_load_3_reg_2191 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_9_load_3_reg_2196 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool1_out4_read_4_reg_2251 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_0_load_4_reg_2256 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_1_load_4_reg_2261 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_2_load_4_reg_2266 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_3_load_4_reg_2271 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_4_load_4_reg_2276 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_5_load_4_reg_2281 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_8_load_4_reg_2286 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_9_load_4_reg_2291 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_266_fu_1265_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_266_reg_2346 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_0_load_5_reg_2352 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_1_load_5_reg_2357 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_2_load_5_reg_2362 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_3_load_5_reg_2367 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_4_load_5_reg_2372 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_5_load_5_reg_2377 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_6_load_5_reg_2382 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_7_load_5_reg_2387 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool1_out4_read_6_reg_2442 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_2_load_6_reg_2447 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_3_load_6_reg_2452 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_4_load_6_reg_2457 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_5_load_6_reg_2462 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_6_load_6_reg_2467 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_7_load_6_reg_2472 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_8_load_6_reg_2477 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_9_load_6_reg_2482 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool1_out4_read_7_reg_2537 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_0_load_7_reg_2542 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_1_load_7_reg_2547 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_4_load_7_reg_2552 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_5_load_7_reg_2557 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_6_load_7_reg_2562 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_7_load_7_reg_2567 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_8_load_7_reg_2572 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_9_load_7_reg_2577 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_267_fu_1309_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_267_reg_2582 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_268_fu_1314_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_268_reg_2588 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_269_fu_1319_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_269_reg_2594 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_270_fu_1324_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_270_reg_2600 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_271_fu_1330_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_271_reg_2606 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_272_fu_1335_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_272_reg_2612 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal j_reg_805 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_9_reg_817 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_8_reg_829 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_7_reg_841 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_6_reg_853 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_5_reg_865 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_4_reg_877 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_3_reg_889 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_2_reg_901 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_1_reg_913 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_reg_925 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln213_fu_1132_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln220_fu_1162_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln220_1_fu_1190_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln220_2_fu_1209_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln220_3_fu_1232_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln220_4_fu_1251_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln220_5_fu_1276_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln220_6_fu_1295_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln174_fu_1382_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln174_1_fu_1433_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln174_2_fu_1484_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln174_3_fu_1535_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln174_4_fu_1586_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln174_5_fu_1637_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln174_6_fu_1688_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln174_7_fu_1739_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln174_8_fu_1790_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln174_9_fu_1841_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_937_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_937_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal grp_fu_942_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_942_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_966_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_966_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_972_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_972_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_978_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_85_fu_1156_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_86_fu_1184_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_87_fu_1204_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_88_fu_1223_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln220_fu_1228_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_89_fu_1246_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_90_fu_1271_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_91_fu_1290_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal bitcast_ln34_fu_1340_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_1344_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_fu_1354_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln34_1_fu_1364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_fu_1358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_fu_1370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_978_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_fu_1376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln34_1_fu_1391_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_965_fu_1395_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_1_fu_1405_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln34_3_fu_1415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_2_fu_1409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_1_fu_1421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_1_fu_1427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln34_2_fu_1442_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_967_fu_1446_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_2_fu_1456_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln34_5_fu_1466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_4_fu_1460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_2_fu_1472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_2_fu_1478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln34_3_fu_1493_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_969_fu_1497_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_3_fu_1507_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln34_7_fu_1517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_6_fu_1511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_3_fu_1523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_3_fu_1529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln34_4_fu_1544_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_971_fu_1548_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_4_fu_1558_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln34_9_fu_1568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_8_fu_1562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_4_fu_1574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_4_fu_1580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln34_5_fu_1595_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_973_fu_1599_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_5_fu_1609_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln34_11_fu_1619_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_10_fu_1613_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_5_fu_1625_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_5_fu_1631_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln34_6_fu_1646_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_975_fu_1650_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_6_fu_1660_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln34_13_fu_1670_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_12_fu_1664_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_6_fu_1676_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_6_fu_1682_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln34_7_fu_1697_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_977_fu_1701_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_7_fu_1711_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln34_15_fu_1721_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_14_fu_1715_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_7_fu_1727_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_7_fu_1733_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln34_8_fu_1748_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_979_fu_1752_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_8_fu_1762_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln34_17_fu_1772_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_16_fu_1766_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_8_fu_1778_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_8_fu_1784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln34_9_fu_1799_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_981_fu_1803_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_9_fu_1813_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln34_19_fu_1823_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_18_fu_1817_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_9_fu_1829_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_9_fu_1835_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_937_ce : STD_LOGIC;
    signal grp_fu_942_ce : STD_LOGIC;
    signal grp_fu_966_ce : STD_LOGIC;
    signal grp_fu_972_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component cnn_fadd_32ns_32ns_32_2_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fmul_32ns_32ns_32_2_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fcmp_32ns_32ns_1_1_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component cnn_fc_layer1_fc_layer1_weights_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fc_layer1_fc_layer1_weights_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fc_layer1_fc_layer1_weights_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fc_layer1_fc_layer1_weights_3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fc_layer1_fc_layer1_weights_4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fc_layer1_fc_layer1_weights_5 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fc_layer1_fc_layer1_weights_6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fc_layer1_fc_layer1_weights_7 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fc_layer1_fc_layer1_weights_8 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fc_layer1_fc_layer1_weights_9 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    fc_layer1_weights_0_U : component cnn_fc_layer1_fc_layer1_weights_0
    generic map (
        DataWidth => 32,
        AddressRange => 1568,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc_layer1_weights_0_address0,
        ce0 => fc_layer1_weights_0_ce0,
        q0 => fc_layer1_weights_0_q0);

    fc_layer1_weights_1_U : component cnn_fc_layer1_fc_layer1_weights_1
    generic map (
        DataWidth => 32,
        AddressRange => 1568,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc_layer1_weights_1_address0,
        ce0 => fc_layer1_weights_1_ce0,
        q0 => fc_layer1_weights_1_q0);

    fc_layer1_weights_2_U : component cnn_fc_layer1_fc_layer1_weights_2
    generic map (
        DataWidth => 32,
        AddressRange => 1568,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc_layer1_weights_2_address0,
        ce0 => fc_layer1_weights_2_ce0,
        q0 => fc_layer1_weights_2_q0);

    fc_layer1_weights_3_U : component cnn_fc_layer1_fc_layer1_weights_3
    generic map (
        DataWidth => 32,
        AddressRange => 1568,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc_layer1_weights_3_address0,
        ce0 => fc_layer1_weights_3_ce0,
        q0 => fc_layer1_weights_3_q0);

    fc_layer1_weights_4_U : component cnn_fc_layer1_fc_layer1_weights_4
    generic map (
        DataWidth => 32,
        AddressRange => 1568,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc_layer1_weights_4_address0,
        ce0 => fc_layer1_weights_4_ce0,
        q0 => fc_layer1_weights_4_q0);

    fc_layer1_weights_5_U : component cnn_fc_layer1_fc_layer1_weights_5
    generic map (
        DataWidth => 32,
        AddressRange => 1568,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc_layer1_weights_5_address0,
        ce0 => fc_layer1_weights_5_ce0,
        q0 => fc_layer1_weights_5_q0);

    fc_layer1_weights_6_U : component cnn_fc_layer1_fc_layer1_weights_6
    generic map (
        DataWidth => 32,
        AddressRange => 1568,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc_layer1_weights_6_address0,
        ce0 => fc_layer1_weights_6_ce0,
        q0 => fc_layer1_weights_6_q0);

    fc_layer1_weights_7_U : component cnn_fc_layer1_fc_layer1_weights_7
    generic map (
        DataWidth => 32,
        AddressRange => 1568,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc_layer1_weights_7_address0,
        ce0 => fc_layer1_weights_7_ce0,
        q0 => fc_layer1_weights_7_q0);

    fc_layer1_weights_8_U : component cnn_fc_layer1_fc_layer1_weights_8
    generic map (
        DataWidth => 32,
        AddressRange => 1568,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc_layer1_weights_8_address0,
        ce0 => fc_layer1_weights_8_ce0,
        q0 => fc_layer1_weights_8_q0);

    fc_layer1_weights_9_U : component cnn_fc_layer1_fc_layer1_weights_9
    generic map (
        DataWidth => 32,
        AddressRange => 1568,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc_layer1_weights_9_address0,
        ce0 => fc_layer1_weights_9_ce0,
        q0 => fc_layer1_weights_9_q0);

    fcmp_32ns_32ns_1_1_no_dsp_1_U23 : component cnn_fcmp_32ns_32ns_1_1_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_978_p0,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => grp_fu_978_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    j_reg_805_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                j_reg_805 <= add_ln213_reg_1850;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_reg_805 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    output_1_reg_913_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                output_1_reg_913 <= reg_1064;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                output_1_reg_913 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    output_2_reg_901_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                output_2_reg_901 <= reg_1071;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                output_2_reg_901 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    output_3_reg_889_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                output_3_reg_889 <= reg_1078;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                output_3_reg_889 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    output_4_reg_877_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                output_4_reg_877 <= reg_1085;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                output_4_reg_877 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    output_5_reg_865_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                output_5_reg_865 <= reg_1091;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                output_5_reg_865 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    output_6_reg_853_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                output_6_reg_853 <= reg_1098;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                output_6_reg_853 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    output_7_reg_841_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                output_7_reg_841 <= reg_1104;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                output_7_reg_841 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    output_8_reg_829_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                output_8_reg_829 <= grp_fu_326_p_dout0;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                output_8_reg_829 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    output_9_reg_817_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                output_9_reg_817 <= grp_fu_659_p_dout0;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                output_9_reg_817 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    output_reg_925_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                output_reg_925 <= reg_1057;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                output_reg_925 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln213_reg_1850 <= add_ln213_fu_1120_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                fc_layer1_weights_0_load_2_reg_2066 <= fc_layer1_weights_0_q0;
                fc_layer1_weights_1_load_2_reg_2071 <= fc_layer1_weights_1_q0;
                fc_layer1_weights_4_load_2_reg_2076 <= fc_layer1_weights_4_q0;
                fc_layer1_weights_5_load_2_reg_2081 <= fc_layer1_weights_5_q0;
                fc_layer1_weights_6_load_2_reg_2086 <= fc_layer1_weights_6_q0;
                fc_layer1_weights_7_load_2_reg_2091 <= fc_layer1_weights_7_q0;
                fc_layer1_weights_8_load_2_reg_2096 <= fc_layer1_weights_8_q0;
                fc_layer1_weights_9_load_2_reg_2101 <= fc_layer1_weights_9_q0;
                pool1_out4_read_2_reg_2061 <= pool1_out4_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                fc_layer1_weights_0_load_3_reg_2161 <= fc_layer1_weights_0_q0;
                fc_layer1_weights_1_load_3_reg_2166 <= fc_layer1_weights_1_q0;
                fc_layer1_weights_2_load_3_reg_2171 <= fc_layer1_weights_2_q0;
                fc_layer1_weights_3_load_3_reg_2176 <= fc_layer1_weights_3_q0;
                fc_layer1_weights_6_load_3_reg_2181 <= fc_layer1_weights_6_q0;
                fc_layer1_weights_7_load_3_reg_2186 <= fc_layer1_weights_7_q0;
                fc_layer1_weights_8_load_3_reg_2191 <= fc_layer1_weights_8_q0;
                fc_layer1_weights_9_load_3_reg_2196 <= fc_layer1_weights_9_q0;
                pool1_out4_read_3_reg_2156 <= pool1_out4_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                fc_layer1_weights_0_load_4_reg_2256 <= fc_layer1_weights_0_q0;
                fc_layer1_weights_1_load_4_reg_2261 <= fc_layer1_weights_1_q0;
                fc_layer1_weights_2_load_4_reg_2266 <= fc_layer1_weights_2_q0;
                fc_layer1_weights_3_load_4_reg_2271 <= fc_layer1_weights_3_q0;
                fc_layer1_weights_4_load_4_reg_2276 <= fc_layer1_weights_4_q0;
                fc_layer1_weights_5_load_4_reg_2281 <= fc_layer1_weights_5_q0;
                fc_layer1_weights_8_load_4_reg_2286 <= fc_layer1_weights_8_q0;
                fc_layer1_weights_9_load_4_reg_2291 <= fc_layer1_weights_9_q0;
                pool1_out4_read_4_reg_2251 <= pool1_out4_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                fc_layer1_weights_0_load_5_reg_2352 <= fc_layer1_weights_0_q0;
                fc_layer1_weights_1_load_5_reg_2357 <= fc_layer1_weights_1_q0;
                fc_layer1_weights_2_load_5_reg_2362 <= fc_layer1_weights_2_q0;
                fc_layer1_weights_3_load_5_reg_2367 <= fc_layer1_weights_3_q0;
                fc_layer1_weights_4_load_5_reg_2372 <= fc_layer1_weights_4_q0;
                fc_layer1_weights_5_load_5_reg_2377 <= fc_layer1_weights_5_q0;
                fc_layer1_weights_6_load_5_reg_2382 <= fc_layer1_weights_6_q0;
                fc_layer1_weights_7_load_5_reg_2387 <= fc_layer1_weights_7_q0;
                read_266_reg_2346 <= read_266_fu_1265_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                fc_layer1_weights_0_load_7_reg_2542 <= fc_layer1_weights_0_q0;
                fc_layer1_weights_1_load_7_reg_2547 <= fc_layer1_weights_1_q0;
                fc_layer1_weights_4_load_7_reg_2552 <= fc_layer1_weights_4_q0;
                fc_layer1_weights_5_load_7_reg_2557 <= fc_layer1_weights_5_q0;
                fc_layer1_weights_6_load_7_reg_2562 <= fc_layer1_weights_6_q0;
                fc_layer1_weights_7_load_7_reg_2567 <= fc_layer1_weights_7_q0;
                fc_layer1_weights_8_load_7_reg_2572 <= fc_layer1_weights_8_q0;
                fc_layer1_weights_9_load_7_reg_2577 <= fc_layer1_weights_9_q0;
                pool1_out4_read_7_reg_2537 <= pool1_out4_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                fc_layer1_weights_2_load_6_reg_2447 <= fc_layer1_weights_2_q0;
                fc_layer1_weights_3_load_6_reg_2452 <= fc_layer1_weights_3_q0;
                fc_layer1_weights_4_load_6_reg_2457 <= fc_layer1_weights_4_q0;
                fc_layer1_weights_5_load_6_reg_2462 <= fc_layer1_weights_5_q0;
                fc_layer1_weights_6_load_6_reg_2467 <= fc_layer1_weights_6_q0;
                fc_layer1_weights_7_load_6_reg_2472 <= fc_layer1_weights_7_q0;
                fc_layer1_weights_8_load_6_reg_2477 <= fc_layer1_weights_8_q0;
                fc_layer1_weights_9_load_6_reg_2482 <= fc_layer1_weights_9_q0;
                pool1_out4_read_6_reg_2442 <= pool1_out4_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                fc_layer1_weights_4_load_1_reg_1981 <= fc_layer1_weights_4_q0;
                fc_layer1_weights_5_load_1_reg_1986 <= fc_layer1_weights_5_q0;
                fc_layer1_weights_6_load_1_reg_1991 <= fc_layer1_weights_6_q0;
                fc_layer1_weights_7_load_1_reg_1996 <= fc_layer1_weights_7_q0;
                fc_layer1_weights_8_load_1_reg_2001 <= fc_layer1_weights_8_q0;
                fc_layer1_weights_9_load_1_reg_2006 <= fc_layer1_weights_9_q0;
                    zext_ln213_1_reg_1969(7 downto 0) <= zext_ln213_1_fu_1176_p1(7 downto 0);
                    zext_ln213_2_reg_1976(7 downto 0) <= zext_ln213_2_fu_1180_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                read_267_reg_2582 <= read_267_fu_1309_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                read_268_reg_2588 <= read_268_fu_1314_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                read_269_reg_2594 <= read_269_fu_1319_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                read_270_reg_2600 <= read_270_fu_1324_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                read_271_reg_2606 <= read_271_fu_1330_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                read_272_reg_2612 <= read_272_fu_1335_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                read_reg_1913 <= read_fu_1150_p1;
                    zext_ln213_3_reg_1908(7 downto 0) <= zext_ln213_3_fu_1146_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then
                reg_1003 <= fc_layer1_weights_4_q0;
                reg_1008 <= fc_layer1_weights_5_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then
                reg_1013 <= fc_layer1_weights_6_q0;
                reg_1018 <= fc_layer1_weights_7_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then
                reg_1023 <= fc_layer1_weights_8_q0;
                reg_1028 <= fc_layer1_weights_9_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then
                reg_1043 <= pool1_out4_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then
                reg_1047 <= fc_layer1_weights_2_q0;
                reg_1052 <= fc_layer1_weights_3_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state15) or ((fc1_out5_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51)) or ((fc1_out5_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state49)) or ((fc1_out5_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((fc1_out5_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state47)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then
                reg_1057 <= grp_fu_326_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state15) or ((fc1_out5_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state50)) or ((fc1_out5_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then
                reg_1064 <= grp_fu_659_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((fc1_out5_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state50)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then
                reg_1071 <= grp_fu_326_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((fc1_out5_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state49)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then
                reg_1078 <= grp_fu_659_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state12) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then
                reg_1085 <= grp_fu_326_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state12) or ((fc1_out5_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then
                reg_1091 <= grp_fu_659_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then
                reg_1098 <= grp_fu_326_p_dout0;
                reg_1104 <= grp_fu_659_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state14) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then
                reg_1110 <= grp_fu_326_p_dout0;
                reg_1115 <= grp_fu_659_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then
                reg_983 <= fc_layer1_weights_0_q0;
                reg_988 <= fc_layer1_weights_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then
                reg_993 <= fc_layer1_weights_2_q0;
                reg_998 <= fc_layer1_weights_3_q0;
            end if;
        end if;
    end process;
    zext_ln213_3_reg_1908(8) <= '0';
    zext_ln213_1_reg_1969(10 downto 8) <= "000";
    zext_ln213_2_reg_1976(9 downto 8) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, fc1_out5_full_n, pool1_out4_empty_n, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state2, icmp_ln213_fu_1126_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln213_fu_1126_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state3 => 
                if (((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                if (((fc1_out5_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state48 => 
                if (((fc1_out5_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state49 => 
                if (((fc1_out5_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state50 => 
                if (((fc1_out5_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state51 => 
                if (((fc1_out5_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state52 => 
                if (((fc1_out5_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_state53 => 
                if (((fc1_out5_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_state54 => 
                if (((fc1_out5_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state54))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                else
                    ap_NS_fsm <= ap_ST_fsm_state54;
                end if;
            when ap_ST_fsm_state55 => 
                if (((fc1_out5_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state55))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_state55;
                end if;
            when ap_ST_fsm_state56 => 
                if (((fc1_out5_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state56))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln213_fu_1120_p2 <= std_logic_vector(unsigned(j_reg_805) + unsigned(ap_const_lv8_1));
    and_ln34_1_fu_1427_p2 <= (or_ln34_1_fu_1421_p2 and grp_fu_978_p2);
    and_ln34_2_fu_1478_p2 <= (or_ln34_2_fu_1472_p2 and grp_fu_978_p2);
    and_ln34_3_fu_1529_p2 <= (or_ln34_3_fu_1523_p2 and grp_fu_978_p2);
    and_ln34_4_fu_1580_p2 <= (or_ln34_4_fu_1574_p2 and grp_fu_978_p2);
    and_ln34_5_fu_1631_p2 <= (or_ln34_5_fu_1625_p2 and grp_fu_978_p2);
    and_ln34_6_fu_1682_p2 <= (or_ln34_6_fu_1676_p2 and grp_fu_978_p2);
    and_ln34_7_fu_1733_p2 <= (or_ln34_7_fu_1727_p2 and grp_fu_978_p2);
    and_ln34_8_fu_1784_p2 <= (or_ln34_8_fu_1778_p2 and grp_fu_978_p2);
    and_ln34_9_fu_1835_p2 <= (or_ln34_9_fu_1829_p2 and grp_fu_978_p2);
    and_ln34_fu_1376_p2 <= (or_ln34_fu_1370_p2 and grp_fu_978_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, fc1_out5_full_n, ap_CS_fsm_state56)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((fc1_out5_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state56)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(fc1_out5_full_n, ap_CS_fsm_state56)
    begin
        if (((fc1_out5_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state56))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln34_1_fu_1391_p1 <= reg_1057;
    bitcast_ln34_2_fu_1442_p1 <= reg_1057;
    bitcast_ln34_3_fu_1493_p1 <= reg_1064;
    bitcast_ln34_4_fu_1544_p1 <= reg_1057;
    bitcast_ln34_5_fu_1595_p1 <= reg_1078;
    bitcast_ln34_6_fu_1646_p1 <= reg_1071;
    bitcast_ln34_7_fu_1697_p1 <= reg_1064;
    bitcast_ln34_8_fu_1748_p1 <= reg_1057;
    bitcast_ln34_9_fu_1799_p1 <= reg_1091;
    bitcast_ln34_fu_1340_p1 <= reg_1057;
    empty_85_fu_1156_p2 <= std_logic_vector(unsigned(zext_ln213_3_fu_1146_p1) + unsigned(ap_const_lv9_C4));
    empty_86_fu_1184_p2 <= std_logic_vector(unsigned(zext_ln213_2_fu_1180_p1) + unsigned(ap_const_lv10_188));
    empty_87_fu_1204_p2 <= std_logic_vector(unsigned(zext_ln213_2_reg_1976) + unsigned(ap_const_lv10_24C));
    empty_88_fu_1223_p2 <= std_logic_vector(unsigned(zext_ln213_3_reg_1908) + unsigned(ap_const_lv9_110));
    empty_89_fu_1246_p2 <= std_logic_vector(unsigned(zext_ln213_1_reg_1969) + unsigned(ap_const_lv11_3D4));
    empty_90_fu_1271_p2 <= std_logic_vector(unsigned(zext_ln213_1_reg_1969) + unsigned(ap_const_lv11_498));
    empty_91_fu_1290_p2 <= std_logic_vector(unsigned(zext_ln213_1_reg_1969) + unsigned(ap_const_lv11_55C));

    fc1_out5_blk_n_assign_proc : process(fc1_out5_full_n, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47))) then 
            fc1_out5_blk_n <= fc1_out5_full_n;
        else 
            fc1_out5_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fc1_out5_din_assign_proc : process(fc1_out5_full_n, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, select_ln174_fu_1382_p3, select_ln174_1_fu_1433_p3, select_ln174_2_fu_1484_p3, select_ln174_3_fu_1535_p3, select_ln174_4_fu_1586_p3, select_ln174_5_fu_1637_p3, select_ln174_6_fu_1688_p3, select_ln174_7_fu_1739_p3, select_ln174_8_fu_1790_p3, select_ln174_9_fu_1841_p3)
    begin
        if ((fc1_out5_full_n = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                fc1_out5_din <= select_ln174_9_fu_1841_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                fc1_out5_din <= select_ln174_8_fu_1790_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                fc1_out5_din <= select_ln174_7_fu_1739_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
                fc1_out5_din <= select_ln174_6_fu_1688_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                fc1_out5_din <= select_ln174_5_fu_1637_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
                fc1_out5_din <= select_ln174_4_fu_1586_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
                fc1_out5_din <= select_ln174_3_fu_1535_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                fc1_out5_din <= select_ln174_2_fu_1484_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                fc1_out5_din <= select_ln174_1_fu_1433_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                fc1_out5_din <= select_ln174_fu_1382_p3;
            else 
                fc1_out5_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            fc1_out5_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    fc1_out5_write_assign_proc : process(fc1_out5_full_n, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56)
    begin
        if ((((fc1_out5_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state56)) or ((fc1_out5_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state55)) or ((fc1_out5_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state54)) or ((fc1_out5_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state53)) or ((fc1_out5_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state52)) or ((fc1_out5_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51)) or ((fc1_out5_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state50)) or ((fc1_out5_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state49)) or ((fc1_out5_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((fc1_out5_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state47)))) then 
            fc1_out5_write <= ap_const_logic_1;
        else 
            fc1_out5_write <= ap_const_logic_0;
        end if; 
    end process;


    fc_layer1_weights_0_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state2, zext_ln213_fu_1132_p1, zext_ln220_fu_1162_p1, zext_ln220_1_fu_1190_p1, zext_ln220_2_fu_1209_p1, zext_ln220_3_fu_1232_p1, zext_ln220_4_fu_1251_p1, zext_ln220_5_fu_1276_p1, zext_ln220_6_fu_1295_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            fc_layer1_weights_0_address0 <= zext_ln220_6_fu_1295_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            fc_layer1_weights_0_address0 <= zext_ln220_5_fu_1276_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            fc_layer1_weights_0_address0 <= zext_ln220_4_fu_1251_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            fc_layer1_weights_0_address0 <= zext_ln220_3_fu_1232_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            fc_layer1_weights_0_address0 <= zext_ln220_2_fu_1209_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            fc_layer1_weights_0_address0 <= zext_ln220_1_fu_1190_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fc_layer1_weights_0_address0 <= zext_ln220_fu_1162_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            fc_layer1_weights_0_address0 <= zext_ln213_fu_1132_p1(11 - 1 downto 0);
        else 
            fc_layer1_weights_0_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    fc_layer1_weights_0_ce0_assign_proc : process(pool1_out4_empty_n, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            fc_layer1_weights_0_ce0 <= ap_const_logic_1;
        else 
            fc_layer1_weights_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_layer1_weights_1_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state2, zext_ln213_fu_1132_p1, zext_ln220_fu_1162_p1, zext_ln220_1_fu_1190_p1, zext_ln220_2_fu_1209_p1, zext_ln220_3_fu_1232_p1, zext_ln220_4_fu_1251_p1, zext_ln220_5_fu_1276_p1, zext_ln220_6_fu_1295_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            fc_layer1_weights_1_address0 <= zext_ln220_6_fu_1295_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            fc_layer1_weights_1_address0 <= zext_ln220_5_fu_1276_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            fc_layer1_weights_1_address0 <= zext_ln220_4_fu_1251_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            fc_layer1_weights_1_address0 <= zext_ln220_3_fu_1232_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            fc_layer1_weights_1_address0 <= zext_ln220_2_fu_1209_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            fc_layer1_weights_1_address0 <= zext_ln220_1_fu_1190_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fc_layer1_weights_1_address0 <= zext_ln220_fu_1162_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            fc_layer1_weights_1_address0 <= zext_ln213_fu_1132_p1(11 - 1 downto 0);
        else 
            fc_layer1_weights_1_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    fc_layer1_weights_1_ce0_assign_proc : process(pool1_out4_empty_n, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            fc_layer1_weights_1_ce0 <= ap_const_logic_1;
        else 
            fc_layer1_weights_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_layer1_weights_2_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state2, zext_ln213_fu_1132_p1, zext_ln220_fu_1162_p1, zext_ln220_1_fu_1190_p1, zext_ln220_2_fu_1209_p1, zext_ln220_3_fu_1232_p1, zext_ln220_4_fu_1251_p1, zext_ln220_5_fu_1276_p1, zext_ln220_6_fu_1295_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            fc_layer1_weights_2_address0 <= zext_ln220_6_fu_1295_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            fc_layer1_weights_2_address0 <= zext_ln220_5_fu_1276_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            fc_layer1_weights_2_address0 <= zext_ln220_4_fu_1251_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            fc_layer1_weights_2_address0 <= zext_ln220_3_fu_1232_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            fc_layer1_weights_2_address0 <= zext_ln220_2_fu_1209_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            fc_layer1_weights_2_address0 <= zext_ln220_1_fu_1190_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fc_layer1_weights_2_address0 <= zext_ln220_fu_1162_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            fc_layer1_weights_2_address0 <= zext_ln213_fu_1132_p1(11 - 1 downto 0);
        else 
            fc_layer1_weights_2_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    fc_layer1_weights_2_ce0_assign_proc : process(pool1_out4_empty_n, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            fc_layer1_weights_2_ce0 <= ap_const_logic_1;
        else 
            fc_layer1_weights_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_layer1_weights_3_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state2, zext_ln213_fu_1132_p1, zext_ln220_fu_1162_p1, zext_ln220_1_fu_1190_p1, zext_ln220_2_fu_1209_p1, zext_ln220_3_fu_1232_p1, zext_ln220_4_fu_1251_p1, zext_ln220_5_fu_1276_p1, zext_ln220_6_fu_1295_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            fc_layer1_weights_3_address0 <= zext_ln220_6_fu_1295_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            fc_layer1_weights_3_address0 <= zext_ln220_5_fu_1276_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            fc_layer1_weights_3_address0 <= zext_ln220_4_fu_1251_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            fc_layer1_weights_3_address0 <= zext_ln220_3_fu_1232_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            fc_layer1_weights_3_address0 <= zext_ln220_2_fu_1209_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            fc_layer1_weights_3_address0 <= zext_ln220_1_fu_1190_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fc_layer1_weights_3_address0 <= zext_ln220_fu_1162_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            fc_layer1_weights_3_address0 <= zext_ln213_fu_1132_p1(11 - 1 downto 0);
        else 
            fc_layer1_weights_3_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    fc_layer1_weights_3_ce0_assign_proc : process(pool1_out4_empty_n, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            fc_layer1_weights_3_ce0 <= ap_const_logic_1;
        else 
            fc_layer1_weights_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_layer1_weights_4_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state2, zext_ln213_fu_1132_p1, zext_ln220_fu_1162_p1, zext_ln220_1_fu_1190_p1, zext_ln220_2_fu_1209_p1, zext_ln220_3_fu_1232_p1, zext_ln220_4_fu_1251_p1, zext_ln220_5_fu_1276_p1, zext_ln220_6_fu_1295_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            fc_layer1_weights_4_address0 <= zext_ln220_6_fu_1295_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            fc_layer1_weights_4_address0 <= zext_ln220_5_fu_1276_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            fc_layer1_weights_4_address0 <= zext_ln220_4_fu_1251_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            fc_layer1_weights_4_address0 <= zext_ln220_3_fu_1232_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            fc_layer1_weights_4_address0 <= zext_ln220_2_fu_1209_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            fc_layer1_weights_4_address0 <= zext_ln220_1_fu_1190_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fc_layer1_weights_4_address0 <= zext_ln220_fu_1162_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            fc_layer1_weights_4_address0 <= zext_ln213_fu_1132_p1(11 - 1 downto 0);
        else 
            fc_layer1_weights_4_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    fc_layer1_weights_4_ce0_assign_proc : process(pool1_out4_empty_n, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            fc_layer1_weights_4_ce0 <= ap_const_logic_1;
        else 
            fc_layer1_weights_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_layer1_weights_5_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state2, zext_ln213_fu_1132_p1, zext_ln220_fu_1162_p1, zext_ln220_1_fu_1190_p1, zext_ln220_2_fu_1209_p1, zext_ln220_3_fu_1232_p1, zext_ln220_4_fu_1251_p1, zext_ln220_5_fu_1276_p1, zext_ln220_6_fu_1295_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            fc_layer1_weights_5_address0 <= zext_ln220_6_fu_1295_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            fc_layer1_weights_5_address0 <= zext_ln220_5_fu_1276_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            fc_layer1_weights_5_address0 <= zext_ln220_4_fu_1251_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            fc_layer1_weights_5_address0 <= zext_ln220_3_fu_1232_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            fc_layer1_weights_5_address0 <= zext_ln220_2_fu_1209_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            fc_layer1_weights_5_address0 <= zext_ln220_1_fu_1190_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fc_layer1_weights_5_address0 <= zext_ln220_fu_1162_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            fc_layer1_weights_5_address0 <= zext_ln213_fu_1132_p1(11 - 1 downto 0);
        else 
            fc_layer1_weights_5_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    fc_layer1_weights_5_ce0_assign_proc : process(pool1_out4_empty_n, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            fc_layer1_weights_5_ce0 <= ap_const_logic_1;
        else 
            fc_layer1_weights_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_layer1_weights_6_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state2, zext_ln213_fu_1132_p1, zext_ln220_fu_1162_p1, zext_ln220_1_fu_1190_p1, zext_ln220_2_fu_1209_p1, zext_ln220_3_fu_1232_p1, zext_ln220_4_fu_1251_p1, zext_ln220_5_fu_1276_p1, zext_ln220_6_fu_1295_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            fc_layer1_weights_6_address0 <= zext_ln220_6_fu_1295_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            fc_layer1_weights_6_address0 <= zext_ln220_5_fu_1276_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            fc_layer1_weights_6_address0 <= zext_ln220_4_fu_1251_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            fc_layer1_weights_6_address0 <= zext_ln220_3_fu_1232_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            fc_layer1_weights_6_address0 <= zext_ln220_2_fu_1209_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            fc_layer1_weights_6_address0 <= zext_ln220_1_fu_1190_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fc_layer1_weights_6_address0 <= zext_ln220_fu_1162_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            fc_layer1_weights_6_address0 <= zext_ln213_fu_1132_p1(11 - 1 downto 0);
        else 
            fc_layer1_weights_6_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    fc_layer1_weights_6_ce0_assign_proc : process(pool1_out4_empty_n, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            fc_layer1_weights_6_ce0 <= ap_const_logic_1;
        else 
            fc_layer1_weights_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_layer1_weights_7_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state2, zext_ln213_fu_1132_p1, zext_ln220_fu_1162_p1, zext_ln220_1_fu_1190_p1, zext_ln220_2_fu_1209_p1, zext_ln220_3_fu_1232_p1, zext_ln220_4_fu_1251_p1, zext_ln220_5_fu_1276_p1, zext_ln220_6_fu_1295_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            fc_layer1_weights_7_address0 <= zext_ln220_6_fu_1295_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            fc_layer1_weights_7_address0 <= zext_ln220_5_fu_1276_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            fc_layer1_weights_7_address0 <= zext_ln220_4_fu_1251_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            fc_layer1_weights_7_address0 <= zext_ln220_3_fu_1232_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            fc_layer1_weights_7_address0 <= zext_ln220_2_fu_1209_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            fc_layer1_weights_7_address0 <= zext_ln220_1_fu_1190_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fc_layer1_weights_7_address0 <= zext_ln220_fu_1162_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            fc_layer1_weights_7_address0 <= zext_ln213_fu_1132_p1(11 - 1 downto 0);
        else 
            fc_layer1_weights_7_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    fc_layer1_weights_7_ce0_assign_proc : process(pool1_out4_empty_n, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            fc_layer1_weights_7_ce0 <= ap_const_logic_1;
        else 
            fc_layer1_weights_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_layer1_weights_8_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state2, zext_ln213_fu_1132_p1, zext_ln220_fu_1162_p1, zext_ln220_1_fu_1190_p1, zext_ln220_2_fu_1209_p1, zext_ln220_3_fu_1232_p1, zext_ln220_4_fu_1251_p1, zext_ln220_5_fu_1276_p1, zext_ln220_6_fu_1295_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            fc_layer1_weights_8_address0 <= zext_ln220_6_fu_1295_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            fc_layer1_weights_8_address0 <= zext_ln220_5_fu_1276_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            fc_layer1_weights_8_address0 <= zext_ln220_4_fu_1251_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            fc_layer1_weights_8_address0 <= zext_ln220_3_fu_1232_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            fc_layer1_weights_8_address0 <= zext_ln220_2_fu_1209_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            fc_layer1_weights_8_address0 <= zext_ln220_1_fu_1190_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fc_layer1_weights_8_address0 <= zext_ln220_fu_1162_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            fc_layer1_weights_8_address0 <= zext_ln213_fu_1132_p1(11 - 1 downto 0);
        else 
            fc_layer1_weights_8_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    fc_layer1_weights_8_ce0_assign_proc : process(pool1_out4_empty_n, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            fc_layer1_weights_8_ce0 <= ap_const_logic_1;
        else 
            fc_layer1_weights_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_layer1_weights_9_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state2, zext_ln213_fu_1132_p1, zext_ln220_fu_1162_p1, zext_ln220_1_fu_1190_p1, zext_ln220_2_fu_1209_p1, zext_ln220_3_fu_1232_p1, zext_ln220_4_fu_1251_p1, zext_ln220_5_fu_1276_p1, zext_ln220_6_fu_1295_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            fc_layer1_weights_9_address0 <= zext_ln220_6_fu_1295_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            fc_layer1_weights_9_address0 <= zext_ln220_5_fu_1276_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            fc_layer1_weights_9_address0 <= zext_ln220_4_fu_1251_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            fc_layer1_weights_9_address0 <= zext_ln220_3_fu_1232_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            fc_layer1_weights_9_address0 <= zext_ln220_2_fu_1209_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            fc_layer1_weights_9_address0 <= zext_ln220_1_fu_1190_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fc_layer1_weights_9_address0 <= zext_ln220_fu_1162_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            fc_layer1_weights_9_address0 <= zext_ln213_fu_1132_p1(11 - 1 downto 0);
        else 
            fc_layer1_weights_9_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    fc_layer1_weights_9_ce0_assign_proc : process(pool1_out4_empty_n, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            fc_layer1_weights_9_ce0 <= ap_const_logic_1;
        else 
            fc_layer1_weights_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_326_p_ce <= grp_fu_937_ce;
    grp_fu_326_p_din0 <= grp_fu_937_p0;
    grp_fu_326_p_din1 <= grp_fu_937_p1;
    grp_fu_326_p_opcode <= ap_const_lv2_0;
    grp_fu_334_p_ce <= grp_fu_966_ce;
    grp_fu_334_p_din0 <= grp_fu_966_p0;
    grp_fu_334_p_din1 <= grp_fu_966_p1;
    grp_fu_659_p_ce <= grp_fu_942_ce;
    grp_fu_659_p_din0 <= grp_fu_942_p0;
    grp_fu_659_p_din1 <= grp_fu_942_p1;
    grp_fu_659_p_opcode <= ap_const_lv2_0;
    grp_fu_675_p_ce <= grp_fu_972_ce;
    grp_fu_675_p_din0 <= grp_fu_972_p0;
    grp_fu_675_p_din1 <= grp_fu_972_p1;

    grp_fu_937_ce_assign_proc : process(ap_CS_fsm_state1, fc1_out5_full_n, pool1_out4_empty_n, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or ((fc1_out5_full_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state51)) or ((fc1_out5_full_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state50)) or ((fc1_out5_full_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state49)) or ((fc1_out5_full_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((fc1_out5_full_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state47)) or ((pool1_out4_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((pool1_out4_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((pool1_out4_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((pool1_out4_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((pool1_out4_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((pool1_out4_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((pool1_out4_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            grp_fu_937_ce <= ap_const_logic_0;
        else 
            grp_fu_937_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_937_p0_assign_proc : process(ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, reg_1057, ap_CS_fsm_state46, reg_1071, reg_1085, reg_1098, reg_1110, output_8_reg_829, output_6_reg_853, output_4_reg_877, output_2_reg_901, output_1_reg_913, output_reg_925, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            grp_fu_937_p0 <= output_1_reg_913;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            grp_fu_937_p0 <= reg_1110;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_fu_937_p0 <= reg_1098;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_937_p0 <= reg_1085;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_fu_937_p0 <= reg_1071;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_937_p0 <= reg_1057;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            grp_fu_937_p0 <= output_8_reg_829;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state49))) then 
            grp_fu_937_p0 <= output_6_reg_853;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            grp_fu_937_p0 <= output_4_reg_877;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state47))) then 
            grp_fu_937_p0 <= output_2_reg_901;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            grp_fu_937_p0 <= output_reg_925;
        else 
            grp_fu_937_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_937_p1_assign_proc : process(ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state46, ap_CS_fsm_state45, grp_fu_334_p_dout0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_937_p1 <= ap_const_lv32_BCD9E83E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_937_p1 <= ap_const_lv32_BAB78034;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_937_p1 <= ap_const_lv32_3E41F213;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_937_p1 <= ap_const_lv32_BCDB8BAC;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            grp_fu_937_p1 <= ap_const_lv32_3CCD9E84;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_fu_937_p1 <= ap_const_lv32_3D9205BC;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            grp_fu_937_p1 <= grp_fu_334_p_dout0;
        else 
            grp_fu_937_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_937_p2 <= grp_fu_326_p_dout0;

    grp_fu_942_ce_assign_proc : process(ap_CS_fsm_state1, fc1_out5_full_n, pool1_out4_empty_n, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state46, ap_CS_fsm_state2, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or ((fc1_out5_full_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state51)) or ((fc1_out5_full_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state50)) or ((fc1_out5_full_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state49)) or ((fc1_out5_full_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((fc1_out5_full_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state47)) or ((pool1_out4_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((pool1_out4_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((pool1_out4_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((pool1_out4_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((pool1_out4_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((pool1_out4_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((pool1_out4_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            grp_fu_942_ce <= ap_const_logic_0;
        else 
            grp_fu_942_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_942_p0_assign_proc : process(ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, reg_1064, reg_1078, reg_1091, reg_1104, reg_1115, output_9_reg_817, output_7_reg_841, output_5_reg_865, output_3_reg_889, output_1_reg_913)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            grp_fu_942_p0 <= reg_1115;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_fu_942_p0 <= reg_1104;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_942_p0 <= reg_1091;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_fu_942_p0 <= reg_1078;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_942_p0 <= reg_1064;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            grp_fu_942_p0 <= output_9_reg_817;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state49))) then 
            grp_fu_942_p0 <= output_7_reg_841;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            grp_fu_942_p0 <= output_5_reg_865;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state47))) then 
            grp_fu_942_p0 <= output_3_reg_889;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_942_p0 <= output_1_reg_913;
        else 
            grp_fu_942_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_942_p1_assign_proc : process(ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, grp_fu_675_p_dout0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_942_p1 <= ap_const_lv32_BCC8B439;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_942_p1 <= ap_const_lv32_BB79096C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_942_p1 <= ap_const_lv32_BD3020C5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_942_p1 <= ap_const_lv32_3C09A027;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            grp_fu_942_p1 <= grp_fu_675_p_dout0;
        else 
            grp_fu_942_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_942_p2 <= grp_fu_659_p_dout0;

    grp_fu_966_ce_assign_proc : process(ap_CS_fsm_state1, pool1_out4_empty_n, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state46, ap_CS_fsm_state2, ap_CS_fsm_state44, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or ((pool1_out4_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((pool1_out4_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((pool1_out4_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((pool1_out4_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((pool1_out4_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((pool1_out4_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((pool1_out4_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((pool1_out4_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            grp_fu_966_ce <= ap_const_logic_0;
        else 
            grp_fu_966_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_966_p0_assign_proc : process(fc_layer1_weights_0_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, reg_983, reg_993, reg_1003, reg_1013, reg_1023, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, reg_1047, fc_layer1_weights_4_load_1_reg_1981, fc_layer1_weights_6_load_1_reg_1991, fc_layer1_weights_8_load_1_reg_2001, fc_layer1_weights_0_load_2_reg_2066, fc_layer1_weights_4_load_2_reg_2076, fc_layer1_weights_6_load_2_reg_2086, fc_layer1_weights_8_load_2_reg_2096, fc_layer1_weights_0_load_3_reg_2161, fc_layer1_weights_2_load_3_reg_2171, fc_layer1_weights_6_load_3_reg_2181, fc_layer1_weights_8_load_3_reg_2191, fc_layer1_weights_0_load_4_reg_2256, fc_layer1_weights_2_load_4_reg_2266, fc_layer1_weights_4_load_4_reg_2276, fc_layer1_weights_8_load_4_reg_2286, fc_layer1_weights_0_load_5_reg_2352, fc_layer1_weights_2_load_5_reg_2362, fc_layer1_weights_4_load_5_reg_2372, fc_layer1_weights_6_load_5_reg_2382, fc_layer1_weights_2_load_6_reg_2447, fc_layer1_weights_4_load_6_reg_2457, fc_layer1_weights_6_load_6_reg_2467, fc_layer1_weights_8_load_6_reg_2477, fc_layer1_weights_0_load_7_reg_2542, fc_layer1_weights_4_load_7_reg_2552, fc_layer1_weights_6_load_7_reg_2562, fc_layer1_weights_8_load_7_reg_2572)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_966_p0 <= fc_layer1_weights_8_load_7_reg_2572;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_966_p0 <= fc_layer1_weights_6_load_7_reg_2562;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_fu_966_p0 <= fc_layer1_weights_4_load_7_reg_2552;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_966_p0 <= fc_layer1_weights_0_load_7_reg_2542;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_966_p0 <= fc_layer1_weights_8_load_6_reg_2477;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_966_p0 <= fc_layer1_weights_6_load_6_reg_2467;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_966_p0 <= fc_layer1_weights_4_load_6_reg_2457;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_966_p0 <= fc_layer1_weights_2_load_6_reg_2447;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_966_p0 <= fc_layer1_weights_6_load_5_reg_2382;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_966_p0 <= fc_layer1_weights_4_load_5_reg_2372;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_966_p0 <= fc_layer1_weights_2_load_5_reg_2362;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_966_p0 <= fc_layer1_weights_0_load_5_reg_2352;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_966_p0 <= fc_layer1_weights_8_load_4_reg_2286;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_966_p0 <= fc_layer1_weights_4_load_4_reg_2276;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_966_p0 <= fc_layer1_weights_2_load_4_reg_2266;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_966_p0 <= fc_layer1_weights_0_load_4_reg_2256;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_966_p0 <= fc_layer1_weights_8_load_3_reg_2191;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_966_p0 <= fc_layer1_weights_6_load_3_reg_2181;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_966_p0 <= fc_layer1_weights_2_load_3_reg_2171;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_966_p0 <= fc_layer1_weights_0_load_3_reg_2161;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_966_p0 <= fc_layer1_weights_8_load_2_reg_2096;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_966_p0 <= fc_layer1_weights_6_load_2_reg_2086;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_966_p0 <= fc_layer1_weights_4_load_2_reg_2076;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_966_p0 <= fc_layer1_weights_0_load_2_reg_2066;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_966_p0 <= fc_layer1_weights_8_load_1_reg_2001;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_966_p0 <= fc_layer1_weights_6_load_1_reg_1991;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_966_p0 <= fc_layer1_weights_4_load_1_reg_1981;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_966_p0 <= reg_1047;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            grp_fu_966_p0 <= reg_983;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_fu_966_p0 <= reg_1023;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_fu_966_p0 <= reg_1013;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_966_p0 <= reg_1003;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            grp_fu_966_p0 <= reg_993;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_966_p0 <= fc_layer1_weights_0_q0;
        else 
            grp_fu_966_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_966_p1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, read_fu_1150_p1, read_reg_1913, read_266_fu_1265_p1, read_266_reg_2346, read_267_fu_1309_p1, read_267_reg_2582, read_268_fu_1314_p1, read_268_reg_2588, read_269_fu_1319_p1, read_269_reg_2594, read_270_fu_1324_p1, read_270_reg_2600, read_271_fu_1330_p1, read_271_reg_2606, read_272_fu_1335_p1, read_272_reg_2612)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39))) then 
            grp_fu_966_p1 <= read_272_reg_2612;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_966_p1 <= read_272_fu_1335_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            grp_fu_966_p1 <= read_271_reg_2606;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_966_p1 <= read_271_fu_1330_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            grp_fu_966_p1 <= read_270_reg_2600;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_966_p1 <= read_270_fu_1324_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            grp_fu_966_p1 <= read_269_reg_2594;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_966_p1 <= read_269_fu_1319_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            grp_fu_966_p1 <= read_268_reg_2588;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_966_p1 <= read_268_fu_1314_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            grp_fu_966_p1 <= read_267_reg_2582;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_966_p1 <= read_267_fu_1309_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_966_p1 <= read_266_reg_2346;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_966_p1 <= read_266_fu_1265_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            grp_fu_966_p1 <= read_reg_1913;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_966_p1 <= read_fu_1150_p1;
        else 
            grp_fu_966_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_966_p2 <= grp_fu_334_p_dout0;

    grp_fu_972_ce_assign_proc : process(ap_CS_fsm_state1, pool1_out4_empty_n, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state46, ap_CS_fsm_state2, ap_CS_fsm_state44, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or ((pool1_out4_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((pool1_out4_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((pool1_out4_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((pool1_out4_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((pool1_out4_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((pool1_out4_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((pool1_out4_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((pool1_out4_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            grp_fu_972_ce <= ap_const_logic_0;
        else 
            grp_fu_972_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_972_p0_assign_proc : process(fc_layer1_weights_1_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, reg_988, reg_998, reg_1008, reg_1018, reg_1028, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, reg_1052, fc_layer1_weights_5_load_1_reg_1986, fc_layer1_weights_7_load_1_reg_1996, fc_layer1_weights_9_load_1_reg_2006, fc_layer1_weights_1_load_2_reg_2071, fc_layer1_weights_5_load_2_reg_2081, fc_layer1_weights_7_load_2_reg_2091, fc_layer1_weights_9_load_2_reg_2101, fc_layer1_weights_1_load_3_reg_2166, fc_layer1_weights_3_load_3_reg_2176, fc_layer1_weights_7_load_3_reg_2186, fc_layer1_weights_9_load_3_reg_2196, fc_layer1_weights_1_load_4_reg_2261, fc_layer1_weights_3_load_4_reg_2271, fc_layer1_weights_5_load_4_reg_2281, fc_layer1_weights_9_load_4_reg_2291, fc_layer1_weights_1_load_5_reg_2357, fc_layer1_weights_3_load_5_reg_2367, fc_layer1_weights_5_load_5_reg_2377, fc_layer1_weights_7_load_5_reg_2387, fc_layer1_weights_3_load_6_reg_2452, fc_layer1_weights_5_load_6_reg_2462, fc_layer1_weights_7_load_6_reg_2472, fc_layer1_weights_9_load_6_reg_2482, fc_layer1_weights_1_load_7_reg_2547, fc_layer1_weights_5_load_7_reg_2557, fc_layer1_weights_7_load_7_reg_2567, fc_layer1_weights_9_load_7_reg_2577)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_972_p0 <= fc_layer1_weights_9_load_7_reg_2577;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_972_p0 <= fc_layer1_weights_7_load_7_reg_2567;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_fu_972_p0 <= fc_layer1_weights_5_load_7_reg_2557;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_972_p0 <= fc_layer1_weights_1_load_7_reg_2547;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_972_p0 <= fc_layer1_weights_9_load_6_reg_2482;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_972_p0 <= fc_layer1_weights_7_load_6_reg_2472;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_972_p0 <= fc_layer1_weights_5_load_6_reg_2462;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_972_p0 <= fc_layer1_weights_3_load_6_reg_2452;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_972_p0 <= fc_layer1_weights_7_load_5_reg_2387;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_972_p0 <= fc_layer1_weights_5_load_5_reg_2377;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_972_p0 <= fc_layer1_weights_3_load_5_reg_2367;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_972_p0 <= fc_layer1_weights_1_load_5_reg_2357;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_972_p0 <= fc_layer1_weights_9_load_4_reg_2291;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_972_p0 <= fc_layer1_weights_5_load_4_reg_2281;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_972_p0 <= fc_layer1_weights_3_load_4_reg_2271;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_972_p0 <= fc_layer1_weights_1_load_4_reg_2261;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_972_p0 <= fc_layer1_weights_9_load_3_reg_2196;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_972_p0 <= fc_layer1_weights_7_load_3_reg_2186;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_972_p0 <= fc_layer1_weights_3_load_3_reg_2176;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_972_p0 <= fc_layer1_weights_1_load_3_reg_2166;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_972_p0 <= fc_layer1_weights_9_load_2_reg_2101;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_972_p0 <= fc_layer1_weights_7_load_2_reg_2091;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_972_p0 <= fc_layer1_weights_5_load_2_reg_2081;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_972_p0 <= fc_layer1_weights_1_load_2_reg_2071;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_972_p0 <= fc_layer1_weights_9_load_1_reg_2006;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_972_p0 <= fc_layer1_weights_7_load_1_reg_1996;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_972_p0 <= fc_layer1_weights_5_load_1_reg_1986;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_972_p0 <= reg_1052;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            grp_fu_972_p0 <= reg_988;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_fu_972_p0 <= reg_1028;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_fu_972_p0 <= reg_1018;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_972_p0 <= reg_1008;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            grp_fu_972_p0 <= reg_998;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_972_p0 <= fc_layer1_weights_1_q0;
        else 
            grp_fu_972_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_972_p1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, read_fu_1150_p1, read_reg_1913, read_266_fu_1265_p1, read_266_reg_2346, read_267_fu_1309_p1, read_267_reg_2582, read_268_fu_1314_p1, read_268_reg_2588, read_269_fu_1319_p1, read_269_reg_2594, read_270_fu_1324_p1, read_270_reg_2600, read_271_fu_1330_p1, read_271_reg_2606, read_272_fu_1335_p1, read_272_reg_2612)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39))) then 
            grp_fu_972_p1 <= read_272_reg_2612;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_972_p1 <= read_272_fu_1335_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            grp_fu_972_p1 <= read_271_reg_2606;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_972_p1 <= read_271_fu_1330_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            grp_fu_972_p1 <= read_270_reg_2600;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_972_p1 <= read_270_fu_1324_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            grp_fu_972_p1 <= read_269_reg_2594;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_972_p1 <= read_269_fu_1319_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            grp_fu_972_p1 <= read_268_reg_2588;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_972_p1 <= read_268_fu_1314_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            grp_fu_972_p1 <= read_267_reg_2582;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_972_p1 <= read_267_fu_1309_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_972_p1 <= read_266_reg_2346;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_972_p1 <= read_266_fu_1265_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            grp_fu_972_p1 <= read_reg_1913;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_972_p1 <= read_fu_1150_p1;
        else 
            grp_fu_972_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_972_p2 <= grp_fu_675_p_dout0;

    grp_fu_978_p0_assign_proc : process(ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, reg_1057, reg_1064, reg_1071, reg_1078, reg_1091)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            grp_fu_978_p0 <= reg_1091;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            grp_fu_978_p0 <= reg_1071;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            grp_fu_978_p0 <= reg_1078;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            grp_fu_978_p0 <= reg_1064;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47))) then 
            grp_fu_978_p0 <= reg_1057;
        else 
            grp_fu_978_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln213_fu_1126_p2 <= "1" when (j_reg_805 = ap_const_lv8_C4) else "0";
    icmp_ln34_10_fu_1613_p2 <= "0" when (tmp_973_fu_1599_p4 = ap_const_lv8_FF) else "1";
    icmp_ln34_11_fu_1619_p2 <= "1" when (trunc_ln34_5_fu_1609_p1 = ap_const_lv23_0) else "0";
    icmp_ln34_12_fu_1664_p2 <= "0" when (tmp_975_fu_1650_p4 = ap_const_lv8_FF) else "1";
    icmp_ln34_13_fu_1670_p2 <= "1" when (trunc_ln34_6_fu_1660_p1 = ap_const_lv23_0) else "0";
    icmp_ln34_14_fu_1715_p2 <= "0" when (tmp_977_fu_1701_p4 = ap_const_lv8_FF) else "1";
    icmp_ln34_15_fu_1721_p2 <= "1" when (trunc_ln34_7_fu_1711_p1 = ap_const_lv23_0) else "0";
    icmp_ln34_16_fu_1766_p2 <= "0" when (tmp_979_fu_1752_p4 = ap_const_lv8_FF) else "1";
    icmp_ln34_17_fu_1772_p2 <= "1" when (trunc_ln34_8_fu_1762_p1 = ap_const_lv23_0) else "0";
    icmp_ln34_18_fu_1817_p2 <= "0" when (tmp_981_fu_1803_p4 = ap_const_lv8_FF) else "1";
    icmp_ln34_19_fu_1823_p2 <= "1" when (trunc_ln34_9_fu_1813_p1 = ap_const_lv23_0) else "0";
    icmp_ln34_1_fu_1364_p2 <= "1" when (trunc_ln34_fu_1354_p1 = ap_const_lv23_0) else "0";
    icmp_ln34_2_fu_1409_p2 <= "0" when (tmp_965_fu_1395_p4 = ap_const_lv8_FF) else "1";
    icmp_ln34_3_fu_1415_p2 <= "1" when (trunc_ln34_1_fu_1405_p1 = ap_const_lv23_0) else "0";
    icmp_ln34_4_fu_1460_p2 <= "0" when (tmp_967_fu_1446_p4 = ap_const_lv8_FF) else "1";
    icmp_ln34_5_fu_1466_p2 <= "1" when (trunc_ln34_2_fu_1456_p1 = ap_const_lv23_0) else "0";
    icmp_ln34_6_fu_1511_p2 <= "0" when (tmp_969_fu_1497_p4 = ap_const_lv8_FF) else "1";
    icmp_ln34_7_fu_1517_p2 <= "1" when (trunc_ln34_3_fu_1507_p1 = ap_const_lv23_0) else "0";
    icmp_ln34_8_fu_1562_p2 <= "0" when (tmp_971_fu_1548_p4 = ap_const_lv8_FF) else "1";
    icmp_ln34_9_fu_1568_p2 <= "1" when (trunc_ln34_4_fu_1558_p1 = ap_const_lv23_0) else "0";
    icmp_ln34_fu_1358_p2 <= "0" when (tmp_fu_1344_p4 = ap_const_lv8_FF) else "1";
    or_ln34_1_fu_1421_p2 <= (icmp_ln34_3_fu_1415_p2 or icmp_ln34_2_fu_1409_p2);
    or_ln34_2_fu_1472_p2 <= (icmp_ln34_5_fu_1466_p2 or icmp_ln34_4_fu_1460_p2);
    or_ln34_3_fu_1523_p2 <= (icmp_ln34_7_fu_1517_p2 or icmp_ln34_6_fu_1511_p2);
    or_ln34_4_fu_1574_p2 <= (icmp_ln34_9_fu_1568_p2 or icmp_ln34_8_fu_1562_p2);
    or_ln34_5_fu_1625_p2 <= (icmp_ln34_11_fu_1619_p2 or icmp_ln34_10_fu_1613_p2);
    or_ln34_6_fu_1676_p2 <= (icmp_ln34_13_fu_1670_p2 or icmp_ln34_12_fu_1664_p2);
    or_ln34_7_fu_1727_p2 <= (icmp_ln34_15_fu_1721_p2 or icmp_ln34_14_fu_1715_p2);
    or_ln34_8_fu_1778_p2 <= (icmp_ln34_17_fu_1772_p2 or icmp_ln34_16_fu_1766_p2);
    or_ln34_9_fu_1829_p2 <= (icmp_ln34_19_fu_1823_p2 or icmp_ln34_18_fu_1817_p2);
    or_ln34_fu_1370_p2 <= (icmp_ln34_fu_1358_p2 or icmp_ln34_1_fu_1364_p2);

    pool1_out4_blk_n_assign_proc : process(pool1_out4_empty_n, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            pool1_out4_blk_n <= pool1_out4_empty_n;
        else 
            pool1_out4_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    pool1_out4_read_assign_proc : process(pool1_out4_empty_n, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if ((((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((pool1_out4_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            pool1_out4_read <= ap_const_logic_1;
        else 
            pool1_out4_read <= ap_const_logic_0;
        end if; 
    end process;

    read_266_fu_1265_p1 <= reg_1043;
    read_267_fu_1309_p1 <= pool1_out4_read_2_reg_2061;
    read_268_fu_1314_p1 <= pool1_out4_read_3_reg_2156;
    read_269_fu_1319_p1 <= pool1_out4_read_4_reg_2251;
    read_270_fu_1324_p1 <= reg_1043;
    read_271_fu_1330_p1 <= pool1_out4_read_6_reg_2442;
    read_272_fu_1335_p1 <= pool1_out4_read_7_reg_2537;
    read_fu_1150_p1 <= pool1_out4_dout;
    select_ln174_1_fu_1433_p3 <= 
        bitcast_ln34_1_fu_1391_p1 when (and_ln34_1_fu_1427_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln174_2_fu_1484_p3 <= 
        bitcast_ln34_2_fu_1442_p1 when (and_ln34_2_fu_1478_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln174_3_fu_1535_p3 <= 
        bitcast_ln34_3_fu_1493_p1 when (and_ln34_3_fu_1529_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln174_4_fu_1586_p3 <= 
        bitcast_ln34_4_fu_1544_p1 when (and_ln34_4_fu_1580_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln174_5_fu_1637_p3 <= 
        bitcast_ln34_5_fu_1595_p1 when (and_ln34_5_fu_1631_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln174_6_fu_1688_p3 <= 
        bitcast_ln34_6_fu_1646_p1 when (and_ln34_6_fu_1682_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln174_7_fu_1739_p3 <= 
        bitcast_ln34_7_fu_1697_p1 when (and_ln34_7_fu_1733_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln174_8_fu_1790_p3 <= 
        bitcast_ln34_8_fu_1748_p1 when (and_ln34_8_fu_1784_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln174_9_fu_1841_p3 <= 
        bitcast_ln34_9_fu_1799_p1 when (and_ln34_9_fu_1835_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln174_fu_1382_p3 <= 
        bitcast_ln34_fu_1340_p1 when (and_ln34_fu_1376_p2(0) = '1') else 
        ap_const_lv32_0;
        sext_ln220_fu_1228_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_88_fu_1223_p2),10));

    tmp_965_fu_1395_p4 <= bitcast_ln34_1_fu_1391_p1(30 downto 23);
    tmp_967_fu_1446_p4 <= bitcast_ln34_2_fu_1442_p1(30 downto 23);
    tmp_969_fu_1497_p4 <= bitcast_ln34_3_fu_1493_p1(30 downto 23);
    tmp_971_fu_1548_p4 <= bitcast_ln34_4_fu_1544_p1(30 downto 23);
    tmp_973_fu_1599_p4 <= bitcast_ln34_5_fu_1595_p1(30 downto 23);
    tmp_975_fu_1650_p4 <= bitcast_ln34_6_fu_1646_p1(30 downto 23);
    tmp_977_fu_1701_p4 <= bitcast_ln34_7_fu_1697_p1(30 downto 23);
    tmp_979_fu_1752_p4 <= bitcast_ln34_8_fu_1748_p1(30 downto 23);
    tmp_981_fu_1803_p4 <= bitcast_ln34_9_fu_1799_p1(30 downto 23);
    tmp_fu_1344_p4 <= bitcast_ln34_fu_1340_p1(30 downto 23);
    trunc_ln34_1_fu_1405_p1 <= bitcast_ln34_1_fu_1391_p1(23 - 1 downto 0);
    trunc_ln34_2_fu_1456_p1 <= bitcast_ln34_2_fu_1442_p1(23 - 1 downto 0);
    trunc_ln34_3_fu_1507_p1 <= bitcast_ln34_3_fu_1493_p1(23 - 1 downto 0);
    trunc_ln34_4_fu_1558_p1 <= bitcast_ln34_4_fu_1544_p1(23 - 1 downto 0);
    trunc_ln34_5_fu_1609_p1 <= bitcast_ln34_5_fu_1595_p1(23 - 1 downto 0);
    trunc_ln34_6_fu_1660_p1 <= bitcast_ln34_6_fu_1646_p1(23 - 1 downto 0);
    trunc_ln34_7_fu_1711_p1 <= bitcast_ln34_7_fu_1697_p1(23 - 1 downto 0);
    trunc_ln34_8_fu_1762_p1 <= bitcast_ln34_8_fu_1748_p1(23 - 1 downto 0);
    trunc_ln34_9_fu_1813_p1 <= bitcast_ln34_9_fu_1799_p1(23 - 1 downto 0);
    trunc_ln34_fu_1354_p1 <= bitcast_ln34_fu_1340_p1(23 - 1 downto 0);
    zext_ln213_1_fu_1176_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_805),11));
    zext_ln213_2_fu_1180_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_805),10));
    zext_ln213_3_fu_1146_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_805),9));
    zext_ln213_fu_1132_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_805),64));
    zext_ln220_1_fu_1190_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_86_fu_1184_p2),64));
    zext_ln220_2_fu_1209_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_87_fu_1204_p2),64));
    zext_ln220_3_fu_1232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln220_fu_1228_p1),64));
    zext_ln220_4_fu_1251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_89_fu_1246_p2),64));
    zext_ln220_5_fu_1276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_90_fu_1271_p2),64));
    zext_ln220_6_fu_1295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_91_fu_1290_p2),64));
    zext_ln220_fu_1162_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_85_fu_1156_p2),64));
end behav;
