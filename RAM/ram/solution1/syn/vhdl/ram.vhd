-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ram is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_str_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_str_V_TVALID : IN STD_LOGIC;
    in_str_V_TREADY : OUT STD_LOGIC;
    out_str_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_str_V_TVALID : OUT STD_LOGIC;
    out_str_V_TREADY : IN STD_LOGIC;
    enable : OUT STD_LOGIC;
    enable_ap_vld : OUT STD_LOGIC );
end;


architecture behav of ram is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "ram_ram,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.477319,HLS_SYN_LAT=788,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=312,HLS_SYN_LUT=2118,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_310 : STD_LOGIC_VECTOR (9 downto 0) := "1100010000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_18 : STD_LOGIC_VECTOR (11 downto 0) := "000000011000";
    constant ap_const_lv12_FE8 : STD_LOGIC_VECTOR (11 downto 0) := "111111101000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv12_35 : STD_LOGIC_VECTOR (11 downto 0) := "000000110101";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv6_39 : STD_LOGIC_VECTOR (5 downto 0) := "111001";
    constant ap_const_lv32_FFFFFFE7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111100111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal image_input_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal image_input_ce0 : STD_LOGIC;
    signal image_input_we0 : STD_LOGIC;
    signal image_input_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal image_input_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_str_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln93_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_str_V_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln103_reg_825 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln103_reg_825_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal icmp_ln103_reg_825_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv11_reg_185 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvars_iv_reg_196 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_nbreadreq_fu_134_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln103_fu_212_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln103_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln103_reg_825_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal image_input_load_reg_834 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal image_input_load_reg_834_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_8_reg_840 : STD_LOGIC_VECTOR (0 downto 0);
    signal exp_tmp_reg_845 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_fu_255_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln565_reg_850 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln571_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_reg_855 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln93_fu_502_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln93_reg_868 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state8_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln93_reg_873 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_reg_877 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_4_fu_520_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_4_reg_882 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_4_fu_534_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_4_reg_887 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_fu_560_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_reg_892 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln958_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln958_reg_898 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln958_fu_674_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln958_reg_903 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln943_fu_682_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_reg_908 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state8 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_phi_mux_indvars_iv_phi_fu_200_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln103_fu_224_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln93_fu_686_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_208_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_fu_229_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln555_fu_233_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_9_fu_268_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln569_fu_275_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_1_fu_279_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln455_fu_265_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_292_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln581_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln581_fu_304_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_fu_310_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_fu_316_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal man_V_2_fu_285_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_7_fu_338_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln581_fu_324_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln586_fu_354_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_fu_358_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal bitcast_ln702_fu_368_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_371_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln583_fu_334_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln582_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln571_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln581_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln604_fu_387_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln603_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln588_fu_379_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln586_fu_364_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln582_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln571_fu_451_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln571_1_fu_463_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln571_1_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln571_3_fu_479_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln571_2_fu_471_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_fu_528_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_5_fu_542_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_fu_552_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_566_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_572_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln947_fu_588_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln947_fu_592_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln947_fu_598_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln947_fu_602_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln949_fu_608_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln949_1_fu_614_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln949_fu_620_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_632_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln946_fu_582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln949_fu_626_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_6_fu_646_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_fu_640_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln946_fu_660_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_1_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln958_fu_694_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln957_fu_691_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln958_fu_699_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln959_fu_709_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln959_fu_714_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln958_fu_703_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln959_fu_718_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_2_fu_724_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln961_fu_731_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_3_fu_734_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_4_fu_740_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_s_fu_754_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln964_fu_770_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln943_fu_762_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_fu_775_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln962_fu_750_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_781_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_7_fu_788_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal LD_fu_800_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln744_fu_804_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_208_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal regslice_both_out_str_V_U_apdone_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal regslice_both_in_str_V_U_apdone_blk : STD_LOGIC;
    signal in_str_V_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal in_str_V_TVALID_int_regslice : STD_LOGIC;
    signal in_str_V_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_in_str_V_U_ack_in : STD_LOGIC;
    signal out_str_V_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal out_str_V_TVALID_int_regslice : STD_LOGIC;
    signal out_str_V_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_out_str_V_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component ram_fpext_32ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component ram_image_input IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ram_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    image_input_U : component ram_image_input
    generic map (
        DataWidth => 32,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => image_input_address0,
        ce0 => image_input_ce0,
        we0 => image_input_we0,
        d0 => image_input_d0,
        q0 => image_input_q0);

    fpext_32ns_64_2_no_dsp_1_U1 : component ram_fpext_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => image_input_q0,
        ce => grp_fu_208_ce,
        dout => grp_fu_208_p1);

    regslice_both_in_str_V_U : component ram_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_str_V_TDATA,
        vld_in => in_str_V_TVALID,
        ack_in => regslice_both_in_str_V_U_ack_in,
        data_out => in_str_V_TDATA_int_regslice,
        vld_out => in_str_V_TVALID_int_regslice,
        ack_out => in_str_V_TREADY_int_regslice,
        apdone_blk => regslice_both_in_str_V_U_apdone_blk);

    regslice_both_out_str_V_U : component ram_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_str_V_TDATA_int_regslice,
        vld_in => out_str_V_TVALID_int_regslice,
        ack_in => out_str_V_TREADY_int_regslice,
        data_out => out_str_V_TDATA,
        vld_out => regslice_both_out_str_V_U_vld_out,
        ack_out => out_str_V_TREADY,
        apdone_blk => regslice_both_out_str_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((tmp_nbreadreq_fu_134_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif (((tmp_nbreadreq_fu_134_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state8))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((tmp_nbreadreq_fu_134_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state8))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state8);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((tmp_nbreadreq_fu_134_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvars_iv11_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_nbreadreq_fu_134_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvars_iv11_reg_185 <= ap_const_lv10_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln103_fu_218_p2 = ap_const_lv1_0))) then 
                indvars_iv11_reg_185 <= add_ln103_fu_212_p2;
            end if; 
        end if;
    end process;

    indvars_iv_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_nbreadreq_fu_134_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvars_iv_reg_196 <= ap_const_lv10_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln93_reg_873 = ap_const_lv1_0))) then 
                indvars_iv_reg_196 <= add_ln93_reg_868;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                add_ln93_reg_868 <= add_ln93_fu_502_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln103_reg_825_pp0_iter1_reg = ap_const_lv1_0))) then
                exp_tmp_reg_845 <= ireg_fu_229_p1(62 downto 52);
                icmp_ln571_reg_855 <= icmp_ln571_fu_259_p2;
                p_Result_8_reg_840 <= ireg_fu_229_p1(63 downto 63);
                trunc_ln565_reg_850 <= trunc_ln565_fu_255_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln103_reg_825 <= icmp_ln103_fu_218_p2;
                icmp_ln103_reg_825_pp0_iter1_reg <= icmp_ln103_reg_825;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln103_reg_825_pp0_iter2_reg <= icmp_ln103_reg_825_pp0_iter1_reg;
                icmp_ln103_reg_825_pp0_iter3_reg <= icmp_ln103_reg_825_pp0_iter2_reg;
                image_input_load_reg_834_pp0_iter2_reg <= image_input_load_reg_834;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln93_fu_508_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln935_reg_877 <= icmp_ln935_fu_514_p2;
                icmp_ln958_reg_898 <= icmp_ln958_fu_654_p2;
                p_Result_4_reg_882 <= in_str_V_TDATA_int_regslice(31 downto 31);
                select_ln958_reg_903 <= select_ln958_fu_674_p3;
                sub_ln944_reg_892 <= sub_ln944_fu_560_p2;
                tmp_V_4_reg_887 <= tmp_V_4_fu_534_p3;
                trunc_ln943_reg_908 <= trunc_ln943_fu_682_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln93_reg_873 <= icmp_ln93_fu_508_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln103_reg_825 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                image_input_load_reg_834 <= image_input_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_enable_reg_pp1_iter0, icmp_ln93_fu_508_p2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, tmp_nbreadreq_fu_134_p3, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln103_fu_218_p2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_CS_fsm_state7, regslice_both_out_str_V_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((tmp_nbreadreq_fu_134_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln103_fu_218_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln103_fu_218_p2 = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                if (((regslice_both_out_str_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((icmp_ln93_fu_508_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((icmp_ln93_fu_508_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    F2_fu_292_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln455_fu_265_p1));
    LD_fu_800_p1 <= p_Result_7_fu_788_p5(32 - 1 downto 0);
    add_ln103_fu_212_p2 <= std_logic_vector(unsigned(indvars_iv11_reg_185) + unsigned(ap_const_lv10_1));
    add_ln581_fu_304_p2 <= std_logic_vector(unsigned(F2_fu_292_p2) + unsigned(ap_const_lv12_FE8));
    add_ln93_fu_502_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvars_iv_phi_fu_200_p4) + unsigned(ap_const_lv10_1));
    add_ln958_fu_694_p2 <= std_logic_vector(unsigned(sub_ln944_reg_892) + unsigned(ap_const_lv32_FFFFFFE7));
    add_ln964_fu_775_p2 <= std_logic_vector(unsigned(sub_ln964_fu_770_p2) + unsigned(select_ln943_fu_762_p3));
    and_ln581_fu_415_p2 <= (xor_ln582_fu_409_p2 and icmp_ln581_fu_298_p2);
    and_ln582_fu_398_p2 <= (xor_ln571_fu_393_p2 and icmp_ln582_fu_328_p2);
    and_ln585_fu_427_p2 <= (icmp_ln585_fu_421_p2 and and_ln581_fu_415_p2);
    and_ln603_fu_445_p2 <= (xor_ln581_fu_439_p2 and icmp_ln603_fu_348_p2);
    and_ln949_1_fu_668_p2 <= (xor_ln949_fu_640_p2 and p_Result_6_fu_646_p3);
    and_ln949_fu_620_p2 <= (tmp_V_4_fu_534_p3 and or_ln949_1_fu_614_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state7 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln103_reg_825_pp0_iter2_reg, ap_enable_reg_pp0_iter4, icmp_ln103_reg_825_pp0_iter3_reg, out_str_V_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= (((out_str_V_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln103_reg_825_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((out_str_V_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln103_reg_825_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln103_reg_825_pp0_iter2_reg, ap_enable_reg_pp0_iter4, icmp_ln103_reg_825_pp0_iter3_reg, ap_block_state5_io, ap_block_state6_io, out_str_V_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state6_io) or ((out_str_V_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln103_reg_825_pp0_iter3_reg = ap_const_lv1_0)))) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state5_io) or ((out_str_V_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln103_reg_825_pp0_iter2_reg = ap_const_lv1_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln103_reg_825_pp0_iter2_reg, ap_enable_reg_pp0_iter4, icmp_ln103_reg_825_pp0_iter3_reg, ap_block_state5_io, ap_block_state6_io, out_str_V_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state6_io) or ((out_str_V_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln103_reg_825_pp0_iter3_reg = ap_const_lv1_0)))) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state5_io) or ((out_str_V_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln103_reg_825_pp0_iter2_reg = ap_const_lv1_0)))));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter0, icmp_ln93_fu_508_p2, in_str_V_TVALID_int_regslice)
    begin
                ap_block_pp1_stage0_11001 <= ((in_str_V_TVALID_int_regslice = ap_const_logic_0) and (icmp_ln93_fu_508_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter0, icmp_ln93_fu_508_p2, in_str_V_TVALID_int_regslice)
    begin
                ap_block_pp1_stage0_subdone <= ((in_str_V_TVALID_int_regslice = ap_const_logic_0) and (icmp_ln93_fu_508_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_io_assign_proc : process(icmp_ln103_reg_825_pp0_iter2_reg, out_str_V_TREADY_int_regslice)
    begin
                ap_block_state5_io <= ((out_str_V_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln103_reg_825_pp0_iter2_reg = ap_const_lv1_0));
    end process;


    ap_block_state5_pp0_stage0_iter3_assign_proc : process(icmp_ln103_reg_825_pp0_iter2_reg, out_str_V_TREADY_int_regslice)
    begin
                ap_block_state5_pp0_stage0_iter3 <= ((out_str_V_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln103_reg_825_pp0_iter2_reg = ap_const_lv1_0));
    end process;


    ap_block_state6_io_assign_proc : process(icmp_ln103_reg_825_pp0_iter3_reg, out_str_V_TREADY_int_regslice)
    begin
                ap_block_state6_io <= ((out_str_V_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln103_reg_825_pp0_iter3_reg = ap_const_lv1_0));
    end process;


    ap_block_state6_pp0_stage0_iter4_assign_proc : process(icmp_ln103_reg_825_pp0_iter3_reg, out_str_V_TREADY_int_regslice)
    begin
                ap_block_state6_pp0_stage0_iter4 <= ((out_str_V_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln103_reg_825_pp0_iter3_reg = ap_const_lv1_0));
    end process;


    ap_block_state8_pp1_stage0_iter0_assign_proc : process(icmp_ln93_fu_508_p2, in_str_V_TVALID_int_regslice)
    begin
                ap_block_state8_pp1_stage0_iter0 <= ((in_str_V_TVALID_int_regslice = ap_const_logic_0) and (icmp_ln93_fu_508_p2 = ap_const_lv1_0));
    end process;

        ap_block_state9_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln103_fu_218_p2)
    begin
        if ((icmp_ln103_fu_218_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state8_assign_proc : process(icmp_ln93_fu_508_p2)
    begin
        if ((icmp_ln93_fu_508_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state8 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvars_iv_phi_fu_200_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, indvars_iv_reg_196, add_ln93_reg_868, icmp_ln93_reg_873, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln93_reg_873 = ap_const_lv1_0))) then 
            ap_phi_mux_indvars_iv_phi_fu_200_p4 <= add_ln93_reg_868;
        else 
            ap_phi_mux_indvars_iv_phi_fu_200_p4 <= indvars_iv_reg_196;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ashr_ln586_fu_358_p2 <= std_logic_vector(shift_right(signed(man_V_2_fu_285_p3),to_integer(unsigned('0' & zext_ln586_fu_354_p1(31-1 downto 0)))));
    bitcast_ln702_fu_368_p1 <= image_input_load_reg_834_pp0_iter2_reg;
    bitcast_ln744_fu_804_p1 <= LD_fu_800_p1;

    enable_assign_proc : process(tmp_nbreadreq_fu_134_p3, ap_CS_fsm_state1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((tmp_nbreadreq_fu_134_p3 = ap_const_lv1_1)) then 
                enable <= ap_const_logic_0;
            elsif ((tmp_nbreadreq_fu_134_p3 = ap_const_lv1_0)) then 
                enable <= ap_const_logic_1;
            else 
                enable <= 'X';
            end if;
        else 
            enable <= 'X';
        end if; 
    end process;


    enable_ap_vld_assign_proc : process(tmp_nbreadreq_fu_134_p3, ap_CS_fsm_state1)
    begin
        if ((((tmp_nbreadreq_fu_134_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((tmp_nbreadreq_fu_134_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            enable_ap_vld <= ap_const_logic_1;
        else 
            enable_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_208_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_208_ce <= ap_const_logic_1;
        else 
            grp_fu_208_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln103_fu_218_p2 <= "1" when (indvars_iv11_reg_185 = ap_const_lv10_310) else "0";
    icmp_ln571_fu_259_p2 <= "1" when (trunc_ln555_fu_233_p1 = ap_const_lv63_0) else "0";
    icmp_ln581_fu_298_p2 <= "1" when (signed(F2_fu_292_p2) > signed(ap_const_lv12_18)) else "0";
    icmp_ln582_fu_328_p2 <= "1" when (F2_fu_292_p2 = ap_const_lv12_18) else "0";
    icmp_ln585_fu_421_p2 <= "1" when (unsigned(sh_amt_fu_316_p3) > unsigned(ap_const_lv12_35)) else "0";
    icmp_ln603_fu_348_p2 <= "1" when (tmp_7_fu_338_p4 = ap_const_lv7_0) else "0";
    icmp_ln935_fu_514_p2 <= "1" when (in_str_V_TDATA_int_regslice = ap_const_lv32_0) else "0";
    icmp_ln93_fu_508_p2 <= "1" when (ap_phi_mux_indvars_iv_phi_fu_200_p4 = ap_const_lv10_310) else "0";
    icmp_ln946_fu_582_p2 <= "1" when (signed(tmp_3_fu_572_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln949_fu_626_p2 <= "0" when (and_ln949_fu_620_p2 = ap_const_lv32_0) else "1";
    icmp_ln958_fu_654_p2 <= "1" when (signed(lsb_index_fu_566_p2) > signed(ap_const_lv32_0)) else "0";

    image_input_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp1_iter1, zext_ln103_fu_224_p1, zext_ln93_fu_686_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            image_input_address0 <= zext_ln93_fu_686_p1(10 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            image_input_address0 <= zext_ln103_fu_224_p1(10 - 1 downto 0);
        else 
            image_input_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    image_input_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            image_input_ce0 <= ap_const_logic_1;
        else 
            image_input_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    image_input_d0 <= 
        ap_const_lv32_0 when (icmp_ln935_reg_877(0) = '1') else 
        bitcast_ln744_fu_804_p1;

    image_input_we0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, icmp_ln93_reg_873, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln93_reg_873 = ap_const_lv1_0))) then 
            image_input_we0 <= ap_const_logic_1;
        else 
            image_input_we0 <= ap_const_logic_0;
        end if; 
    end process;


    in_str_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0, icmp_ln93_fu_508_p2, in_str_V_TVALID_int_regslice)
    begin
        if (((icmp_ln93_fu_508_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            in_str_V_TDATA_blk_n <= in_str_V_TVALID_int_regslice;
        else 
            in_str_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_str_V_TREADY <= regslice_both_in_str_V_U_ack_in;

    in_str_V_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, icmp_ln93_fu_508_p2, ap_block_pp1_stage0_11001)
    begin
        if (((icmp_ln93_fu_508_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            in_str_V_TREADY_int_regslice <= ap_const_logic_1;
        else 
            in_str_V_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    ireg_fu_229_p1 <= grp_fu_208_p1;
    
    l_fu_552_p3_proc : process(p_Result_5_fu_542_p4)
    begin
        l_fu_552_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_5_fu_542_p4(i) = '1' then
                l_fu_552_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    lsb_index_fu_566_p2 <= std_logic_vector(unsigned(sub_ln944_fu_560_p2) + unsigned(ap_const_lv32_FFFFFFE8));
    lshr_ln947_fu_602_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln947_fu_598_p1(31-1 downto 0)))));
    lshr_ln958_fu_703_p2 <= std_logic_vector(shift_right(unsigned(zext_ln957_fu_691_p1),to_integer(unsigned('0' & zext_ln958_fu_699_p1(31-1 downto 0)))));
    m_2_fu_724_p3 <= 
        lshr_ln958_fu_703_p2 when (icmp_ln958_reg_898(0) = '1') else 
        shl_ln959_fu_718_p2;
    m_3_fu_734_p2 <= std_logic_vector(unsigned(m_2_fu_724_p3) + unsigned(zext_ln961_fu_731_p1));
    m_4_fu_740_p4 <= m_3_fu_734_p2(63 downto 1);
    man_V_1_fu_279_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(zext_ln569_fu_275_p1));
    man_V_2_fu_285_p3 <= 
        man_V_1_fu_279_p2 when (p_Result_8_reg_840(0) = '1') else 
        zext_ln569_fu_275_p1;
    or_ln571_1_fu_487_p2 <= (or_ln571_fu_458_p2 or and_ln581_fu_415_p2);
    or_ln571_fu_458_p2 <= (icmp_ln571_reg_855 or and_ln603_fu_445_p2);
    or_ln581_fu_433_p2 <= (or_ln582_fu_404_p2 or icmp_ln581_fu_298_p2);
    or_ln582_fu_404_p2 <= (icmp_ln582_fu_328_p2 or icmp_ln571_reg_855);
    or_ln949_1_fu_614_p2 <= (shl_ln949_fu_608_p2 or lshr_ln947_fu_602_p2);

    out_str_V_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, icmp_ln103_reg_825_pp0_iter2_reg, ap_enable_reg_pp0_iter4, icmp_ln103_reg_825_pp0_iter3_reg, out_str_V_TREADY_int_regslice)
    begin
        if ((((icmp_ln103_reg_825_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((icmp_ln103_reg_825_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            out_str_V_TDATA_blk_n <= out_str_V_TREADY_int_regslice;
        else 
            out_str_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_str_V_TDATA_int_regslice <= 
        select_ln571_3_fu_479_p3 when (or_ln571_1_fu_487_p2(0) = '1') else 
        select_ln571_2_fu_471_p3;
    out_str_V_TVALID <= regslice_both_out_str_V_U_vld_out;

    out_str_V_TVALID_int_regslice_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln103_reg_825_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln103_reg_825_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_str_V_TVALID_int_regslice <= ap_const_logic_1;
        else 
            out_str_V_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_4_fu_520_p3 <= in_str_V_TDATA_int_regslice(31 downto 31);
    
    p_Result_5_fu_542_p4_proc : process(tmp_V_4_fu_534_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_5_fu_542_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := tmp_V_4_fu_534_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_5_fu_542_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_5_fu_542_p4_i) := tmp_V_4_fu_534_p3(32-1-p_Result_5_fu_542_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_5_fu_542_p4 <= resvalue(32-1 downto 0);
    end process;

    p_Result_6_fu_646_p3 <= tmp_V_4_fu_534_p3(to_integer(unsigned(lsb_index_fu_566_p2)) downto to_integer(unsigned(lsb_index_fu_566_p2))) when (to_integer(unsigned(lsb_index_fu_566_p2))>= 0 and to_integer(unsigned(lsb_index_fu_566_p2))<=31) else "-";
    p_Result_7_fu_788_p5 <= (zext_ln962_fu_750_p1(63 downto 32) & tmp_2_fu_781_p3 & zext_ln962_fu_750_p1(22 downto 0));
    p_Result_9_fu_268_p3 <= (ap_const_lv1_1 & trunc_ln565_reg_850);
    p_Result_s_fu_754_p3 <= m_3_fu_734_p2(25 downto 25);
    select_ln571_1_fu_463_p3 <= 
        select_ln588_fu_379_p3 when (and_ln585_fu_427_p2(0) = '1') else 
        trunc_ln586_fu_364_p1;
    select_ln571_2_fu_471_p3 <= 
        trunc_ln583_fu_334_p1 when (and_ln582_fu_398_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln571_3_fu_479_p3 <= 
        select_ln571_fu_451_p3 when (or_ln571_fu_458_p2(0) = '1') else 
        select_ln571_1_fu_463_p3;
    select_ln571_fu_451_p3 <= 
        ap_const_lv32_0 when (icmp_ln571_reg_855(0) = '1') else 
        shl_ln604_fu_387_p2;
    select_ln588_fu_379_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_8_fu_371_p3(0) = '1') else 
        ap_const_lv32_0;
    select_ln943_fu_762_p3 <= 
        ap_const_lv8_7F when (p_Result_s_fu_754_p3(0) = '1') else 
        ap_const_lv8_7E;
    select_ln946_fu_660_p3 <= 
        icmp_ln949_fu_626_p2 when (icmp_ln946_fu_582_p2(0) = '1') else 
        p_Result_6_fu_646_p3;
    select_ln958_fu_674_p3 <= 
        select_ln946_fu_660_p3 when (icmp_ln958_fu_654_p2(0) = '1') else 
        and_ln949_1_fu_668_p2;
        sext_ln581_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_fu_316_p3),32));

    sh_amt_fu_316_p3 <= 
        add_ln581_fu_304_p2 when (icmp_ln581_fu_298_p2(0) = '1') else 
        sub_ln581_fu_310_p2;
    shl_ln604_fu_387_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_fu_334_p1),to_integer(unsigned('0' & sext_ln581_fu_324_p1(31-1 downto 0)))));
    shl_ln949_fu_608_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_1),to_integer(unsigned('0' & lsb_index_fu_566_p2(31-1 downto 0)))));
    shl_ln959_fu_718_p2 <= std_logic_vector(shift_left(unsigned(zext_ln957_fu_691_p1),to_integer(unsigned('0' & zext_ln959_fu_714_p1(31-1 downto 0)))));
    sub_ln581_fu_310_p2 <= std_logic_vector(unsigned(ap_const_lv12_18) - unsigned(F2_fu_292_p2));
    sub_ln944_fu_560_p2 <= std_logic_vector(unsigned(ap_const_lv32_20) - unsigned(l_fu_552_p3));
    sub_ln947_fu_592_p2 <= std_logic_vector(signed(ap_const_lv6_39) - signed(trunc_ln947_fu_588_p1));
    sub_ln959_fu_709_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_reg_892));
    sub_ln964_fu_770_p2 <= std_logic_vector(unsigned(ap_const_lv8_8) - unsigned(trunc_ln943_reg_908));
    tmp_2_fu_781_p3 <= (p_Result_4_reg_882 & add_ln964_fu_775_p2);
    tmp_3_fu_572_p4 <= lsb_index_fu_566_p2(31 downto 1);
    tmp_4_fu_632_p3 <= lsb_index_fu_566_p2(31 downto 31);
    tmp_7_fu_338_p4 <= sh_amt_fu_316_p3(11 downto 5);
    tmp_8_fu_371_p3 <= bitcast_ln702_fu_368_p1(31 downto 31);
    tmp_V_4_fu_534_p3 <= 
        tmp_V_fu_528_p2 when (p_Result_4_fu_520_p3(0) = '1') else 
        in_str_V_TDATA_int_regslice;
    tmp_V_fu_528_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(in_str_V_TDATA_int_regslice));
    tmp_nbreadreq_fu_134_p3 <= (0=>(in_str_V_TVALID_int_regslice), others=>'-');
    trunc_ln555_fu_233_p1 <= ireg_fu_229_p1(63 - 1 downto 0);
    trunc_ln565_fu_255_p1 <= ireg_fu_229_p1(52 - 1 downto 0);
    trunc_ln583_fu_334_p1 <= man_V_2_fu_285_p3(32 - 1 downto 0);
    trunc_ln586_fu_364_p1 <= ashr_ln586_fu_358_p2(32 - 1 downto 0);
    trunc_ln943_fu_682_p1 <= l_fu_552_p3(8 - 1 downto 0);
    trunc_ln947_fu_588_p1 <= sub_ln944_fu_560_p2(6 - 1 downto 0);
    xor_ln571_fu_393_p2 <= (icmp_ln571_reg_855 xor ap_const_lv1_1);
    xor_ln581_fu_439_p2 <= (or_ln581_fu_433_p2 xor ap_const_lv1_1);
    xor_ln582_fu_409_p2 <= (or_ln582_fu_404_p2 xor ap_const_lv1_1);
    xor_ln949_fu_640_p2 <= (tmp_4_fu_632_p3 xor ap_const_lv1_1);
    zext_ln103_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv11_reg_185),64));
    zext_ln455_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_reg_845),12));
    zext_ln569_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_9_fu_268_p3),54));
    zext_ln586_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_fu_324_p1),54));
    zext_ln93_fu_686_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv_reg_196),64));
    zext_ln947_fu_598_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_fu_592_p2),32));
    zext_ln957_fu_691_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_4_reg_887),64));
    zext_ln958_fu_699_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln958_fu_694_p2),64));
    zext_ln959_fu_714_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln959_fu_709_p2),64));
    zext_ln961_fu_731_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln958_reg_903),64));
    zext_ln962_fu_750_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_4_fu_740_p4),64));
end behav;
