// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ram_ram,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.477319,HLS_SYN_LAT=788,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=312,HLS_SYN_LUT=2118,HLS_VERSION=2020_2}" *)

module ram (
        ap_clk,
        ap_rst_n,
        in_str_V_TDATA,
        in_str_V_TVALID,
        in_str_V_TREADY,
        out_str_V_TDATA,
        out_str_V_TVALID,
        out_str_V_TREADY,
        enable,
        enable_ap_vld
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_state7 = 4'd4;
parameter    ap_ST_fsm_pp1_stage0 = 4'd8;

input   ap_clk;
input   ap_rst_n;
input  [31:0] in_str_V_TDATA;
input   in_str_V_TVALID;
output   in_str_V_TREADY;
output  [31:0] out_str_V_TDATA;
output   out_str_V_TVALID;
input   out_str_V_TREADY;
output   enable;
output   enable_ap_vld;

reg enable;
reg enable_ap_vld;

 reg    ap_rst_n_inv;
reg   [9:0] image_input_address0;
reg    image_input_ce0;
reg    image_input_we0;
wire   [31:0] image_input_d0;
wire   [31:0] image_input_q0;
reg    in_str_V_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage0;
wire   [0:0] icmp_ln93_fu_508_p2;
reg    out_str_V_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter3;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln103_reg_825;
reg   [0:0] icmp_ln103_reg_825_pp0_iter2_reg;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] icmp_ln103_reg_825_pp0_iter3_reg;
reg   [9:0] indvars_iv11_reg_185;
reg   [9:0] indvars_iv_reg_196;
wire   [0:0] tmp_nbreadreq_fu_134_p3;
wire    ap_CS_fsm_state1;
wire   [9:0] add_ln103_fu_212_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_state5_io;
reg    ap_block_state6_pp0_stage0_iter4;
reg    ap_block_state6_io;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln103_fu_218_p2;
reg   [0:0] icmp_ln103_reg_825_pp0_iter1_reg;
reg   [31:0] image_input_load_reg_834;
reg    ap_enable_reg_pp0_iter1;
reg   [31:0] image_input_load_reg_834_pp0_iter2_reg;
reg   [0:0] p_Result_8_reg_840;
reg   [10:0] exp_tmp_reg_845;
wire   [51:0] trunc_ln565_fu_255_p1;
reg   [51:0] trunc_ln565_reg_850;
wire   [0:0] icmp_ln571_fu_259_p2;
reg   [0:0] icmp_ln571_reg_855;
wire   [9:0] add_ln93_fu_502_p2;
reg   [9:0] add_ln93_reg_868;
reg    ap_block_state8_pp1_stage0_iter0;
wire    ap_block_state9_pp1_stage0_iter1;
reg    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln93_reg_873;
wire   [0:0] icmp_ln935_fu_514_p2;
reg   [0:0] icmp_ln935_reg_877;
wire   [0:0] p_Result_4_fu_520_p3;
reg   [0:0] p_Result_4_reg_882;
wire   [31:0] tmp_V_4_fu_534_p3;
reg   [31:0] tmp_V_4_reg_887;
wire   [31:0] sub_ln944_fu_560_p2;
reg   [31:0] sub_ln944_reg_892;
wire   [0:0] icmp_ln958_fu_654_p2;
reg   [0:0] icmp_ln958_reg_898;
wire   [0:0] select_ln958_fu_674_p3;
reg   [0:0] select_ln958_reg_903;
wire   [7:0] trunc_ln943_fu_682_p1;
reg   [7:0] trunc_ln943_reg_908;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state8;
reg    ap_enable_reg_pp1_iter1;
reg   [9:0] ap_phi_mux_indvars_iv_phi_fu_200_p4;
wire   [63:0] zext_ln103_fu_224_p1;
wire   [63:0] zext_ln93_fu_686_p1;
reg    ap_block_pp0_stage0_01001;
wire   [63:0] grp_fu_208_p1;
wire   [63:0] ireg_fu_229_p1;
wire   [62:0] trunc_ln555_fu_233_p1;
wire   [52:0] p_Result_9_fu_268_p3;
wire   [53:0] zext_ln569_fu_275_p1;
wire   [53:0] man_V_1_fu_279_p2;
wire   [11:0] zext_ln455_fu_265_p1;
wire   [11:0] F2_fu_292_p2;
wire   [0:0] icmp_ln581_fu_298_p2;
wire   [11:0] add_ln581_fu_304_p2;
wire   [11:0] sub_ln581_fu_310_p2;
wire  signed [11:0] sh_amt_fu_316_p3;
wire   [53:0] man_V_2_fu_285_p3;
wire   [6:0] tmp_7_fu_338_p4;
wire  signed [31:0] sext_ln581_fu_324_p1;
wire   [53:0] zext_ln586_fu_354_p1;
wire   [53:0] ashr_ln586_fu_358_p2;
wire   [31:0] bitcast_ln702_fu_368_p1;
wire   [0:0] tmp_8_fu_371_p3;
wire   [31:0] trunc_ln583_fu_334_p1;
wire   [0:0] icmp_ln582_fu_328_p2;
wire   [0:0] xor_ln571_fu_393_p2;
wire   [0:0] or_ln582_fu_404_p2;
wire   [0:0] xor_ln582_fu_409_p2;
wire   [0:0] and_ln581_fu_415_p2;
wire   [0:0] icmp_ln585_fu_421_p2;
wire   [0:0] or_ln581_fu_433_p2;
wire   [0:0] icmp_ln603_fu_348_p2;
wire   [0:0] xor_ln581_fu_439_p2;
wire   [31:0] shl_ln604_fu_387_p2;
wire   [0:0] and_ln603_fu_445_p2;
wire   [0:0] and_ln585_fu_427_p2;
wire   [31:0] select_ln588_fu_379_p3;
wire   [31:0] trunc_ln586_fu_364_p1;
wire   [0:0] and_ln582_fu_398_p2;
wire   [0:0] or_ln571_fu_458_p2;
wire   [31:0] select_ln571_fu_451_p3;
wire   [31:0] select_ln571_1_fu_463_p3;
wire   [0:0] or_ln571_1_fu_487_p2;
wire   [31:0] select_ln571_3_fu_479_p3;
wire   [31:0] select_ln571_2_fu_471_p3;
wire   [31:0] tmp_V_fu_528_p2;
reg   [31:0] p_Result_5_fu_542_p4;
reg   [31:0] l_fu_552_p3;
wire   [31:0] lsb_index_fu_566_p2;
wire   [30:0] tmp_3_fu_572_p4;
wire   [5:0] trunc_ln947_fu_588_p1;
wire   [5:0] sub_ln947_fu_592_p2;
wire   [31:0] zext_ln947_fu_598_p1;
wire   [31:0] lshr_ln947_fu_602_p2;
wire   [31:0] shl_ln949_fu_608_p2;
wire   [31:0] or_ln949_1_fu_614_p2;
wire   [31:0] and_ln949_fu_620_p2;
wire   [0:0] tmp_4_fu_632_p3;
wire   [0:0] icmp_ln946_fu_582_p2;
wire   [0:0] icmp_ln949_fu_626_p2;
wire   [0:0] p_Result_6_fu_646_p3;
wire   [0:0] xor_ln949_fu_640_p2;
wire   [0:0] select_ln946_fu_660_p3;
wire   [0:0] and_ln949_1_fu_668_p2;
wire   [31:0] add_ln958_fu_694_p2;
wire   [63:0] zext_ln957_fu_691_p1;
wire   [63:0] zext_ln958_fu_699_p1;
wire   [31:0] sub_ln959_fu_709_p2;
wire   [63:0] zext_ln959_fu_714_p1;
wire   [63:0] lshr_ln958_fu_703_p2;
wire   [63:0] shl_ln959_fu_718_p2;
wire   [63:0] m_2_fu_724_p3;
wire   [63:0] zext_ln961_fu_731_p1;
wire   [63:0] m_3_fu_734_p2;
wire   [62:0] m_4_fu_740_p4;
wire   [0:0] p_Result_s_fu_754_p3;
wire   [7:0] sub_ln964_fu_770_p2;
wire   [7:0] select_ln943_fu_762_p3;
wire   [7:0] add_ln964_fu_775_p2;
wire   [63:0] zext_ln962_fu_750_p1;
wire   [8:0] tmp_2_fu_781_p3;
wire   [63:0] p_Result_7_fu_788_p5;
wire   [31:0] LD_fu_800_p1;
wire   [31:0] bitcast_ln744_fu_804_p1;
reg    grp_fu_208_ce;
reg   [3:0] ap_NS_fsm;
wire    ap_CS_fsm_state7;
wire    regslice_both_out_str_V_U_apdone_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    regslice_both_in_str_V_U_apdone_blk;
wire   [31:0] in_str_V_TDATA_int_regslice;
wire    in_str_V_TVALID_int_regslice;
reg    in_str_V_TREADY_int_regslice;
wire    regslice_both_in_str_V_U_ack_in;
wire   [31:0] out_str_V_TDATA_int_regslice;
reg    out_str_V_TVALID_int_regslice;
wire    out_str_V_TREADY_int_regslice;
wire    regslice_both_out_str_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

ram_image_input #(
    .DataWidth( 32 ),
    .AddressRange( 784 ),
    .AddressWidth( 10 ))
image_input_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(image_input_address0),
    .ce0(image_input_ce0),
    .we0(image_input_we0),
    .d0(image_input_d0),
    .q0(image_input_q0)
);

ram_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(image_input_q0),
    .ce(grp_fu_208_ce),
    .dout(grp_fu_208_p1)
);

ram_regslice_both #(
    .DataWidth( 32 ))
regslice_both_in_str_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_str_V_TDATA),
    .vld_in(in_str_V_TVALID),
    .ack_in(regslice_both_in_str_V_U_ack_in),
    .data_out(in_str_V_TDATA_int_regslice),
    .vld_out(in_str_V_TVALID_int_regslice),
    .ack_out(in_str_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_str_V_U_apdone_blk)
);

ram_regslice_both #(
    .DataWidth( 32 ))
regslice_both_out_str_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_str_V_TDATA_int_regslice),
    .vld_in(out_str_V_TVALID_int_regslice),
    .ack_in(out_str_V_TREADY_int_regslice),
    .data_out(out_str_V_TDATA),
    .vld_out(regslice_both_out_str_V_U_vld_out),
    .ack_out(out_str_V_TREADY),
    .apdone_blk(regslice_both_out_str_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((tmp_nbreadreq_fu_134_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((tmp_nbreadreq_fu_134_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state8))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((tmp_nbreadreq_fu_134_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state8))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state8);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((tmp_nbreadreq_fu_134_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_nbreadreq_fu_134_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        indvars_iv11_reg_185 <= 10'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln103_fu_218_p2 == 1'd0))) begin
        indvars_iv11_reg_185 <= add_ln103_fu_212_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_nbreadreq_fu_134_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvars_iv_reg_196 <= 10'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln93_reg_873 == 1'd0))) begin
        indvars_iv_reg_196 <= add_ln93_reg_868;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        add_ln93_reg_868 <= add_ln93_fu_502_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln103_reg_825_pp0_iter1_reg == 1'd0))) begin
        exp_tmp_reg_845 <= {{ireg_fu_229_p1[62:52]}};
        icmp_ln571_reg_855 <= icmp_ln571_fu_259_p2;
        p_Result_8_reg_840 <= ireg_fu_229_p1[32'd63];
        trunc_ln565_reg_850 <= trunc_ln565_fu_255_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln103_reg_825 <= icmp_ln103_fu_218_p2;
        icmp_ln103_reg_825_pp0_iter1_reg <= icmp_ln103_reg_825;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln103_reg_825_pp0_iter2_reg <= icmp_ln103_reg_825_pp0_iter1_reg;
        icmp_ln103_reg_825_pp0_iter3_reg <= icmp_ln103_reg_825_pp0_iter2_reg;
        image_input_load_reg_834_pp0_iter2_reg <= image_input_load_reg_834;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln93_fu_508_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln935_reg_877 <= icmp_ln935_fu_514_p2;
        icmp_ln958_reg_898 <= icmp_ln958_fu_654_p2;
        p_Result_4_reg_882 <= in_str_V_TDATA_int_regslice[32'd31];
        select_ln958_reg_903 <= select_ln958_fu_674_p3;
        sub_ln944_reg_892 <= sub_ln944_fu_560_p2;
        tmp_V_4_reg_887 <= tmp_V_4_fu_534_p3;
        trunc_ln943_reg_908 <= trunc_ln943_fu_682_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln93_reg_873 <= icmp_ln93_fu_508_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln103_reg_825 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        image_input_load_reg_834 <= image_input_q0;
    end
end

always @ (*) begin
    if ((icmp_ln103_fu_218_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln93_fu_508_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln93_reg_873 == 1'd0))) begin
        ap_phi_mux_indvars_iv_phi_fu_200_p4 = add_ln93_reg_868;
    end else begin
        ap_phi_mux_indvars_iv_phi_fu_200_p4 = indvars_iv_reg_196;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if ((tmp_nbreadreq_fu_134_p3 == 1'd1)) begin
            enable = 1'd0;
        end else if ((tmp_nbreadreq_fu_134_p3 == 1'd0)) begin
            enable = 1'd1;
        end else begin
            enable = 'bx;
        end
    end else begin
        enable = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_nbreadreq_fu_134_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_nbreadreq_fu_134_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        enable_ap_vld = 1'b1;
    end else begin
        enable_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_208_ce = 1'b1;
    end else begin
        grp_fu_208_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        image_input_address0 = zext_ln93_fu_686_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        image_input_address0 = zext_ln103_fu_224_p1;
    end else begin
        image_input_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        image_input_ce0 = 1'b1;
    end else begin
        image_input_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln93_reg_873 == 1'd0))) begin
        image_input_we0 = 1'b1;
    end else begin
        image_input_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_fu_508_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        in_str_V_TDATA_blk_n = in_str_V_TVALID_int_regslice;
    end else begin
        in_str_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln93_fu_508_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        in_str_V_TREADY_int_regslice = 1'b1;
    end else begin
        in_str_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln103_reg_825_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((icmp_ln103_reg_825_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        out_str_V_TDATA_blk_n = out_str_V_TREADY_int_regslice;
    end else begin
        out_str_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln103_reg_825_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_str_V_TVALID_int_regslice = 1'b1;
    end else begin
        out_str_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((tmp_nbreadreq_fu_134_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln103_fu_218_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln103_fu_218_p2 == 1'd1)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((regslice_both_out_str_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((icmp_ln93_fu_508_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((icmp_ln93_fu_508_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign F2_fu_292_p2 = (12'd1075 - zext_ln455_fu_265_p1);

assign LD_fu_800_p1 = p_Result_7_fu_788_p5[31:0];

assign add_ln103_fu_212_p2 = (indvars_iv11_reg_185 + 10'd1);

assign add_ln581_fu_304_p2 = ($signed(F2_fu_292_p2) + $signed(12'd4072));

assign add_ln93_fu_502_p2 = (ap_phi_mux_indvars_iv_phi_fu_200_p4 + 10'd1);

assign add_ln958_fu_694_p2 = ($signed(sub_ln944_reg_892) + $signed(32'd4294967271));

assign add_ln964_fu_775_p2 = (sub_ln964_fu_770_p2 + select_ln943_fu_762_p3);

assign and_ln581_fu_415_p2 = (xor_ln582_fu_409_p2 & icmp_ln581_fu_298_p2);

assign and_ln582_fu_398_p2 = (xor_ln571_fu_393_p2 & icmp_ln582_fu_328_p2);

assign and_ln585_fu_427_p2 = (icmp_ln585_fu_421_p2 & and_ln581_fu_415_p2);

assign and_ln603_fu_445_p2 = (xor_ln581_fu_439_p2 & icmp_ln603_fu_348_p2);

assign and_ln949_1_fu_668_p2 = (xor_ln949_fu_640_p2 & p_Result_6_fu_646_p3);

assign and_ln949_fu_620_p2 = (tmp_V_4_fu_534_p3 & or_ln949_1_fu_614_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((out_str_V_TREADY_int_regslice == 1'b0) & (icmp_ln103_reg_825_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((out_str_V_TREADY_int_regslice == 1'b0) & (icmp_ln103_reg_825_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter4 == 1'b1) & ((1'b1 == ap_block_state6_io) | ((out_str_V_TREADY_int_regslice == 1'b0) & (icmp_ln103_reg_825_pp0_iter3_reg == 1'd0)))) | ((ap_enable_reg_pp0_iter3 == 1'b1) & ((1'b1 == ap_block_state5_io) | ((out_str_V_TREADY_int_regslice == 1'b0) & (icmp_ln103_reg_825_pp0_iter2_reg == 1'd0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter4 == 1'b1) & ((1'b1 == ap_block_state6_io) | ((out_str_V_TREADY_int_regslice == 1'b0) & (icmp_ln103_reg_825_pp0_iter3_reg == 1'd0)))) | ((ap_enable_reg_pp0_iter3 == 1'b1) & ((1'b1 == ap_block_state5_io) | ((out_str_V_TREADY_int_regslice == 1'b0) & (icmp_ln103_reg_825_pp0_iter2_reg == 1'd0)))));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((in_str_V_TVALID_int_regslice == 1'b0) & (icmp_ln93_fu_508_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((in_str_V_TVALID_int_regslice == 1'b0) & (icmp_ln93_fu_508_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((out_str_V_TREADY_int_regslice == 1'b0) & (icmp_ln103_reg_825_pp0_iter2_reg == 1'd0));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = ((out_str_V_TREADY_int_regslice == 1'b0) & (icmp_ln103_reg_825_pp0_iter2_reg == 1'd0));
end

always @ (*) begin
    ap_block_state6_io = ((out_str_V_TREADY_int_regslice == 1'b0) & (icmp_ln103_reg_825_pp0_iter3_reg == 1'd0));
end

always @ (*) begin
    ap_block_state6_pp0_stage0_iter4 = ((out_str_V_TREADY_int_regslice == 1'b0) & (icmp_ln103_reg_825_pp0_iter3_reg == 1'd0));
end

always @ (*) begin
    ap_block_state8_pp1_stage0_iter0 = ((in_str_V_TVALID_int_regslice == 1'b0) & (icmp_ln93_fu_508_p2 == 1'd0));
end

assign ap_block_state9_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ashr_ln586_fu_358_p2 = $signed(man_V_2_fu_285_p3) >>> zext_ln586_fu_354_p1;

assign bitcast_ln702_fu_368_p1 = image_input_load_reg_834_pp0_iter2_reg;

assign bitcast_ln744_fu_804_p1 = LD_fu_800_p1;

assign icmp_ln103_fu_218_p2 = ((indvars_iv11_reg_185 == 10'd784) ? 1'b1 : 1'b0);

assign icmp_ln571_fu_259_p2 = ((trunc_ln555_fu_233_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln581_fu_298_p2 = (($signed(F2_fu_292_p2) > $signed(12'd24)) ? 1'b1 : 1'b0);

assign icmp_ln582_fu_328_p2 = ((F2_fu_292_p2 == 12'd24) ? 1'b1 : 1'b0);

assign icmp_ln585_fu_421_p2 = ((sh_amt_fu_316_p3 > 12'd53) ? 1'b1 : 1'b0);

assign icmp_ln603_fu_348_p2 = ((tmp_7_fu_338_p4 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln935_fu_514_p2 = ((in_str_V_TDATA_int_regslice == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln93_fu_508_p2 = ((ap_phi_mux_indvars_iv_phi_fu_200_p4 == 10'd784) ? 1'b1 : 1'b0);

assign icmp_ln946_fu_582_p2 = (($signed(tmp_3_fu_572_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln949_fu_626_p2 = ((and_ln949_fu_620_p2 != 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln958_fu_654_p2 = (($signed(lsb_index_fu_566_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign image_input_d0 = ((icmp_ln935_reg_877[0:0] == 1'b1) ? 32'd0 : bitcast_ln744_fu_804_p1);

assign in_str_V_TREADY = regslice_both_in_str_V_U_ack_in;

assign ireg_fu_229_p1 = grp_fu_208_p1;


always @ (p_Result_5_fu_542_p4) begin
    if (p_Result_5_fu_542_p4[0] == 1'b1) begin
        l_fu_552_p3 = 32'd0;
    end else if (p_Result_5_fu_542_p4[1] == 1'b1) begin
        l_fu_552_p3 = 32'd1;
    end else if (p_Result_5_fu_542_p4[2] == 1'b1) begin
        l_fu_552_p3 = 32'd2;
    end else if (p_Result_5_fu_542_p4[3] == 1'b1) begin
        l_fu_552_p3 = 32'd3;
    end else if (p_Result_5_fu_542_p4[4] == 1'b1) begin
        l_fu_552_p3 = 32'd4;
    end else if (p_Result_5_fu_542_p4[5] == 1'b1) begin
        l_fu_552_p3 = 32'd5;
    end else if (p_Result_5_fu_542_p4[6] == 1'b1) begin
        l_fu_552_p3 = 32'd6;
    end else if (p_Result_5_fu_542_p4[7] == 1'b1) begin
        l_fu_552_p3 = 32'd7;
    end else if (p_Result_5_fu_542_p4[8] == 1'b1) begin
        l_fu_552_p3 = 32'd8;
    end else if (p_Result_5_fu_542_p4[9] == 1'b1) begin
        l_fu_552_p3 = 32'd9;
    end else if (p_Result_5_fu_542_p4[10] == 1'b1) begin
        l_fu_552_p3 = 32'd10;
    end else if (p_Result_5_fu_542_p4[11] == 1'b1) begin
        l_fu_552_p3 = 32'd11;
    end else if (p_Result_5_fu_542_p4[12] == 1'b1) begin
        l_fu_552_p3 = 32'd12;
    end else if (p_Result_5_fu_542_p4[13] == 1'b1) begin
        l_fu_552_p3 = 32'd13;
    end else if (p_Result_5_fu_542_p4[14] == 1'b1) begin
        l_fu_552_p3 = 32'd14;
    end else if (p_Result_5_fu_542_p4[15] == 1'b1) begin
        l_fu_552_p3 = 32'd15;
    end else if (p_Result_5_fu_542_p4[16] == 1'b1) begin
        l_fu_552_p3 = 32'd16;
    end else if (p_Result_5_fu_542_p4[17] == 1'b1) begin
        l_fu_552_p3 = 32'd17;
    end else if (p_Result_5_fu_542_p4[18] == 1'b1) begin
        l_fu_552_p3 = 32'd18;
    end else if (p_Result_5_fu_542_p4[19] == 1'b1) begin
        l_fu_552_p3 = 32'd19;
    end else if (p_Result_5_fu_542_p4[20] == 1'b1) begin
        l_fu_552_p3 = 32'd20;
    end else if (p_Result_5_fu_542_p4[21] == 1'b1) begin
        l_fu_552_p3 = 32'd21;
    end else if (p_Result_5_fu_542_p4[22] == 1'b1) begin
        l_fu_552_p3 = 32'd22;
    end else if (p_Result_5_fu_542_p4[23] == 1'b1) begin
        l_fu_552_p3 = 32'd23;
    end else if (p_Result_5_fu_542_p4[24] == 1'b1) begin
        l_fu_552_p3 = 32'd24;
    end else if (p_Result_5_fu_542_p4[25] == 1'b1) begin
        l_fu_552_p3 = 32'd25;
    end else if (p_Result_5_fu_542_p4[26] == 1'b1) begin
        l_fu_552_p3 = 32'd26;
    end else if (p_Result_5_fu_542_p4[27] == 1'b1) begin
        l_fu_552_p3 = 32'd27;
    end else if (p_Result_5_fu_542_p4[28] == 1'b1) begin
        l_fu_552_p3 = 32'd28;
    end else if (p_Result_5_fu_542_p4[29] == 1'b1) begin
        l_fu_552_p3 = 32'd29;
    end else if (p_Result_5_fu_542_p4[30] == 1'b1) begin
        l_fu_552_p3 = 32'd30;
    end else if (p_Result_5_fu_542_p4[31] == 1'b1) begin
        l_fu_552_p3 = 32'd31;
    end else begin
        l_fu_552_p3 = 32'd32;
    end
end

assign lsb_index_fu_566_p2 = ($signed(sub_ln944_fu_560_p2) + $signed(32'd4294967272));

assign lshr_ln947_fu_602_p2 = 32'd4294967295 >> zext_ln947_fu_598_p1;

assign lshr_ln958_fu_703_p2 = zext_ln957_fu_691_p1 >> zext_ln958_fu_699_p1;

assign m_2_fu_724_p3 = ((icmp_ln958_reg_898[0:0] == 1'b1) ? lshr_ln958_fu_703_p2 : shl_ln959_fu_718_p2);

assign m_3_fu_734_p2 = (m_2_fu_724_p3 + zext_ln961_fu_731_p1);

assign m_4_fu_740_p4 = {{m_3_fu_734_p2[63:1]}};

assign man_V_1_fu_279_p2 = (54'd0 - zext_ln569_fu_275_p1);

assign man_V_2_fu_285_p3 = ((p_Result_8_reg_840[0:0] == 1'b1) ? man_V_1_fu_279_p2 : zext_ln569_fu_275_p1);

assign or_ln571_1_fu_487_p2 = (or_ln571_fu_458_p2 | and_ln581_fu_415_p2);

assign or_ln571_fu_458_p2 = (icmp_ln571_reg_855 | and_ln603_fu_445_p2);

assign or_ln581_fu_433_p2 = (or_ln582_fu_404_p2 | icmp_ln581_fu_298_p2);

assign or_ln582_fu_404_p2 = (icmp_ln582_fu_328_p2 | icmp_ln571_reg_855);

assign or_ln949_1_fu_614_p2 = (shl_ln949_fu_608_p2 | lshr_ln947_fu_602_p2);

assign out_str_V_TDATA_int_regslice = ((or_ln571_1_fu_487_p2[0:0] == 1'b1) ? select_ln571_3_fu_479_p3 : select_ln571_2_fu_471_p3);

assign out_str_V_TVALID = regslice_both_out_str_V_U_vld_out;

assign p_Result_4_fu_520_p3 = in_str_V_TDATA_int_regslice[32'd31];

integer ap_tvar_int_0;

always @ (tmp_V_4_fu_534_p3) begin
    for (ap_tvar_int_0 = 32 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 31 - 0) begin
            p_Result_5_fu_542_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_5_fu_542_p4[ap_tvar_int_0] = tmp_V_4_fu_534_p3[31 - ap_tvar_int_0];
        end
    end
end

assign p_Result_6_fu_646_p3 = tmp_V_4_fu_534_p3[lsb_index_fu_566_p2];

assign p_Result_7_fu_788_p5 = {{zext_ln962_fu_750_p1[63:32]}, {tmp_2_fu_781_p3}, {zext_ln962_fu_750_p1[22:0]}};

assign p_Result_9_fu_268_p3 = {{1'd1}, {trunc_ln565_reg_850}};

assign p_Result_s_fu_754_p3 = m_3_fu_734_p2[32'd25];

assign select_ln571_1_fu_463_p3 = ((and_ln585_fu_427_p2[0:0] == 1'b1) ? select_ln588_fu_379_p3 : trunc_ln586_fu_364_p1);

assign select_ln571_2_fu_471_p3 = ((and_ln582_fu_398_p2[0:0] == 1'b1) ? trunc_ln583_fu_334_p1 : 32'd0);

assign select_ln571_3_fu_479_p3 = ((or_ln571_fu_458_p2[0:0] == 1'b1) ? select_ln571_fu_451_p3 : select_ln571_1_fu_463_p3);

assign select_ln571_fu_451_p3 = ((icmp_ln571_reg_855[0:0] == 1'b1) ? 32'd0 : shl_ln604_fu_387_p2);

assign select_ln588_fu_379_p3 = ((tmp_8_fu_371_p3[0:0] == 1'b1) ? 32'd4294967295 : 32'd0);

assign select_ln943_fu_762_p3 = ((p_Result_s_fu_754_p3[0:0] == 1'b1) ? 8'd127 : 8'd126);

assign select_ln946_fu_660_p3 = ((icmp_ln946_fu_582_p2[0:0] == 1'b1) ? icmp_ln949_fu_626_p2 : p_Result_6_fu_646_p3);

assign select_ln958_fu_674_p3 = ((icmp_ln958_fu_654_p2[0:0] == 1'b1) ? select_ln946_fu_660_p3 : and_ln949_1_fu_668_p2);

assign sext_ln581_fu_324_p1 = sh_amt_fu_316_p3;

assign sh_amt_fu_316_p3 = ((icmp_ln581_fu_298_p2[0:0] == 1'b1) ? add_ln581_fu_304_p2 : sub_ln581_fu_310_p2);

assign shl_ln604_fu_387_p2 = trunc_ln583_fu_334_p1 << sext_ln581_fu_324_p1;

assign shl_ln949_fu_608_p2 = 32'd1 << lsb_index_fu_566_p2;

assign shl_ln959_fu_718_p2 = zext_ln957_fu_691_p1 << zext_ln959_fu_714_p1;

assign sub_ln581_fu_310_p2 = (12'd24 - F2_fu_292_p2);

assign sub_ln944_fu_560_p2 = (32'd32 - l_fu_552_p3);

assign sub_ln947_fu_592_p2 = ($signed(6'd57) - $signed(trunc_ln947_fu_588_p1));

assign sub_ln959_fu_709_p2 = (32'd25 - sub_ln944_reg_892);

assign sub_ln964_fu_770_p2 = (8'd8 - trunc_ln943_reg_908);

assign tmp_2_fu_781_p3 = {{p_Result_4_reg_882}, {add_ln964_fu_775_p2}};

assign tmp_3_fu_572_p4 = {{lsb_index_fu_566_p2[31:1]}};

assign tmp_4_fu_632_p3 = lsb_index_fu_566_p2[32'd31];

assign tmp_7_fu_338_p4 = {{sh_amt_fu_316_p3[11:5]}};

assign tmp_8_fu_371_p3 = bitcast_ln702_fu_368_p1[32'd31];

assign tmp_V_4_fu_534_p3 = ((p_Result_4_fu_520_p3[0:0] == 1'b1) ? tmp_V_fu_528_p2 : in_str_V_TDATA_int_regslice);

assign tmp_V_fu_528_p2 = (32'd0 - in_str_V_TDATA_int_regslice);

assign tmp_nbreadreq_fu_134_p3 = in_str_V_TVALID_int_regslice;

assign trunc_ln555_fu_233_p1 = ireg_fu_229_p1[62:0];

assign trunc_ln565_fu_255_p1 = ireg_fu_229_p1[51:0];

assign trunc_ln583_fu_334_p1 = man_V_2_fu_285_p3[31:0];

assign trunc_ln586_fu_364_p1 = ashr_ln586_fu_358_p2[31:0];

assign trunc_ln943_fu_682_p1 = l_fu_552_p3[7:0];

assign trunc_ln947_fu_588_p1 = sub_ln944_fu_560_p2[5:0];

assign xor_ln571_fu_393_p2 = (icmp_ln571_reg_855 ^ 1'd1);

assign xor_ln581_fu_439_p2 = (or_ln581_fu_433_p2 ^ 1'd1);

assign xor_ln582_fu_409_p2 = (or_ln582_fu_404_p2 ^ 1'd1);

assign xor_ln949_fu_640_p2 = (tmp_4_fu_632_p3 ^ 1'd1);

assign zext_ln103_fu_224_p1 = indvars_iv11_reg_185;

assign zext_ln455_fu_265_p1 = exp_tmp_reg_845;

assign zext_ln569_fu_275_p1 = p_Result_9_fu_268_p3;

assign zext_ln586_fu_354_p1 = $unsigned(sext_ln581_fu_324_p1);

assign zext_ln93_fu_686_p1 = indvars_iv_reg_196;

assign zext_ln947_fu_598_p1 = sub_ln947_fu_592_p2;

assign zext_ln957_fu_691_p1 = tmp_V_4_reg_887;

assign zext_ln958_fu_699_p1 = add_ln958_fu_694_p2;

assign zext_ln959_fu_714_p1 = sub_ln959_fu_709_p2;

assign zext_ln961_fu_731_p1 = select_ln958_reg_903;

assign zext_ln962_fu_750_p1 = m_4_fu_740_p4;

endmodule //ram
