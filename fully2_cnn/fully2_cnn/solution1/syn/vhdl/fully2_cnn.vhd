-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fully2_cnn is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_V_TVALID : IN STD_LOGIC;
    in_V_TREADY : OUT STD_LOGIC;
    out_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_V_TVALID : OUT STD_LOGIC;
    out_V_TREADY : IN STD_LOGIC );
end;


architecture behav of fully2_cnn is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fully2_cnn_fully2_cnn,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.334000,HLS_SYN_LAT=39,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=298,HLS_SYN_LUT=686,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv59_0 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_583E42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000010110000011111001000010";
    constant ap_const_lv32_85AEE6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100001011010111011100110";
    constant ap_const_lv31_583E42 : STD_LOGIC_VECTOR (30 downto 0) := "0000000010110000011111001000010";
    constant ap_const_lv31_85AEE6 : STD_LOGIC_VECTOR (30 downto 0) := "0000000100001011010111011100110";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal fc_layer2_weights_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal fc_layer2_weights_V_ce0 : STD_LOGIC;
    signal fc_layer2_weights_V_q0 : STD_LOGIC_VECTOR (24 downto 0);
    signal in_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal out_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal icmp_ln30_reg_553 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal icmp_ln30_reg_553_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_183 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_228 : STD_LOGIC_VECTOR (1 downto 0);
    signal output_V_addr_reg_459 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln19_fu_239_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal sext_ln19_reg_465 : STD_LOGIC_VECTOR (55 downto 0);
    signal add_ln19_fu_243_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln19_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_475 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_cast_fu_255_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_479 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal output_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal output_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_286_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_reg_508 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln22_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1116_fu_313_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal sext_ln1116_reg_523 : STD_LOGIC_VECTOR (55 downto 0);
    signal trunc_ln708_1_reg_528 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_3_fu_351_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal lhs_3_reg_533 : STD_LOGIC_VECTOR (55 downto 0);
    signal add_ln22_fu_359_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal add_ln30_fu_389_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state10_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_io : BOOLEAN;
    signal ap_block_state12_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state12_io : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln30_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln703_fu_406_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln703_reg_562 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state10 : STD_LOGIC;
    signal output_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_V_ce0 : STD_LOGIC;
    signal output_V_we0 : STD_LOGIC;
    signal output_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_V_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_V_ce1 : STD_LOGIC;
    signal output_V_we1 : STD_LOGIC;
    signal j_reg_194 : STD_LOGIC_VECTOR (3 downto 0);
    signal lhs_2_reg_206 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_reg_217 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln1116_fu_294_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_304_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_cast_fu_401_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0_01001 : BOOLEAN;
    signal sext_ln19_fu_239_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_1_fu_264_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_1_fu_264_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal or_ln1116_fu_299_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal lhs_1_fu_327_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal r_V_3_fu_321_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal ret_V_fu_335_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal r_V_5_fu_369_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_5_fu_369_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal ret_V_1_fu_374_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal select_ln703_fu_410_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln703_1_fu_424_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln703_1_fu_417_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal a_V_fu_428_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1494_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln32_fu_434_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln34_fu_446_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal regslice_both_out_V_U_apdone_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal regslice_both_in_V_U_apdone_blk : STD_LOGIC;
    signal in_V_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal in_V_TVALID_int_regslice : STD_LOGIC;
    signal in_V_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_in_V_U_ack_in : STD_LOGIC;
    signal out_V_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal out_V_TVALID_int_regslice : STD_LOGIC;
    signal out_V_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_out_V_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fully2_cnn_mul_25s_32s_56_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (24 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (55 downto 0) );
    end component;


    component fully2_cnn_fc_layer2_weights_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component fully2_cnn_output_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fully2_cnn_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    fc_layer2_weights_V_U : component fully2_cnn_fc_layer2_weights_V
    generic map (
        DataWidth => 25,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => fc_layer2_weights_V_address0,
        ce0 => fc_layer2_weights_V_ce0,
        q0 => fc_layer2_weights_V_q0);

    output_V_U : component fully2_cnn_output_V
    generic map (
        DataWidth => 32,
        AddressRange => 200,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => output_V_address0,
        ce0 => output_V_ce0,
        we0 => output_V_we0,
        d0 => output_V_d0,
        q0 => output_V_q0,
        address1 => output_V_address1,
        ce1 => output_V_ce1,
        we1 => output_V_we1,
        d1 => lhs_2_reg_206,
        q1 => output_V_q1);

    mul_25s_32s_56_1_1_U1 : component fully2_cnn_mul_25s_32s_56_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 25,
        din1_WIDTH => 32,
        dout_WIDTH => 56)
    port map (
        din0 => fc_layer2_weights_V_q0,
        din1 => r_V_1_fu_264_p1,
        dout => r_V_1_fu_264_p2);

    mul_25s_32s_56_1_1_U2 : component fully2_cnn_mul_25s_32s_56_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 25,
        din1_WIDTH => 32,
        dout_WIDTH => 56)
    port map (
        din0 => fc_layer2_weights_V_q0,
        din1 => in_V_TDATA_int_regslice,
        dout => r_V_3_fu_321_p2);

    mul_25s_32s_56_1_1_U3 : component fully2_cnn_mul_25s_32s_56_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 25,
        din1_WIDTH => 32,
        dout_WIDTH => 56)
    port map (
        din0 => fc_layer2_weights_V_q0,
        din1 => r_V_5_fu_369_p1,
        dout => r_V_5_fu_369_p2);

    regslice_both_in_V_U : component fully2_cnn_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_V_TDATA,
        vld_in => in_V_TVALID,
        ack_in => regslice_both_in_V_U_ack_in,
        data_out => in_V_TDATA_int_regslice,
        vld_out => in_V_TVALID_int_regslice,
        ack_out => in_V_TREADY_int_regslice,
        apdone_blk => regslice_both_in_V_U_apdone_blk);

    regslice_both_out_V_U : component fully2_cnn_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_V_TDATA_int_regslice,
        vld_in => out_V_TVALID_int_regslice,
        ack_in => out_V_TREADY_int_regslice,
        data_out => out_V_TDATA,
        vld_out => regslice_both_out_V_U_vld_out,
        ack_out => out_V_TREADY,
        apdone_blk => regslice_both_out_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((in_V_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((in_V_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state10))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state10)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state10);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_1_reg_228 <= ap_const_lv2_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln30_fu_395_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
                i_1_reg_228 <= add_ln30_fu_389_p2;
            end if; 
        end if;
    end process;

    i_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((in_V_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_183 <= ap_const_lv2_0;
            elsif (((icmp_ln19_fu_249_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_183 <= add_ln19_fu_243_p2;
            end if; 
        end if;
    end process;

    j_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j_reg_194 <= ap_const_lv4_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                j_reg_194 <= add_ln22_fu_359_p2;
            end if; 
        end if;
    end process;

    lhs_2_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                lhs_2_reg_206 <= output_V_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                lhs_2_reg_206 <= ret_V_1_fu_374_p2(55 downto 24);
            end if; 
        end if;
    end process;

    lhs_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                lhs_reg_217 <= output_V_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                lhs_reg_217 <= trunc_ln708_1_reg_528;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_fu_249_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    i_cast_reg_479(1 downto 0) <= i_cast_fu_255_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln19_reg_475 <= icmp_ln19_fu_249_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln30_reg_553 <= icmp_ln30_fu_395_p2;
                icmp_ln30_reg_553_pp2_iter1_reg <= icmp_ln30_reg_553;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                    lhs_3_reg_533(55 downto 24) <= lhs_3_fu_351_p3(55 downto 24);
                sext_ln1116_reg_523 <= sext_ln1116_fu_313_p1;
                trunc_ln708_1_reg_528 <= ret_V_fu_335_p2(55 downto 24);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                sext_ln19_reg_465 <= sext_ln19_fu_239_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln22_fu_280_p2 = ap_const_lv1_0))) then
                    tmp_reg_508(4 downto 1) <= tmp_fu_286_p3(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln30_fu_395_p2 = ap_const_lv1_0))) then
                trunc_ln703_reg_562 <= trunc_ln703_fu_406_p1;
            end if;
        end if;
    end process;
    i_cast_reg_479(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";
    tmp_reg_508(0) <= '0';
    lhs_3_reg_533(23 downto 0) <= "000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state7, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_enable_reg_pp0_iter0, icmp_ln19_fu_249_p2, ap_CS_fsm_state6, icmp_ln22_fu_280_p2, ap_enable_reg_pp2_iter0, icmp_ln30_fu_395_p2, ap_block_pp0_stage0_subdone, ap_block_pp2_stage0_subdone, ap_CS_fsm_state13, regslice_both_out_V_U_apdone_blk, in_V_TVALID_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((in_V_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln19_fu_249_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln19_fu_249_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln22_fu_280_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state7 => 
                if (((in_V_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln30_fu_395_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln30_fu_395_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                if (((regslice_both_out_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    a_V_fu_428_p2 <= std_logic_vector(unsigned(output_V_q1) + unsigned(select_ln703_fu_410_p3));
    add_ln19_fu_243_p2 <= std_logic_vector(unsigned(i_reg_183) + unsigned(ap_const_lv2_1));
    add_ln22_fu_359_p2 <= std_logic_vector(unsigned(j_reg_194) + unsigned(ap_const_lv4_1));
    add_ln30_fu_389_p2 <= std_logic_vector(unsigned(i_1_reg_228) + unsigned(ap_const_lv2_1));
    add_ln32_fu_434_p2 <= std_logic_vector(unsigned(trunc_ln703_1_fu_424_p1) + unsigned(select_ln703_1_fu_417_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(9);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_01001_assign_proc : process(ap_enable_reg_pp2_iter1, icmp_ln30_reg_553, ap_enable_reg_pp2_iter2, icmp_ln30_reg_553_pp2_iter1_reg, out_V_TREADY_int_regslice)
    begin
                ap_block_pp2_stage0_01001 <= (((icmp_ln30_reg_553_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (out_V_TREADY_int_regslice = ap_const_logic_0)) or ((icmp_ln30_reg_553 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (out_V_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_pp2_stage0_11001_assign_proc : process(ap_enable_reg_pp2_iter1, icmp_ln30_reg_553, ap_enable_reg_pp2_iter2, icmp_ln30_reg_553_pp2_iter1_reg, ap_block_state11_io, ap_block_state12_io, out_V_TREADY_int_regslice)
    begin
                ap_block_pp2_stage0_11001 <= (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state12_io) or ((icmp_ln30_reg_553_pp2_iter1_reg = ap_const_lv1_0) and (out_V_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state11_io) or ((icmp_ln30_reg_553 = ap_const_lv1_0) and (out_V_TREADY_int_regslice = ap_const_logic_0)))));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(ap_enable_reg_pp2_iter1, icmp_ln30_reg_553, ap_enable_reg_pp2_iter2, icmp_ln30_reg_553_pp2_iter1_reg, ap_block_state11_io, ap_block_state12_io, out_V_TREADY_int_regslice)
    begin
                ap_block_pp2_stage0_subdone <= (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state12_io) or ((icmp_ln30_reg_553_pp2_iter1_reg = ap_const_lv1_0) and (out_V_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state11_io) or ((icmp_ln30_reg_553 = ap_const_lv1_0) and (out_V_TREADY_int_regslice = ap_const_logic_0)))));
    end process;

        ap_block_state10_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_io_assign_proc : process(icmp_ln30_reg_553, out_V_TREADY_int_regslice)
    begin
                ap_block_state11_io <= ((icmp_ln30_reg_553 = ap_const_lv1_0) and (out_V_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state11_pp2_stage0_iter1_assign_proc : process(icmp_ln30_reg_553, out_V_TREADY_int_regslice)
    begin
                ap_block_state11_pp2_stage0_iter1 <= ((icmp_ln30_reg_553 = ap_const_lv1_0) and (out_V_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state12_io_assign_proc : process(icmp_ln30_reg_553_pp2_iter1_reg, out_V_TREADY_int_regslice)
    begin
                ap_block_state12_io <= ((icmp_ln30_reg_553_pp2_iter1_reg = ap_const_lv1_0) and (out_V_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state12_pp2_stage0_iter2_assign_proc : process(icmp_ln30_reg_553_pp2_iter1_reg, out_V_TREADY_int_regslice)
    begin
                ap_block_state12_pp2_stage0_iter2 <= ((icmp_ln30_reg_553_pp2_iter1_reg = ap_const_lv1_0) and (out_V_TREADY_int_regslice = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln19_fu_249_p2)
    begin
        if ((icmp_ln19_fu_249_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state10_assign_proc : process(icmp_ln30_fu_395_p2)
    begin
        if ((icmp_ln30_fu_395_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state10 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state10 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    fc_layer2_weights_V_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, i_cast_fu_255_p1, ap_CS_fsm_state6, ap_block_pp0_stage0, zext_ln1116_fu_294_p1, tmp_1_fu_304_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            fc_layer2_weights_V_address0 <= tmp_1_fu_304_p3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            fc_layer2_weights_V_address0 <= zext_ln1116_fu_294_p1(5 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fc_layer2_weights_V_address0 <= i_cast_fu_255_p1(5 - 1 downto 0);
        else 
            fc_layer2_weights_V_address0 <= "XXXXX";
        end if; 
    end process;


    fc_layer2_weights_V_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_CS_fsm_state6, in_V_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((in_V_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            fc_layer2_weights_V_ce0 <= ap_const_logic_1;
        else 
            fc_layer2_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_1_cast_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_228),64));
    i_cast_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_183),64));
    icmp_ln1494_fu_440_p2 <= "1" when (signed(a_V_fu_428_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln19_fu_249_p2 <= "1" when (i_reg_183 = ap_const_lv2_2) else "0";
    icmp_ln22_fu_280_p2 <= "1" when (j_reg_194 = ap_const_lv4_A) else "0";
    icmp_ln30_fu_395_p2 <= "1" when (i_1_reg_228 = ap_const_lv2_2) else "0";

    in_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state7, in_V_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_V_TDATA_blk_n <= in_V_TVALID_int_regslice;
        else 
            in_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_V_TREADY <= regslice_both_in_V_U_ack_in;

    in_V_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state7, in_V_TVALID_int_regslice)
    begin
        if ((((in_V_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((in_V_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            in_V_TREADY_int_regslice <= ap_const_logic_1;
        else 
            in_V_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    lhs_1_fu_327_p3 <= (lhs_reg_217 & ap_const_lv24_0);
    lhs_3_fu_351_p3 <= (lhs_2_reg_206 & ap_const_lv24_0);
    or_ln1116_fu_299_p2 <= (tmp_reg_508 or ap_const_lv5_1);

    out_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, icmp_ln30_reg_553, ap_enable_reg_pp2_iter2, icmp_ln30_reg_553_pp2_iter1_reg, out_V_TREADY_int_regslice)
    begin
        if ((((icmp_ln30_reg_553_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0)) or ((icmp_ln30_reg_553 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            out_V_TDATA_blk_n <= out_V_TREADY_int_regslice;
        else 
            out_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_V_TDATA_int_regslice <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln34_fu_446_p3),32));
    out_V_TVALID <= regslice_both_out_V_U_vld_out;

    out_V_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, icmp_ln30_reg_553, ap_block_pp2_stage0_11001)
    begin
        if (((icmp_ln30_reg_553 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            out_V_TVALID_int_regslice <= ap_const_logic_1;
        else 
            out_V_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    output_V_addr_reg_459 <= ap_const_lv64_0(8 - 1 downto 0);

    output_V_address0_assign_proc : process(ap_CS_fsm_state1, output_V_addr_reg_459, ap_CS_fsm_pp0_stage0, i_cast_reg_479, ap_CS_fsm_state4, ap_enable_reg_pp0_iter1, ap_CS_fsm_state9, ap_block_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_V_address0 <= output_V_addr_reg_459;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_V_address0 <= ap_const_lv64_1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            output_V_address0 <= i_cast_reg_479(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            output_V_address0 <= ap_const_lv64_0(8 - 1 downto 0);
        else 
            output_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    output_V_address1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0, ap_CS_fsm_state4, ap_enable_reg_pp2_iter0, ap_CS_fsm_state9, i_1_cast_fu_401_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            output_V_address1 <= i_1_cast_fu_401_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_V_address1 <= ap_const_lv64_1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_V_address1 <= ap_const_lv64_0(8 - 1 downto 0);
        else 
            output_V_address1 <= "XXXXXXXX";
        end if; 
    end process;


    output_V_ce0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state4, ap_enable_reg_pp0_iter1, ap_CS_fsm_state9, in_V_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((in_V_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_V_ce1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_CS_fsm_state4, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)))) then 
            output_V_ce1 <= ap_const_logic_1;
        else 
            output_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_V_d0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state9, lhs_reg_217, ap_block_pp0_stage0, r_V_1_fu_264_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_V_d0 <= lhs_reg_217;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            output_V_d0 <= r_V_1_fu_264_p2(55 downto 24);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            output_V_d0 <= ap_const_lv32_0;
        else 
            output_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_V_we0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln19_reg_475, ap_enable_reg_pp0_iter1, ap_CS_fsm_state9, in_V_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((in_V_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln19_reg_475 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_V_we1_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_V_we1 <= ap_const_logic_1;
        else 
            output_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    r_V_1_fu_264_p1 <= sext_ln19_reg_465(32 - 1 downto 0);
    r_V_5_fu_369_p1 <= sext_ln1116_reg_523(32 - 1 downto 0);
    ret_V_1_fu_374_p2 <= std_logic_vector(unsigned(lhs_3_reg_533) + unsigned(r_V_5_fu_369_p2));
    ret_V_fu_335_p2 <= std_logic_vector(unsigned(lhs_1_fu_327_p3) + unsigned(r_V_3_fu_321_p2));
    select_ln34_fu_446_p3 <= 
        add_ln32_fu_434_p2 when (icmp_ln1494_fu_440_p2(0) = '1') else 
        ap_const_lv31_0;
    select_ln703_1_fu_417_p3 <= 
        ap_const_lv31_583E42 when (trunc_ln703_reg_562(0) = '1') else 
        ap_const_lv31_85AEE6;
    select_ln703_fu_410_p3 <= 
        ap_const_lv32_583E42 when (trunc_ln703_reg_562(0) = '1') else 
        ap_const_lv32_85AEE6;
        sext_ln1116_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(in_V_TDATA_int_regslice),56));

    sext_ln19_fu_239_p0 <= in_V_TDATA_int_regslice;
        sext_ln19_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln19_fu_239_p0),56));

    tmp_1_fu_304_p3 <= (ap_const_lv59_0 & or_ln1116_fu_299_p2);
    tmp_fu_286_p3 <= (j_reg_194 & ap_const_lv1_0);
    trunc_ln703_1_fu_424_p1 <= output_V_q1(31 - 1 downto 0);
    trunc_ln703_fu_406_p1 <= i_1_reg_228(1 - 1 downto 0);
    zext_ln1116_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_286_p3),64));
end behav;
