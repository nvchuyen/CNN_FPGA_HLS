-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity input_cnn_image_input_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 10; 
             MEM_SIZE    : integer := 784
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of input_cnn_image_input_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 to 177=> "00000000000000000000000000000000", 
    178 => "00111111000101011001010110010110", 
    179 to 180=> "00111111011111101111111011111111", 
    181 => "00111111100000000000000000000000", 
    182 => "00111111011111101111111011111111", 
    183 => "00111111001111011011110110111110", 
    184 => "00111111000011101000111010001111", 
    185 => "00111110011101001111010011110101", 
    186 to 205=> "00000000000000000000000000000000", 
    206 => "00111111000101011001010110010110", 
    207 => "00111111011011011110110111101110", 
    208 => "00111110110010101100101011001011", 
    209 => "00111111001101111011011110111000", 
    210 => "00111111011011011110110111101110", 
    211 to 212=> "00111111011111101111111011111111", 
    213 => "00111111011111001111110011111101", 
    214 => "00111111010111011101110111011110", 
    215 => "00111110111100001111000011110001", 
    216 => "00111100111000001110000011100001", 
    217 to 233=> "00000000000000000000000000000000", 
    234 => "00111110011100001111000011110001", 
    235 => "00111111010000001100000011000001", 
    236 => "00111101111010001110100011101001", 
    237 => "00000000000000000000000000000000", 
    238 => "00111101111010001110100011101001", 
    239 => "00111110111110001111100011111001", 
    240 to 243=> "00111111011111101111111011111111", 
    244 => "00111110011001001110010011100101", 
    245 to 262=> "00000000000000000000000000000000", 
    263 => "00111100000000001000000010000001", 
    264 => "00000000000000000000000000000000", 
    265 => "00111110100100101001001010010011", 
    266 => "00111111000111111001111110100000", 
    267 => "00111111011110111111101111111100", 
    268 => "00111111011111101111111011111111", 
    269 => "00111111011110111111101111111100", 
    270 => "00111111010001001100010011000101", 
    271 => "00111110101111101011111010111111", 
    272 => "00111011100000001000000010000001", 
    273 to 290=> "00000000000000000000000000000000", 
    291 => "00111101001100001011000010110001", 
    292 => "00111110111101101111011011110111", 
    293 => "00111111011111001111110011111101", 
    294 => "00111111011111101111111011111111", 
    295 => "00111111011011011110110111101110", 
    296 => "00111111000011001000110010001101", 
    297 => "00111110011000001110000011100001", 
    298 to 318=> "00000000000000000000000000000000", 
    319 => "00111111001110001011100010111001", 
    320 to 321=> "00111111011111101111111011111111", 
    322 => "00111111001100101011001010110011", 
    323 => "00111101101110001011100010111001", 
    324 to 346=> "00000000000000000000000000000000", 
    347 => "00111111010100111101001111010100", 
    348 => "00111111011111101111111011111111", 
    349 => "00111111001010111010101110101100", 
    350 => "00111100000000001000000010000001", 
    351 to 374=> "00000000000000000000000000000000", 
    375 => "00111110111101101111011011110111", 
    376 => "00111111011110001111100011111001", 
    377 => "00111111011101101111011011110111", 
    378 => "00111111000000001000000010000001", 
    379 => "00111100111000001110000011100001", 
    380 to 403=> "00000000000000000000000000000000", 
    404 => "00111110101010101010101010101011", 
    405 => "00111111011110011111100111111010", 
    406 => "00111111011111101111111011111111", 
    407 => "00111111001011011010110110101110", 
    408 => "00111100110000001100000011000001", 
    409 to 432=> "00000000000000000000000000000000", 
    433 => "00111110101011001010110010101101", 
    434 => "00111111011000101110001011100011", 
    435 => "00111111011111101111111011111111", 
    436 => "00111111000001111000011110001000", 
    437 => "00111101001000001010000010100001", 
    438 to 461=> "00000000000000000000000000000000", 
    462 => "00111110000000001000000010000001", 
    463 => "00111111011110011111100111111010", 
    464 => "00111111011111101111111011111111", 
    465 => "00111110010100001101000011010001", 
    466 to 490=> "00000000000000000000000000000000", 
    491 => "00111111001011011010110110101110", 
    492 => "00111111011111101111111011111111", 
    493 => "00111110010100001101000011010001", 
    494 to 517=> "00000000000000000000000000000000", 
    518 => "00111100010000001100000011000001", 
    519 => "00111111001110101011101010111011", 
    520 => "00111111011111101111111011111111", 
    521 => "00111110010100001101000011010001", 
    522 to 545=> "00000000000000000000000000000000", 
    546 => "00111101100110001001100010011001", 
    547 => "00111111011111101111111011111111", 
    548 => "00111111011010111110101111101100", 
    549 => "00111101111110001111100011111001", 
    550 to 573=> "00000000000000000000000000000000", 
    574 => "00111111001011101010111010101111", 
    575 => "00111111011111101111111011111111", 
    576 => "00111111001101111011011110111000", 
    577 to 600=> "00000000000000000000000000000000", 
    601 => "00111110110111001101110011011101", 
    602 => "00111111011110011111100111111010", 
    603 => "00111111011111101111111011111111", 
    604 => "00111101111000001110000011100001", 
    605 to 623=> "00000000000000000000000000000000", 
    624 => "00111100101000001010000010100001", 
    625 => "00111100000000001000000010000001", 
    626 => "00000000000000000000000000000000", 
    627 => "00111011100000001000000010000001", 
    628 => "00111110110100001101000011010001", 
    629 => "00111111011110111111101111111100", 
    630 => "00111111011111011111110111111110", 
    631 => "00111111000110101001101010011011", 
    632 => "00111100101000001010000010100001", 
    633 to 650=> "00000000000000000000000000000000", 
    651 => "00111110000110001001100010011001", 
    652 => "00111111011100001111000011110001", 
    653 => "00111110100100001001000010010001", 
    654 => "00111110001000001010000010100001", 
    655 => "00111110111011001110110011101101", 
    656 => "00111111011111101111111011111111", 
    657 => "00111111011100011111000111110010", 
    658 => "00111111000010111000101110001100", 
    659 to 678=> "00000000000000000000000000000000", 
    679 => "00111101111010001110100011101001", 
    680 => "00111111011010101110101011101011", 
    681 => "00111111011010011110100111101010", 
    682 => "00111111011100101111001011110011", 
    683 => "00111111011111101111111011111111", 
    684 => "00111111011100111111001111110100", 
    685 => "00111111000011101000111010001111", 
    686 to 707=> "00000000000000000000000000000000", 
    708 => "00111111000011111000111110010000", 
    709 to 710=> "00111111011111101111111011111111", 
    711 => "00111111010100101101001011010011", 
    712 => "00111110100011101000111010001111", 
    713 to 783=> "00000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity input_cnn_image_input is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 784;
        AddressWidth : INTEGER := 10);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of input_cnn_image_input is
    component input_cnn_image_input_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    input_cnn_image_input_rom_U :  component input_cnn_image_input_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


