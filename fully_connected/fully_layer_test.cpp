
#include <stdio.h>
#include <stdlib.h>
#include "headers1/defines.h"
#include "headers1/input.h"
//#include "headers1/output.h"
//#include "C:\Xilinx\Vivado\2020.2\data\ip\xilinx\v_axi4s_remap_v1_0\src\hls_video.h"
#include <hls_stream.h>
#include "ap_fixed.h"

float24_t output_fully [10] = {-27.096348,-25.197163,-23.451391,18.642515,-29.841694,
		 	 	 	 	 	    19.296204,-15.590225,-21.530806,1.5289572,-0.9872546};
//typedef float float24_t;

#define eps 0.1
void fully_layer( hls::stream<float24_t> &in_stream, hls::stream<float24_t> &out_stream );
float24_t image[4][4][32]=
	{{{0.0,0.0,0.0,0.7821629,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
	   0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
	   0.0,0.0,0.0,0.0,0.0,0.0},
	  {0.8070439,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
	   0.0,0.0,0.0,0.7943852,0.0,0.0,0.0,0.0,2.1032712,0.0,0.0,
	   0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
	  {1.6912414,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.6625899,
	   0.0,0.0,0.0,1.2992958,0.0,0.0,0.0,0.0,0.0,6.3268204,0.0,
	   0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
	  {2.0600982,0.0,0.0,0.0,0.5780189,0.0,0.0,0.0,0.0,0.0,0.0,
	   0.0,0.0,0.0,1.2126435,0.0,0.0,0.0,0.0,1.7548473,0.0,0.0,
	   0.0,0.0,0.47265643,0.0,0.0,0.0,0.0,0.0,0.0,0.0}},

	 {{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
	   0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
	   0.0,0.0,0.0,0.0},
	  {0.0,0.0,0.0,0.0,0.0,1.6489718,0.0,0.0,0.0,0.0,0.0,0.0,
	   0.0,0.0,0.0,0.0,1.1699009,0.0,2.7954829,0.0,0.0,0.0,0.0,
	   0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.11442512,0.0},
	  {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
	   2.4821653,0.0,0.0,0.0,0.0,0.0,0.93576515,0.0,0.0,
	   1.9172008,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
	  {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
	   0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,3.292277,0.0,0.0,
	   0.0,0.0,0.0,0.0,0.0,0.0}},

	 {{0.0,0.20522863,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
	   0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
	   0.0,0.0,0.0,0.0,0.0,0.0},
	  {0.0,4.603656,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
	   0.0,0.0,0.0,6.553823,4.4428673,0.0,0.0,0.0,0.0,0.0,0.0,
	   0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
	  {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
	   0.64429617,0.0,6.2972517,0.0,0.0,0.0,5.767952,0.0,0.0,
	   0.0,0.0,0.8062671,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
	  {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
	   0.05350828,0.0,0.0,0.0,0.0,2.144994,0.0,0.0,0.0,
	   1.1712248,1.7022734,0.0,1.548046,0.0,0.0,0.0,0.0,0.0}},

	 {{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.15063477,0.0,0.0,0.0,
	   0.0,0.0,1.2620618,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
	   1.0321834,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
	  {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
	   0.30969477,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
	   0.0,0.33956492,0.0,0.0,0.0,0.0,0.0},
	  {0.0,0.0,0.0,0.0,0.0,2.046446,0.0,0.0,0.0,0.0,0.0,0.0,
	   0.0,0.0,0.0,0.0,0.0,0.0,0.0,4.153136,0.0,0.0,0.0,0.0,
	   0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
	  {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
	   0.0,0.0,0.0,0.0,0.0,1.8820939,0.0,0.0,0.0,0.0,0.0,0.0,
	   1.1493245,1.9925451,0.0,0.0,0.0,0.0}}};
int main()
{
	hls::stream <float24_t> in_stream ("test_in_stream");
	hls::stream <float24_t> out_stream ("test_out_stream");

	float24_t output_test[10];

	int i, j, k;
	int m, n, p;
	int correct_values = 0;
	int error_values =0;

	float test_in =0;

	for(i = 0; i < 4; i++)
	{
		for(j = 0; j< 4; j++)
			for(k = 0; k< 32; k++)
			{
				in_stream << image[i][j][k];
				test_in = image[i][j][k];
		//		printf("%d %0.06f\n", i, image[i]);
			}
	}

	fully_layer	(in_stream, out_stream);

	for(m = 0; m<10; m++)
		{
		out_stream >> output_test[m];
		printf("%d    %0.06f\n", m, output_test[m]);
		}

	printf("\n \n");
	for(m = 0; m<10; m++)
	{
		if((output_test[m] - output_fully[m]) > 0.002 || (output_fully[m] - output_test[m]) > 0.002)
		{
			printf(" output_fully[%d] - output_test[%d]  = %f -  %f \n", m, m, output_fully[m], output_test[m]);
			error_values++;
		}
		else
		{
			correct_values++;
		}
	}

	printf("DONE: %d are values error,  %d are correct\n\n", error_values, correct_values);
	return 0;
}









