// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fully2_cnn_fully2_cnn,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.334000,HLS_SYN_LAT=39,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=298,HLS_SYN_LUT=686,HLS_VERSION=2020_2}" *)

module fully2_cnn (
        ap_clk,
        ap_rst_n,
        in_V_TDATA,
        in_V_TVALID,
        in_V_TREADY,
        out_V_TDATA,
        out_V_TVALID,
        out_V_TREADY
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_pp0_stage0 = 10'd2;
parameter    ap_ST_fsm_state4 = 10'd4;
parameter    ap_ST_fsm_state5 = 10'd8;
parameter    ap_ST_fsm_state6 = 10'd16;
parameter    ap_ST_fsm_state7 = 10'd32;
parameter    ap_ST_fsm_state8 = 10'd64;
parameter    ap_ST_fsm_state9 = 10'd128;
parameter    ap_ST_fsm_pp2_stage0 = 10'd256;
parameter    ap_ST_fsm_state13 = 10'd512;

input   ap_clk;
input   ap_rst_n;
input  [31:0] in_V_TDATA;
input   in_V_TVALID;
output   in_V_TREADY;
output  [31:0] out_V_TDATA;
output   out_V_TVALID;
input   out_V_TREADY;

 reg    ap_rst_n_inv;
reg   [4:0] fc_layer2_weights_V_address0;
reg    fc_layer2_weights_V_ce0;
wire  signed [24:0] fc_layer2_weights_V_q0;
reg    in_V_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state7;
reg    out_V_TDATA_blk_n;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] icmp_ln30_reg_553;
reg    ap_enable_reg_pp2_iter2;
reg   [0:0] icmp_ln30_reg_553_pp2_iter1_reg;
reg   [1:0] i_reg_183;
reg   [1:0] i_1_reg_228;
wire   [7:0] output_V_addr_reg_459;
wire  signed [55:0] sext_ln19_fu_239_p1;
reg  signed [55:0] sext_ln19_reg_465;
wire   [1:0] add_ln19_fu_243_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln19_fu_249_p2;
reg   [0:0] icmp_ln19_reg_475;
wire   [63:0] i_cast_fu_255_p1;
reg   [63:0] i_cast_reg_479;
wire    ap_CS_fsm_state4;
wire   [31:0] output_V_q1;
wire    ap_CS_fsm_state5;
wire   [31:0] output_V_q0;
wire   [4:0] tmp_fu_286_p3;
reg   [4:0] tmp_reg_508;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln22_fu_280_p2;
wire  signed [55:0] sext_ln1116_fu_313_p1;
reg  signed [55:0] sext_ln1116_reg_523;
reg   [31:0] trunc_ln708_1_reg_528;
wire   [55:0] lhs_3_fu_351_p3;
reg   [55:0] lhs_3_reg_533;
wire   [3:0] add_ln22_fu_359_p2;
wire    ap_CS_fsm_state8;
wire   [1:0] add_ln30_fu_389_p2;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state10_pp2_stage0_iter0;
reg    ap_block_state11_pp2_stage0_iter1;
reg    ap_block_state11_io;
reg    ap_block_state12_pp2_stage0_iter2;
reg    ap_block_state12_io;
reg    ap_block_pp2_stage0_11001;
wire   [0:0] icmp_ln30_fu_395_p2;
wire   [0:0] trunc_ln703_fu_406_p1;
reg   [0:0] trunc_ln703_reg_562;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_CS_fsm_state9;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state10;
reg   [7:0] output_V_address0;
reg    output_V_ce0;
reg    output_V_we0;
reg   [31:0] output_V_d0;
reg   [7:0] output_V_address1;
reg    output_V_ce1;
reg    output_V_we1;
reg   [3:0] j_reg_194;
reg   [31:0] lhs_2_reg_206;
reg   [31:0] lhs_reg_217;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln1116_fu_294_p1;
wire   [63:0] tmp_1_fu_304_p3;
wire   [63:0] i_1_cast_fu_401_p1;
reg    ap_block_pp2_stage0_01001;
wire  signed [31:0] sext_ln19_fu_239_p0;
wire  signed [31:0] r_V_1_fu_264_p1;
wire   [55:0] r_V_1_fu_264_p2;
wire   [4:0] or_ln1116_fu_299_p2;
wire   [55:0] lhs_1_fu_327_p3;
wire   [55:0] r_V_3_fu_321_p2;
wire   [55:0] ret_V_fu_335_p2;
wire  signed [31:0] r_V_5_fu_369_p1;
wire   [55:0] r_V_5_fu_369_p2;
wire   [55:0] ret_V_1_fu_374_p2;
wire   [31:0] select_ln703_fu_410_p3;
wire   [30:0] trunc_ln703_1_fu_424_p1;
wire   [30:0] select_ln703_1_fu_417_p3;
wire   [31:0] a_V_fu_428_p2;
wire   [0:0] icmp_ln1494_fu_440_p2;
wire   [30:0] add_ln32_fu_434_p2;
wire   [30:0] select_ln34_fu_446_p3;
reg   [9:0] ap_NS_fsm;
wire    ap_CS_fsm_state13;
wire    regslice_both_out_V_U_apdone_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
wire    regslice_both_in_V_U_apdone_blk;
wire  signed [31:0] in_V_TDATA_int_regslice;
wire    in_V_TVALID_int_regslice;
reg    in_V_TREADY_int_regslice;
wire    regslice_both_in_V_U_ack_in;
wire   [31:0] out_V_TDATA_int_regslice;
reg    out_V_TVALID_int_regslice;
wire    out_V_TREADY_int_regslice;
wire    regslice_both_out_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

fully2_cnn_fc_layer2_weights_V #(
    .DataWidth( 25 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
fc_layer2_weights_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(fc_layer2_weights_V_address0),
    .ce0(fc_layer2_weights_V_ce0),
    .q0(fc_layer2_weights_V_q0)
);

fully2_cnn_output_V #(
    .DataWidth( 32 ),
    .AddressRange( 200 ),
    .AddressWidth( 8 ))
output_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_V_address0),
    .ce0(output_V_ce0),
    .we0(output_V_we0),
    .d0(output_V_d0),
    .q0(output_V_q0),
    .address1(output_V_address1),
    .ce1(output_V_ce1),
    .we1(output_V_we1),
    .d1(lhs_2_reg_206),
    .q1(output_V_q1)
);

fully2_cnn_mul_25s_32s_56_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 56 ))
mul_25s_32s_56_1_1_U1(
    .din0(fc_layer2_weights_V_q0),
    .din1(r_V_1_fu_264_p1),
    .dout(r_V_1_fu_264_p2)
);

fully2_cnn_mul_25s_32s_56_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 56 ))
mul_25s_32s_56_1_1_U2(
    .din0(fc_layer2_weights_V_q0),
    .din1(in_V_TDATA_int_regslice),
    .dout(r_V_3_fu_321_p2)
);

fully2_cnn_mul_25s_32s_56_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 56 ))
mul_25s_32s_56_1_1_U3(
    .din0(fc_layer2_weights_V_q0),
    .din1(r_V_5_fu_369_p1),
    .dout(r_V_5_fu_369_p2)
);

fully2_cnn_regslice_both #(
    .DataWidth( 32 ))
regslice_both_in_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_V_TDATA),
    .vld_in(in_V_TVALID),
    .ack_in(regslice_both_in_V_U_ack_in),
    .data_out(in_V_TDATA_int_regslice),
    .vld_out(in_V_TVALID_int_regslice),
    .ack_out(in_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_V_U_apdone_blk)
);

fully2_cnn_regslice_both #(
    .DataWidth( 32 ))
regslice_both_out_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_V_TDATA_int_regslice),
    .vld_in(out_V_TVALID_int_regslice),
    .ack_in(out_V_TREADY_int_regslice),
    .data_out(out_V_TDATA),
    .vld_out(regslice_both_out_V_U_vld_out),
    .ack_out(out_V_TREADY),
    .apdone_blk(regslice_both_out_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((in_V_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((in_V_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_condition_pp2_exit_iter0_state10))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state10)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state10);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_1_reg_228 <= 2'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln30_fu_395_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        i_1_reg_228 <= add_ln30_fu_389_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((in_V_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_183 <= 2'd0;
    end else if (((icmp_ln19_fu_249_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_183 <= add_ln19_fu_243_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_reg_194 <= 4'd1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        j_reg_194 <= add_ln22_fu_359_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        lhs_2_reg_206 <= output_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        lhs_2_reg_206 <= {{ret_V_1_fu_374_p2[55:24]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        lhs_reg_217 <= output_V_q1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        lhs_reg_217 <= trunc_ln708_1_reg_528;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_249_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_cast_reg_479[1 : 0] <= i_cast_fu_255_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln19_reg_475 <= icmp_ln19_fu_249_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln30_reg_553 <= icmp_ln30_fu_395_p2;
        icmp_ln30_reg_553_pp2_iter1_reg <= icmp_ln30_reg_553;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        lhs_3_reg_533[55 : 24] <= lhs_3_fu_351_p3[55 : 24];
        sext_ln1116_reg_523 <= sext_ln1116_fu_313_p1;
        trunc_ln708_1_reg_528 <= {{ret_V_fu_335_p2[55:24]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        sext_ln19_reg_465 <= sext_ln19_fu_239_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln22_fu_280_p2 == 1'd0))) begin
        tmp_reg_508[4 : 1] <= tmp_fu_286_p3[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln30_fu_395_p2 == 1'd0))) begin
        trunc_ln703_reg_562 <= trunc_ln703_fu_406_p1;
    end
end

always @ (*) begin
    if ((icmp_ln19_fu_249_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln30_fu_395_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state10 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state10 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        fc_layer2_weights_V_address0 = tmp_1_fu_304_p3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        fc_layer2_weights_V_address0 = zext_ln1116_fu_294_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fc_layer2_weights_V_address0 = i_cast_fu_255_p1;
    end else begin
        fc_layer2_weights_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((in_V_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state7)))) begin
        fc_layer2_weights_V_ce0 = 1'b1;
    end else begin
        fc_layer2_weights_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state1))) begin
        in_V_TDATA_blk_n = in_V_TVALID_int_regslice;
    end else begin
        in_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((in_V_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((in_V_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_V_TREADY_int_regslice = 1'b1;
    end else begin
        in_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_553_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0)) | ((icmp_ln30_reg_553 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        out_V_TDATA_blk_n = out_V_TREADY_int_regslice;
    end else begin
        out_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln30_reg_553 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        out_V_TVALID_int_regslice = 1'b1;
    end else begin
        out_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        output_V_address0 = output_V_addr_reg_459;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        output_V_address0 = 64'd1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        output_V_address0 = i_cast_reg_479;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        output_V_address0 = 64'd0;
    end else begin
        output_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        output_V_address1 = i_1_cast_fu_401_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        output_V_address1 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        output_V_address1 = 64'd0;
    end else begin
        output_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((in_V_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4) | ((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1)))) begin
        output_V_ce1 = 1'b1;
    end else begin
        output_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        output_V_d0 = lhs_reg_217;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        output_V_d0 = {{r_V_1_fu_264_p2[55:24]}};
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        output_V_d0 = 32'd0;
    end else begin
        output_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((in_V_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln19_reg_475 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        output_V_we1 = 1'b1;
    end else begin
        output_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((in_V_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln19_fu_249_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln19_fu_249_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln22_fu_280_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((in_V_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln30_fu_395_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)) & ~((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln30_fu_395_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((regslice_both_out_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_V_fu_428_p2 = (output_V_q1 + select_ln703_fu_410_p3);

assign add_ln19_fu_243_p2 = (i_reg_183 + 2'd1);

assign add_ln22_fu_359_p2 = (j_reg_194 + 4'd1);

assign add_ln30_fu_389_p2 = (i_1_reg_228 + 2'd1);

assign add_ln32_fu_434_p2 = (trunc_ln703_1_fu_424_p1 + select_ln703_1_fu_417_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_01001 = (((icmp_ln30_reg_553_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (out_V_TREADY_int_regslice == 1'b0)) | ((icmp_ln30_reg_553 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (out_V_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp2_stage0_11001 = (((ap_enable_reg_pp2_iter2 == 1'b1) & ((1'b1 == ap_block_state12_io) | ((icmp_ln30_reg_553_pp2_iter1_reg == 1'd0) & (out_V_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp2_iter1 == 1'b1) & ((1'b1 == ap_block_state11_io) | ((icmp_ln30_reg_553 == 1'd0) & (out_V_TREADY_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = (((ap_enable_reg_pp2_iter2 == 1'b1) & ((1'b1 == ap_block_state12_io) | ((icmp_ln30_reg_553_pp2_iter1_reg == 1'd0) & (out_V_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp2_iter1 == 1'b1) & ((1'b1 == ap_block_state11_io) | ((icmp_ln30_reg_553 == 1'd0) & (out_V_TREADY_int_regslice == 1'b0)))));
end

assign ap_block_state10_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_io = ((icmp_ln30_reg_553 == 1'd0) & (out_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state11_pp2_stage0_iter1 = ((icmp_ln30_reg_553 == 1'd0) & (out_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state12_io = ((icmp_ln30_reg_553_pp2_iter1_reg == 1'd0) & (out_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state12_pp2_stage0_iter2 = ((icmp_ln30_reg_553_pp2_iter1_reg == 1'd0) & (out_V_TREADY_int_regslice == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign i_1_cast_fu_401_p1 = i_1_reg_228;

assign i_cast_fu_255_p1 = i_reg_183;

assign icmp_ln1494_fu_440_p2 = (($signed(a_V_fu_428_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_249_p2 = ((i_reg_183 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_280_p2 = ((j_reg_194 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_395_p2 = ((i_1_reg_228 == 2'd2) ? 1'b1 : 1'b0);

assign in_V_TREADY = regslice_both_in_V_U_ack_in;

assign lhs_1_fu_327_p3 = {{lhs_reg_217}, {24'd0}};

assign lhs_3_fu_351_p3 = {{lhs_2_reg_206}, {24'd0}};

assign or_ln1116_fu_299_p2 = (tmp_reg_508 | 5'd1);

assign out_V_TDATA_int_regslice = select_ln34_fu_446_p3;

assign out_V_TVALID = regslice_both_out_V_U_vld_out;

assign output_V_addr_reg_459 = 64'd0;

assign r_V_1_fu_264_p1 = sext_ln19_reg_465;

assign r_V_5_fu_369_p1 = sext_ln1116_reg_523;

assign ret_V_1_fu_374_p2 = (lhs_3_reg_533 + r_V_5_fu_369_p2);

assign ret_V_fu_335_p2 = (lhs_1_fu_327_p3 + r_V_3_fu_321_p2);

assign select_ln34_fu_446_p3 = ((icmp_ln1494_fu_440_p2[0:0] == 1'b1) ? add_ln32_fu_434_p2 : 31'd0);

assign select_ln703_1_fu_417_p3 = ((trunc_ln703_reg_562[0:0] == 1'b1) ? 31'd5783106 : 31'd8761062);

assign select_ln703_fu_410_p3 = ((trunc_ln703_reg_562[0:0] == 1'b1) ? 32'd5783106 : 32'd8761062);

assign sext_ln1116_fu_313_p1 = in_V_TDATA_int_regslice;

assign sext_ln19_fu_239_p0 = in_V_TDATA_int_regslice;

assign sext_ln19_fu_239_p1 = sext_ln19_fu_239_p0;

assign tmp_1_fu_304_p3 = {{59'd0}, {or_ln1116_fu_299_p2}};

assign tmp_fu_286_p3 = {{j_reg_194}, {1'd0}};

assign trunc_ln703_1_fu_424_p1 = output_V_q1[30:0];

assign trunc_ln703_fu_406_p1 = i_1_reg_228[0:0];

assign zext_ln1116_fu_294_p1 = tmp_fu_286_p3;

always @ (posedge ap_clk) begin
    i_cast_reg_479[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    tmp_reg_508[0] <= 1'b0;
    lhs_3_reg_533[23:0] <= 24'b000000000000000000000000;
end

endmodule //fully2_cnn
