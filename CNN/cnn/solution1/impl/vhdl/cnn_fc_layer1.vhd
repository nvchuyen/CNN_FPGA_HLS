-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cnn_fc_layer1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    pool1_out5_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    pool1_out5_empty_n : IN STD_LOGIC;
    pool1_out5_read : OUT STD_LOGIC;
    out_stream_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_stream_V_TVALID : OUT STD_LOGIC;
    out_stream_V_TREADY : IN STD_LOGIC;
    grp_fu_5480_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5480_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5480_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_5480_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5480_p_ce : OUT STD_LOGIC;
    grp_fu_5484_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5484_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5484_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_5484_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5484_p_ce : OUT STD_LOGIC;
    grp_fu_5500_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5500_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5500_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5500_p_ce : OUT STD_LOGIC;
    grp_fu_5504_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5504_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5504_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5504_p_ce : OUT STD_LOGIC );
end;


architecture behav of cnn_fc_layer1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (51 downto 0) := "0000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (51 downto 0) := "0000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (51 downto 0) := "0000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (51 downto 0) := "0000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (51 downto 0) := "0000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (51 downto 0) := "0000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (51 downto 0) := "0001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (51 downto 0) := "0010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (51 downto 0) := "0100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (51 downto 0) := "1000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_C4 : STD_LOGIC_VECTOR (7 downto 0) := "11000100";
    constant ap_const_lv9_C4 : STD_LOGIC_VECTOR (8 downto 0) := "011000100";
    constant ap_const_lv10_188 : STD_LOGIC_VECTOR (9 downto 0) := "0110001000";
    constant ap_const_lv10_24C : STD_LOGIC_VECTOR (9 downto 0) := "1001001100";
    constant ap_const_lv9_110 : STD_LOGIC_VECTOR (8 downto 0) := "100010000";
    constant ap_const_lv11_3D4 : STD_LOGIC_VECTOR (10 downto 0) := "01111010100";
    constant ap_const_lv11_498 : STD_LOGIC_VECTOR (10 downto 0) := "10010011000";
    constant ap_const_lv11_55C : STD_LOGIC_VECTOR (10 downto 0) := "10101011100";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal fc_layer1_weights_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal fc_layer1_weights_0_ce0 : STD_LOGIC;
    signal fc_layer1_weights_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_1_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal fc_layer1_weights_1_ce0 : STD_LOGIC;
    signal fc_layer1_weights_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_2_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal fc_layer1_weights_2_ce0 : STD_LOGIC;
    signal fc_layer1_weights_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_3_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal fc_layer1_weights_3_ce0 : STD_LOGIC;
    signal fc_layer1_weights_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_4_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal fc_layer1_weights_4_ce0 : STD_LOGIC;
    signal fc_layer1_weights_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_5_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal fc_layer1_weights_5_ce0 : STD_LOGIC;
    signal fc_layer1_weights_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_6_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal fc_layer1_weights_6_ce0 : STD_LOGIC;
    signal fc_layer1_weights_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_7_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal fc_layer1_weights_7_ce0 : STD_LOGIC;
    signal fc_layer1_weights_7_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_8_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal fc_layer1_weights_8_ce0 : STD_LOGIC;
    signal fc_layer1_weights_8_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_9_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal fc_layer1_weights_9_ce0 : STD_LOGIC;
    signal fc_layer1_weights_9_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_bias_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal fc_layer1_bias_ce0 : STD_LOGIC;
    signal fc_layer1_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool1_out5_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal out_stream_V_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp3_iter3 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal icmp_ln33_reg_2348 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_2348_pp3_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_reg_979 : STD_LOGIC_VECTOR (3 downto 0);
    signal reg_1017 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1022 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_block_state51_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state52_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state53_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_state54_pp3_stage0_iter3 : BOOLEAN;
    signal ap_block_state54_io : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal reg_1028 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1033 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1039 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1044 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1049 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1054 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1059 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1064 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1069 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1074 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1002_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1079 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal grp_fu_1007_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1084 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1089 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1094 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1099 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1103 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1108 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1113 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal reg_1118 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_990_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1123 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal icmp_ln33_reg_2348_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_994_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1129 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1134 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1139 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1144 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1149 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1154 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1159 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1164 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1169 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_22_fu_1174_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln19_fu_1191_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln22_fu_1208_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln22_reg_1565 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln22_fu_1214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln22_3_fu_1234_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln22_3_reg_1623 : STD_LOGIC_VECTOR (8 downto 0);
    signal bitcast_ln145_fu_1238_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln145_reg_1628 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln22_1_fu_1264_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln22_1_reg_1684 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln22_2_fu_1268_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln22_2_reg_1691 : STD_LOGIC_VECTOR (9 downto 0);
    signal fc_layer1_weights_4_load_1_reg_1696 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_5_load_1_reg_1701 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_6_load_1_reg_1706 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_7_load_1_reg_1711 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_8_load_1_reg_1716 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_9_load_1_reg_1721 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_load_5_reg_1776 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_load_6_reg_1781 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool1_out5_read_2_reg_1786 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_0_load_2_reg_1791 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_1_load_2_reg_1796 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_4_load_2_reg_1801 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_5_load_2_reg_1806 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_6_load_2_reg_1811 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_7_load_2_reg_1816 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_8_load_2_reg_1821 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_9_load_2_reg_1826 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool1_out5_read_3_reg_1881 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_0_load_3_reg_1886 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_1_load_3_reg_1891 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_2_load_3_reg_1896 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_3_load_3_reg_1901 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_6_load_3_reg_1906 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_7_load_3_reg_1911 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_8_load_3_reg_1916 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_9_load_3_reg_1921 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool1_out5_read_4_reg_1976 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_0_load_4_reg_1981 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_1_load_4_reg_1986 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_2_load_4_reg_1991 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_3_load_4_reg_1996 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_4_load_4_reg_2001 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_5_load_4_reg_2006 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_8_load_4_reg_2011 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_9_load_4_reg_2016 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln145_1_fu_1353_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln145_1_reg_2071 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_0_load_5_reg_2077 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_1_load_5_reg_2082 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_2_load_5_reg_2087 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_3_load_5_reg_2092 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_4_load_5_reg_2097 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_5_load_5_reg_2102 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_6_load_5_reg_2107 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_7_load_5_reg_2112 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool1_out5_read_6_reg_2167 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_2_load_6_reg_2172 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_3_load_6_reg_2177 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_4_load_6_reg_2182 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_5_load_6_reg_2187 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_6_load_6_reg_2192 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_7_load_6_reg_2197 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_8_load_6_reg_2202 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_9_load_6_reg_2207 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool1_out5_read_7_reg_2262 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_0_load_7_reg_2267 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_1_load_7_reg_2272 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_4_load_7_reg_2277 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_5_load_7_reg_2282 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_6_load_7_reg_2287 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_7_load_7_reg_2292 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_8_load_7_reg_2297 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_layer1_weights_9_load_7_reg_2302 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln145_2_fu_1397_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln145_2_reg_2307 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln145_3_fu_1402_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln145_3_reg_2313 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln145_4_fu_1407_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln145_4_reg_2319 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln145_5_fu_1412_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln145_5_reg_2325 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln145_6_fu_1418_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln145_6_reg_2331 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln145_7_fu_1423_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln145_7_reg_2337 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln33_fu_1428_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal icmp_ln33_fu_1434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state51 : STD_LOGIC;
    signal output_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal output_ce0 : STD_LOGIC;
    signal output_we0 : STD_LOGIC;
    signal output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal output_ce1 : STD_LOGIC;
    signal output_we1 : STD_LOGIC;
    signal empty_reg_945 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond201_fu_1180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv17_reg_956 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln19_fu_1197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal indvars_iv14_reg_967 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal p_cast_fu_1186_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvars_iv17_cast_fu_1203_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln22_fu_1220_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_fu_1250_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_1_fu_1278_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_2_fu_1297_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_3_fu_1320_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_4_fu_1339_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_5_fu_1364_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_6_fu_1383_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvars_iv_cast_fu_1440_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp3_stage0_01001 : BOOLEAN;
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal grp_fu_990_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_990_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_994_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_994_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1002_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1002_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1007_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1007_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_26_fu_1244_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_27_fu_1272_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_28_fu_1292_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_29_fu_1311_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln29_fu_1316_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_30_fu_1334_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_31_fu_1359_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_32_fu_1378_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal bitcast_ln34_fu_1446_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_1450_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_fu_1460_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln34_1_fu_1470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_fu_1464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_fu_1476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_1012_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_fu_1482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_990_ce : STD_LOGIC;
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal grp_fu_994_ce : STD_LOGIC;
    signal grp_fu_1002_ce : STD_LOGIC;
    signal grp_fu_1007_ce : STD_LOGIC;
    signal ap_block_pp3_stage0_00001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (51 downto 0);
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component cnn_fadd_32ns_32ns_32_2_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fmul_32ns_32ns_32_2_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fcmp_32ns_32ns_1_1_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component cnn_fc_layer1_fc_layer1_weights_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fc_layer1_fc_layer1_weights_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fc_layer1_fc_layer1_weights_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fc_layer1_fc_layer1_weights_3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fc_layer1_fc_layer1_weights_4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fc_layer1_fc_layer1_weights_5 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fc_layer1_fc_layer1_weights_6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fc_layer1_fc_layer1_weights_7 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fc_layer1_fc_layer1_weights_8 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fc_layer1_fc_layer1_weights_9 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fc_layer1_fc_layer1_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fc_layer1_output IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    fc_layer1_weights_0_U : component cnn_fc_layer1_fc_layer1_weights_0
    generic map (
        DataWidth => 32,
        AddressRange => 1568,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc_layer1_weights_0_address0,
        ce0 => fc_layer1_weights_0_ce0,
        q0 => fc_layer1_weights_0_q0);

    fc_layer1_weights_1_U : component cnn_fc_layer1_fc_layer1_weights_1
    generic map (
        DataWidth => 32,
        AddressRange => 1568,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc_layer1_weights_1_address0,
        ce0 => fc_layer1_weights_1_ce0,
        q0 => fc_layer1_weights_1_q0);

    fc_layer1_weights_2_U : component cnn_fc_layer1_fc_layer1_weights_2
    generic map (
        DataWidth => 32,
        AddressRange => 1568,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc_layer1_weights_2_address0,
        ce0 => fc_layer1_weights_2_ce0,
        q0 => fc_layer1_weights_2_q0);

    fc_layer1_weights_3_U : component cnn_fc_layer1_fc_layer1_weights_3
    generic map (
        DataWidth => 32,
        AddressRange => 1568,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc_layer1_weights_3_address0,
        ce0 => fc_layer1_weights_3_ce0,
        q0 => fc_layer1_weights_3_q0);

    fc_layer1_weights_4_U : component cnn_fc_layer1_fc_layer1_weights_4
    generic map (
        DataWidth => 32,
        AddressRange => 1568,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc_layer1_weights_4_address0,
        ce0 => fc_layer1_weights_4_ce0,
        q0 => fc_layer1_weights_4_q0);

    fc_layer1_weights_5_U : component cnn_fc_layer1_fc_layer1_weights_5
    generic map (
        DataWidth => 32,
        AddressRange => 1568,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc_layer1_weights_5_address0,
        ce0 => fc_layer1_weights_5_ce0,
        q0 => fc_layer1_weights_5_q0);

    fc_layer1_weights_6_U : component cnn_fc_layer1_fc_layer1_weights_6
    generic map (
        DataWidth => 32,
        AddressRange => 1568,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc_layer1_weights_6_address0,
        ce0 => fc_layer1_weights_6_ce0,
        q0 => fc_layer1_weights_6_q0);

    fc_layer1_weights_7_U : component cnn_fc_layer1_fc_layer1_weights_7
    generic map (
        DataWidth => 32,
        AddressRange => 1568,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc_layer1_weights_7_address0,
        ce0 => fc_layer1_weights_7_ce0,
        q0 => fc_layer1_weights_7_q0);

    fc_layer1_weights_8_U : component cnn_fc_layer1_fc_layer1_weights_8
    generic map (
        DataWidth => 32,
        AddressRange => 1568,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc_layer1_weights_8_address0,
        ce0 => fc_layer1_weights_8_ce0,
        q0 => fc_layer1_weights_8_q0);

    fc_layer1_weights_9_U : component cnn_fc_layer1_fc_layer1_weights_9
    generic map (
        DataWidth => 32,
        AddressRange => 1568,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc_layer1_weights_9_address0,
        ce0 => fc_layer1_weights_9_ce0,
        q0 => fc_layer1_weights_9_q0);

    fc_layer1_bias_U : component cnn_fc_layer1_fc_layer1_bias
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc_layer1_bias_address0,
        ce0 => fc_layer1_bias_ce0,
        q0 => fc_layer1_bias_q0);

    output_U : component cnn_fc_layer1_output
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_address0,
        ce0 => output_ce0,
        we0 => output_we0,
        d0 => output_d0,
        q0 => output_q0,
        address1 => output_address1,
        ce1 => output_ce1,
        we1 => output_we1,
        d1 => grp_fu_5484_p_dout0,
        q1 => output_q1);

    fcmp_32ns_32ns_1_1_no_dsp_1_U20 : component cnn_fcmp_32ns_32ns_1_1_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => reg_1123,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_1_fu_1012_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state51) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state51)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state51);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
                    ap_enable_reg_pp3_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    empty_reg_945_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond201_fu_1180_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                empty_reg_945 <= empty_22_fu_1174_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                empty_reg_945 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvars_iv14_reg_967_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                indvars_iv14_reg_967 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                indvars_iv14_reg_967 <= add_ln22_reg_1565;
            end if; 
        end if;
    end process;

    indvars_iv17_reg_956_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvars_iv17_reg_956 <= ap_const_lv4_0;
            elsif (((icmp_ln19_fu_1197_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                indvars_iv17_reg_956 <= add_ln19_fu_1191_p2;
            end if; 
        end if;
    end process;

    indvars_iv_reg_979_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
                indvars_iv_reg_979 <= ap_const_lv4_0;
            elsif (((icmp_ln33_fu_1434_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                indvars_iv_reg_979 <= add_ln33_fu_1428_p2;
            end if; 
        end if;
    end process;

    reg_1022_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                reg_1022 <= output_q0;
            elsif ((((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln33_reg_2348 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
                reg_1022 <= output_q1;
            end if; 
        end if;
    end process;

    reg_1033_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((pool1_out5_empty_n = ap_const_logic_1)) then
                if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    reg_1033 <= output_q1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    reg_1033 <= output_q0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln22_reg_1565 <= add_ln22_fu_1208_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                bitcast_ln145_1_reg_2071 <= bitcast_ln145_1_fu_1353_p1;
                fc_layer1_weights_0_load_5_reg_2077 <= fc_layer1_weights_0_q0;
                fc_layer1_weights_1_load_5_reg_2082 <= fc_layer1_weights_1_q0;
                fc_layer1_weights_2_load_5_reg_2087 <= fc_layer1_weights_2_q0;
                fc_layer1_weights_3_load_5_reg_2092 <= fc_layer1_weights_3_q0;
                fc_layer1_weights_4_load_5_reg_2097 <= fc_layer1_weights_4_q0;
                fc_layer1_weights_5_load_5_reg_2102 <= fc_layer1_weights_5_q0;
                fc_layer1_weights_6_load_5_reg_2107 <= fc_layer1_weights_6_q0;
                fc_layer1_weights_7_load_5_reg_2112 <= fc_layer1_weights_7_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                bitcast_ln145_2_reg_2307 <= bitcast_ln145_2_fu_1397_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                bitcast_ln145_3_reg_2313 <= bitcast_ln145_3_fu_1402_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                bitcast_ln145_4_reg_2319 <= bitcast_ln145_4_fu_1407_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                bitcast_ln145_5_reg_2325 <= bitcast_ln145_5_fu_1412_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                bitcast_ln145_6_reg_2331 <= bitcast_ln145_6_fu_1418_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                bitcast_ln145_7_reg_2337 <= bitcast_ln145_7_fu_1423_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                bitcast_ln145_reg_1628 <= bitcast_ln145_fu_1238_p1;
                    zext_ln22_3_reg_1623(7 downto 0) <= zext_ln22_3_fu_1234_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                fc_layer1_weights_0_load_2_reg_1791 <= fc_layer1_weights_0_q0;
                fc_layer1_weights_1_load_2_reg_1796 <= fc_layer1_weights_1_q0;
                fc_layer1_weights_4_load_2_reg_1801 <= fc_layer1_weights_4_q0;
                fc_layer1_weights_5_load_2_reg_1806 <= fc_layer1_weights_5_q0;
                fc_layer1_weights_6_load_2_reg_1811 <= fc_layer1_weights_6_q0;
                fc_layer1_weights_7_load_2_reg_1816 <= fc_layer1_weights_7_q0;
                fc_layer1_weights_8_load_2_reg_1821 <= fc_layer1_weights_8_q0;
                fc_layer1_weights_9_load_2_reg_1826 <= fc_layer1_weights_9_q0;
                output_load_5_reg_1776 <= output_q0;
                output_load_6_reg_1781 <= output_q1;
                pool1_out5_read_2_reg_1786 <= pool1_out5_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                fc_layer1_weights_0_load_3_reg_1886 <= fc_layer1_weights_0_q0;
                fc_layer1_weights_1_load_3_reg_1891 <= fc_layer1_weights_1_q0;
                fc_layer1_weights_2_load_3_reg_1896 <= fc_layer1_weights_2_q0;
                fc_layer1_weights_3_load_3_reg_1901 <= fc_layer1_weights_3_q0;
                fc_layer1_weights_6_load_3_reg_1906 <= fc_layer1_weights_6_q0;
                fc_layer1_weights_7_load_3_reg_1911 <= fc_layer1_weights_7_q0;
                fc_layer1_weights_8_load_3_reg_1916 <= fc_layer1_weights_8_q0;
                fc_layer1_weights_9_load_3_reg_1921 <= fc_layer1_weights_9_q0;
                pool1_out5_read_3_reg_1881 <= pool1_out5_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                fc_layer1_weights_0_load_4_reg_1981 <= fc_layer1_weights_0_q0;
                fc_layer1_weights_1_load_4_reg_1986 <= fc_layer1_weights_1_q0;
                fc_layer1_weights_2_load_4_reg_1991 <= fc_layer1_weights_2_q0;
                fc_layer1_weights_3_load_4_reg_1996 <= fc_layer1_weights_3_q0;
                fc_layer1_weights_4_load_4_reg_2001 <= fc_layer1_weights_4_q0;
                fc_layer1_weights_5_load_4_reg_2006 <= fc_layer1_weights_5_q0;
                fc_layer1_weights_8_load_4_reg_2011 <= fc_layer1_weights_8_q0;
                fc_layer1_weights_9_load_4_reg_2016 <= fc_layer1_weights_9_q0;
                pool1_out5_read_4_reg_1976 <= pool1_out5_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                fc_layer1_weights_0_load_7_reg_2267 <= fc_layer1_weights_0_q0;
                fc_layer1_weights_1_load_7_reg_2272 <= fc_layer1_weights_1_q0;
                fc_layer1_weights_4_load_7_reg_2277 <= fc_layer1_weights_4_q0;
                fc_layer1_weights_5_load_7_reg_2282 <= fc_layer1_weights_5_q0;
                fc_layer1_weights_6_load_7_reg_2287 <= fc_layer1_weights_6_q0;
                fc_layer1_weights_7_load_7_reg_2292 <= fc_layer1_weights_7_q0;
                fc_layer1_weights_8_load_7_reg_2297 <= fc_layer1_weights_8_q0;
                fc_layer1_weights_9_load_7_reg_2302 <= fc_layer1_weights_9_q0;
                pool1_out5_read_7_reg_2262 <= pool1_out5_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                fc_layer1_weights_2_load_6_reg_2172 <= fc_layer1_weights_2_q0;
                fc_layer1_weights_3_load_6_reg_2177 <= fc_layer1_weights_3_q0;
                fc_layer1_weights_4_load_6_reg_2182 <= fc_layer1_weights_4_q0;
                fc_layer1_weights_5_load_6_reg_2187 <= fc_layer1_weights_5_q0;
                fc_layer1_weights_6_load_6_reg_2192 <= fc_layer1_weights_6_q0;
                fc_layer1_weights_7_load_6_reg_2197 <= fc_layer1_weights_7_q0;
                fc_layer1_weights_8_load_6_reg_2202 <= fc_layer1_weights_8_q0;
                fc_layer1_weights_9_load_6_reg_2207 <= fc_layer1_weights_9_q0;
                pool1_out5_read_6_reg_2167 <= pool1_out5_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                fc_layer1_weights_4_load_1_reg_1696 <= fc_layer1_weights_4_q0;
                fc_layer1_weights_5_load_1_reg_1701 <= fc_layer1_weights_5_q0;
                fc_layer1_weights_6_load_1_reg_1706 <= fc_layer1_weights_6_q0;
                fc_layer1_weights_7_load_1_reg_1711 <= fc_layer1_weights_7_q0;
                fc_layer1_weights_8_load_1_reg_1716 <= fc_layer1_weights_8_q0;
                fc_layer1_weights_9_load_1_reg_1721 <= fc_layer1_weights_9_q0;
                    zext_ln22_1_reg_1684(7 downto 0) <= zext_ln22_1_fu_1264_p1(7 downto 0);
                    zext_ln22_2_reg_1691(7 downto 0) <= zext_ln22_2_fu_1268_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln33_reg_2348 <= icmp_ln33_fu_1434_p2;
                icmp_ln33_reg_2348_pp3_iter1_reg <= icmp_ln33_reg_2348;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp3_stage0_11001)) then
                icmp_ln33_reg_2348_pp3_iter2_reg <= icmp_ln33_reg_2348_pp3_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then
                reg_1017 <= fc_layer1_weights_0_q0;
                reg_1028 <= fc_layer1_weights_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then
                reg_1039 <= fc_layer1_weights_2_q0;
                reg_1044 <= fc_layer1_weights_3_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then
                reg_1049 <= fc_layer1_weights_4_q0;
                reg_1054 <= fc_layer1_weights_5_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then
                reg_1059 <= fc_layer1_weights_6_q0;
                reg_1064 <= fc_layer1_weights_7_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then
                reg_1069 <= fc_layer1_weights_8_q0;
                reg_1074 <= fc_layer1_weights_9_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then
                reg_1079 <= grp_fu_5500_p_dout0;
                reg_1084 <= grp_fu_5504_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then
                reg_1089 <= output_q0;
                reg_1094 <= output_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then
                reg_1099 <= pool1_out5_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then
                reg_1103 <= fc_layer1_weights_2_q0;
                reg_1108 <= fc_layer1_weights_3_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then
                reg_1113 <= grp_fu_5500_p_dout0;
                reg_1118 <= grp_fu_5504_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state20) or ((icmp_ln33_reg_2348_pp3_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then
                reg_1123 <= grp_fu_5480_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state20) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then
                reg_1129 <= grp_fu_5484_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state16) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then
                reg_1134 <= grp_fu_5480_p_dout0;
                reg_1139 <= grp_fu_5484_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state22) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then
                reg_1144 <= grp_fu_5480_p_dout0;
                reg_1149 <= grp_fu_5484_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state18) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then
                reg_1154 <= grp_fu_5480_p_dout0;
                reg_1159 <= grp_fu_5484_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state24) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then
                reg_1164 <= grp_fu_5480_p_dout0;
                reg_1169 <= grp_fu_5484_p_dout0;
            end if;
        end if;
    end process;
    zext_ln22_3_reg_1623(8) <= '0';
    zext_ln22_1_reg_1684(10 downto 8) <= "000";
    zext_ln22_2_reg_1691(9 downto 8) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, pool1_out5_empty_n, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_enable_reg_pp3_iter3, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, icmp_ln22_fu_1214_p2, ap_enable_reg_pp3_iter0, icmp_ln33_fu_1434_p2, ap_block_pp3_stage0_subdone, exitcond201_fu_1180_p2, icmp_ln19_fu_1197_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond201_fu_1180_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln19_fu_1197_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln22_fu_1214_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state7 => 
                if (((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((icmp_ln33_fu_1434_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) and not(((ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter3 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter3 = ap_const_logic_1)) or ((icmp_ln33_fu_1434_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln19_fu_1191_p2 <= std_logic_vector(unsigned(indvars_iv17_reg_956) + unsigned(ap_const_lv4_1));
    add_ln22_fu_1208_p2 <= std_logic_vector(unsigned(indvars_iv14_reg_967) + unsigned(ap_const_lv8_1));
    add_ln33_fu_1428_p2 <= std_logic_vector(unsigned(indvars_iv_reg_979) + unsigned(ap_const_lv4_1));
    and_ln34_fu_1482_p2 <= (tmp_1_fu_1012_p2 and or_ln34_fu_1476_p2);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(50);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state55 <= ap_CS_fsm(51);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_00001_assign_proc : process(out_stream_V_TREADY, ap_enable_reg_pp3_iter3, icmp_ln33_reg_2348_pp3_iter2_reg)
    begin
                ap_block_pp3_stage0_00001 <= ((out_stream_V_TREADY = ap_const_logic_0) and (icmp_ln33_reg_2348_pp3_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter3 = ap_const_logic_1));
    end process;


    ap_block_pp3_stage0_01001_assign_proc : process(out_stream_V_TREADY, ap_enable_reg_pp3_iter3, icmp_ln33_reg_2348_pp3_iter2_reg)
    begin
                ap_block_pp3_stage0_01001 <= ((out_stream_V_TREADY = ap_const_logic_0) and (icmp_ln33_reg_2348_pp3_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter3 = ap_const_logic_1));
    end process;


    ap_block_pp3_stage0_11001_assign_proc : process(out_stream_V_TREADY, ap_enable_reg_pp3_iter3, icmp_ln33_reg_2348_pp3_iter2_reg, ap_block_state54_io)
    begin
                ap_block_pp3_stage0_11001 <= ((ap_enable_reg_pp3_iter3 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state54_io) or ((out_stream_V_TREADY = ap_const_logic_0) and (icmp_ln33_reg_2348_pp3_iter2_reg = ap_const_lv1_0))));
    end process;


    ap_block_pp3_stage0_subdone_assign_proc : process(out_stream_V_TREADY, ap_enable_reg_pp3_iter3, icmp_ln33_reg_2348_pp3_iter2_reg, ap_block_state54_io)
    begin
                ap_block_pp3_stage0_subdone <= ((ap_enable_reg_pp3_iter3 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state54_io) or ((out_stream_V_TREADY = ap_const_logic_0) and (icmp_ln33_reg_2348_pp3_iter2_reg = ap_const_lv1_0))));
    end process;

        ap_block_state51_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state54_io_assign_proc : process(out_stream_V_TREADY, icmp_ln33_reg_2348_pp3_iter2_reg)
    begin
                ap_block_state54_io <= ((out_stream_V_TREADY = ap_const_logic_0) and (icmp_ln33_reg_2348_pp3_iter2_reg = ap_const_lv1_0));
    end process;


    ap_block_state54_pp3_stage0_iter3_assign_proc : process(out_stream_V_TREADY, icmp_ln33_reg_2348_pp3_iter2_reg)
    begin
                ap_block_state54_pp3_stage0_iter3 <= ((out_stream_V_TREADY = ap_const_logic_0) and (icmp_ln33_reg_2348_pp3_iter2_reg = ap_const_lv1_0));
    end process;


    ap_condition_pp3_exit_iter0_state51_assign_proc : process(icmp_ln33_fu_1434_p2)
    begin
        if ((icmp_ln33_fu_1434_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state51 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state51 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state55)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state55) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter3, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter0)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter3 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln145_1_fu_1353_p1 <= reg_1099;
    bitcast_ln145_2_fu_1397_p1 <= pool1_out5_read_2_reg_1786;
    bitcast_ln145_3_fu_1402_p1 <= pool1_out5_read_3_reg_1881;
    bitcast_ln145_4_fu_1407_p1 <= pool1_out5_read_4_reg_1976;
    bitcast_ln145_5_fu_1412_p1 <= reg_1099;
    bitcast_ln145_6_fu_1418_p1 <= pool1_out5_read_6_reg_2167;
    bitcast_ln145_7_fu_1423_p1 <= pool1_out5_read_7_reg_2262;
    bitcast_ln145_fu_1238_p1 <= pool1_out5_dout;
    bitcast_ln34_fu_1446_p1 <= reg_1123;
    empty_22_fu_1174_p2 <= std_logic_vector(unsigned(empty_reg_945) + unsigned(ap_const_lv4_1));
    empty_26_fu_1244_p2 <= std_logic_vector(unsigned(zext_ln22_3_fu_1234_p1) + unsigned(ap_const_lv9_C4));
    empty_27_fu_1272_p2 <= std_logic_vector(unsigned(zext_ln22_2_fu_1268_p1) + unsigned(ap_const_lv10_188));
    empty_28_fu_1292_p2 <= std_logic_vector(unsigned(zext_ln22_2_reg_1691) + unsigned(ap_const_lv10_24C));
    empty_29_fu_1311_p2 <= std_logic_vector(unsigned(zext_ln22_3_reg_1623) + unsigned(ap_const_lv9_110));
    empty_30_fu_1334_p2 <= std_logic_vector(unsigned(zext_ln22_1_reg_1684) + unsigned(ap_const_lv11_3D4));
    empty_31_fu_1359_p2 <= std_logic_vector(unsigned(zext_ln22_1_reg_1684) + unsigned(ap_const_lv11_498));
    empty_32_fu_1378_p2 <= std_logic_vector(unsigned(zext_ln22_1_reg_1684) + unsigned(ap_const_lv11_55C));
    exitcond201_fu_1180_p2 <= "1" when (empty_reg_945 = ap_const_lv4_A) else "0";
    fc_layer1_bias_address0 <= indvars_iv_cast_fu_1440_p1(4 - 1 downto 0);

    fc_layer1_bias_ce0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            fc_layer1_bias_ce0 <= ap_const_logic_1;
        else 
            fc_layer1_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_layer1_weights_0_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state6, zext_ln22_fu_1220_p1, zext_ln29_fu_1250_p1, zext_ln29_1_fu_1278_p1, zext_ln29_2_fu_1297_p1, zext_ln29_3_fu_1320_p1, zext_ln29_4_fu_1339_p1, zext_ln29_5_fu_1364_p1, zext_ln29_6_fu_1383_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            fc_layer1_weights_0_address0 <= zext_ln29_6_fu_1383_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            fc_layer1_weights_0_address0 <= zext_ln29_5_fu_1364_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            fc_layer1_weights_0_address0 <= zext_ln29_4_fu_1339_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            fc_layer1_weights_0_address0 <= zext_ln29_3_fu_1320_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            fc_layer1_weights_0_address0 <= zext_ln29_2_fu_1297_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            fc_layer1_weights_0_address0 <= zext_ln29_1_fu_1278_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            fc_layer1_weights_0_address0 <= zext_ln29_fu_1250_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            fc_layer1_weights_0_address0 <= zext_ln22_fu_1220_p1(11 - 1 downto 0);
        else 
            fc_layer1_weights_0_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    fc_layer1_weights_0_ce0_assign_proc : process(pool1_out5_empty_n, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            fc_layer1_weights_0_ce0 <= ap_const_logic_1;
        else 
            fc_layer1_weights_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_layer1_weights_1_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state6, zext_ln22_fu_1220_p1, zext_ln29_fu_1250_p1, zext_ln29_1_fu_1278_p1, zext_ln29_2_fu_1297_p1, zext_ln29_3_fu_1320_p1, zext_ln29_4_fu_1339_p1, zext_ln29_5_fu_1364_p1, zext_ln29_6_fu_1383_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            fc_layer1_weights_1_address0 <= zext_ln29_6_fu_1383_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            fc_layer1_weights_1_address0 <= zext_ln29_5_fu_1364_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            fc_layer1_weights_1_address0 <= zext_ln29_4_fu_1339_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            fc_layer1_weights_1_address0 <= zext_ln29_3_fu_1320_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            fc_layer1_weights_1_address0 <= zext_ln29_2_fu_1297_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            fc_layer1_weights_1_address0 <= zext_ln29_1_fu_1278_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            fc_layer1_weights_1_address0 <= zext_ln29_fu_1250_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            fc_layer1_weights_1_address0 <= zext_ln22_fu_1220_p1(11 - 1 downto 0);
        else 
            fc_layer1_weights_1_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    fc_layer1_weights_1_ce0_assign_proc : process(pool1_out5_empty_n, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            fc_layer1_weights_1_ce0 <= ap_const_logic_1;
        else 
            fc_layer1_weights_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_layer1_weights_2_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state6, zext_ln22_fu_1220_p1, zext_ln29_fu_1250_p1, zext_ln29_1_fu_1278_p1, zext_ln29_2_fu_1297_p1, zext_ln29_3_fu_1320_p1, zext_ln29_4_fu_1339_p1, zext_ln29_5_fu_1364_p1, zext_ln29_6_fu_1383_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            fc_layer1_weights_2_address0 <= zext_ln29_6_fu_1383_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            fc_layer1_weights_2_address0 <= zext_ln29_5_fu_1364_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            fc_layer1_weights_2_address0 <= zext_ln29_4_fu_1339_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            fc_layer1_weights_2_address0 <= zext_ln29_3_fu_1320_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            fc_layer1_weights_2_address0 <= zext_ln29_2_fu_1297_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            fc_layer1_weights_2_address0 <= zext_ln29_1_fu_1278_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            fc_layer1_weights_2_address0 <= zext_ln29_fu_1250_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            fc_layer1_weights_2_address0 <= zext_ln22_fu_1220_p1(11 - 1 downto 0);
        else 
            fc_layer1_weights_2_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    fc_layer1_weights_2_ce0_assign_proc : process(pool1_out5_empty_n, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            fc_layer1_weights_2_ce0 <= ap_const_logic_1;
        else 
            fc_layer1_weights_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_layer1_weights_3_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state6, zext_ln22_fu_1220_p1, zext_ln29_fu_1250_p1, zext_ln29_1_fu_1278_p1, zext_ln29_2_fu_1297_p1, zext_ln29_3_fu_1320_p1, zext_ln29_4_fu_1339_p1, zext_ln29_5_fu_1364_p1, zext_ln29_6_fu_1383_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            fc_layer1_weights_3_address0 <= zext_ln29_6_fu_1383_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            fc_layer1_weights_3_address0 <= zext_ln29_5_fu_1364_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            fc_layer1_weights_3_address0 <= zext_ln29_4_fu_1339_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            fc_layer1_weights_3_address0 <= zext_ln29_3_fu_1320_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            fc_layer1_weights_3_address0 <= zext_ln29_2_fu_1297_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            fc_layer1_weights_3_address0 <= zext_ln29_1_fu_1278_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            fc_layer1_weights_3_address0 <= zext_ln29_fu_1250_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            fc_layer1_weights_3_address0 <= zext_ln22_fu_1220_p1(11 - 1 downto 0);
        else 
            fc_layer1_weights_3_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    fc_layer1_weights_3_ce0_assign_proc : process(pool1_out5_empty_n, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            fc_layer1_weights_3_ce0 <= ap_const_logic_1;
        else 
            fc_layer1_weights_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_layer1_weights_4_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state6, zext_ln22_fu_1220_p1, zext_ln29_fu_1250_p1, zext_ln29_1_fu_1278_p1, zext_ln29_2_fu_1297_p1, zext_ln29_3_fu_1320_p1, zext_ln29_4_fu_1339_p1, zext_ln29_5_fu_1364_p1, zext_ln29_6_fu_1383_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            fc_layer1_weights_4_address0 <= zext_ln29_6_fu_1383_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            fc_layer1_weights_4_address0 <= zext_ln29_5_fu_1364_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            fc_layer1_weights_4_address0 <= zext_ln29_4_fu_1339_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            fc_layer1_weights_4_address0 <= zext_ln29_3_fu_1320_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            fc_layer1_weights_4_address0 <= zext_ln29_2_fu_1297_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            fc_layer1_weights_4_address0 <= zext_ln29_1_fu_1278_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            fc_layer1_weights_4_address0 <= zext_ln29_fu_1250_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            fc_layer1_weights_4_address0 <= zext_ln22_fu_1220_p1(11 - 1 downto 0);
        else 
            fc_layer1_weights_4_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    fc_layer1_weights_4_ce0_assign_proc : process(pool1_out5_empty_n, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            fc_layer1_weights_4_ce0 <= ap_const_logic_1;
        else 
            fc_layer1_weights_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_layer1_weights_5_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state6, zext_ln22_fu_1220_p1, zext_ln29_fu_1250_p1, zext_ln29_1_fu_1278_p1, zext_ln29_2_fu_1297_p1, zext_ln29_3_fu_1320_p1, zext_ln29_4_fu_1339_p1, zext_ln29_5_fu_1364_p1, zext_ln29_6_fu_1383_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            fc_layer1_weights_5_address0 <= zext_ln29_6_fu_1383_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            fc_layer1_weights_5_address0 <= zext_ln29_5_fu_1364_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            fc_layer1_weights_5_address0 <= zext_ln29_4_fu_1339_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            fc_layer1_weights_5_address0 <= zext_ln29_3_fu_1320_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            fc_layer1_weights_5_address0 <= zext_ln29_2_fu_1297_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            fc_layer1_weights_5_address0 <= zext_ln29_1_fu_1278_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            fc_layer1_weights_5_address0 <= zext_ln29_fu_1250_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            fc_layer1_weights_5_address0 <= zext_ln22_fu_1220_p1(11 - 1 downto 0);
        else 
            fc_layer1_weights_5_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    fc_layer1_weights_5_ce0_assign_proc : process(pool1_out5_empty_n, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            fc_layer1_weights_5_ce0 <= ap_const_logic_1;
        else 
            fc_layer1_weights_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_layer1_weights_6_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state6, zext_ln22_fu_1220_p1, zext_ln29_fu_1250_p1, zext_ln29_1_fu_1278_p1, zext_ln29_2_fu_1297_p1, zext_ln29_3_fu_1320_p1, zext_ln29_4_fu_1339_p1, zext_ln29_5_fu_1364_p1, zext_ln29_6_fu_1383_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            fc_layer1_weights_6_address0 <= zext_ln29_6_fu_1383_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            fc_layer1_weights_6_address0 <= zext_ln29_5_fu_1364_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            fc_layer1_weights_6_address0 <= zext_ln29_4_fu_1339_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            fc_layer1_weights_6_address0 <= zext_ln29_3_fu_1320_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            fc_layer1_weights_6_address0 <= zext_ln29_2_fu_1297_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            fc_layer1_weights_6_address0 <= zext_ln29_1_fu_1278_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            fc_layer1_weights_6_address0 <= zext_ln29_fu_1250_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            fc_layer1_weights_6_address0 <= zext_ln22_fu_1220_p1(11 - 1 downto 0);
        else 
            fc_layer1_weights_6_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    fc_layer1_weights_6_ce0_assign_proc : process(pool1_out5_empty_n, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            fc_layer1_weights_6_ce0 <= ap_const_logic_1;
        else 
            fc_layer1_weights_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_layer1_weights_7_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state6, zext_ln22_fu_1220_p1, zext_ln29_fu_1250_p1, zext_ln29_1_fu_1278_p1, zext_ln29_2_fu_1297_p1, zext_ln29_3_fu_1320_p1, zext_ln29_4_fu_1339_p1, zext_ln29_5_fu_1364_p1, zext_ln29_6_fu_1383_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            fc_layer1_weights_7_address0 <= zext_ln29_6_fu_1383_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            fc_layer1_weights_7_address0 <= zext_ln29_5_fu_1364_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            fc_layer1_weights_7_address0 <= zext_ln29_4_fu_1339_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            fc_layer1_weights_7_address0 <= zext_ln29_3_fu_1320_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            fc_layer1_weights_7_address0 <= zext_ln29_2_fu_1297_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            fc_layer1_weights_7_address0 <= zext_ln29_1_fu_1278_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            fc_layer1_weights_7_address0 <= zext_ln29_fu_1250_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            fc_layer1_weights_7_address0 <= zext_ln22_fu_1220_p1(11 - 1 downto 0);
        else 
            fc_layer1_weights_7_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    fc_layer1_weights_7_ce0_assign_proc : process(pool1_out5_empty_n, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            fc_layer1_weights_7_ce0 <= ap_const_logic_1;
        else 
            fc_layer1_weights_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_layer1_weights_8_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state6, zext_ln22_fu_1220_p1, zext_ln29_fu_1250_p1, zext_ln29_1_fu_1278_p1, zext_ln29_2_fu_1297_p1, zext_ln29_3_fu_1320_p1, zext_ln29_4_fu_1339_p1, zext_ln29_5_fu_1364_p1, zext_ln29_6_fu_1383_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            fc_layer1_weights_8_address0 <= zext_ln29_6_fu_1383_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            fc_layer1_weights_8_address0 <= zext_ln29_5_fu_1364_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            fc_layer1_weights_8_address0 <= zext_ln29_4_fu_1339_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            fc_layer1_weights_8_address0 <= zext_ln29_3_fu_1320_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            fc_layer1_weights_8_address0 <= zext_ln29_2_fu_1297_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            fc_layer1_weights_8_address0 <= zext_ln29_1_fu_1278_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            fc_layer1_weights_8_address0 <= zext_ln29_fu_1250_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            fc_layer1_weights_8_address0 <= zext_ln22_fu_1220_p1(11 - 1 downto 0);
        else 
            fc_layer1_weights_8_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    fc_layer1_weights_8_ce0_assign_proc : process(pool1_out5_empty_n, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            fc_layer1_weights_8_ce0 <= ap_const_logic_1;
        else 
            fc_layer1_weights_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_layer1_weights_9_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state6, zext_ln22_fu_1220_p1, zext_ln29_fu_1250_p1, zext_ln29_1_fu_1278_p1, zext_ln29_2_fu_1297_p1, zext_ln29_3_fu_1320_p1, zext_ln29_4_fu_1339_p1, zext_ln29_5_fu_1364_p1, zext_ln29_6_fu_1383_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            fc_layer1_weights_9_address0 <= zext_ln29_6_fu_1383_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            fc_layer1_weights_9_address0 <= zext_ln29_5_fu_1364_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            fc_layer1_weights_9_address0 <= zext_ln29_4_fu_1339_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            fc_layer1_weights_9_address0 <= zext_ln29_3_fu_1320_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            fc_layer1_weights_9_address0 <= zext_ln29_2_fu_1297_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            fc_layer1_weights_9_address0 <= zext_ln29_1_fu_1278_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            fc_layer1_weights_9_address0 <= zext_ln29_fu_1250_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            fc_layer1_weights_9_address0 <= zext_ln22_fu_1220_p1(11 - 1 downto 0);
        else 
            fc_layer1_weights_9_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    fc_layer1_weights_9_ce0_assign_proc : process(pool1_out5_empty_n, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            fc_layer1_weights_9_ce0 <= ap_const_logic_1;
        else 
            fc_layer1_weights_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1002_ce_assign_proc : process(ap_CS_fsm_state1, pool1_out5_empty_n, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_pp3_stage0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state50, ap_CS_fsm_state3, ap_CS_fsm_state49, ap_CS_fsm_state48, ap_CS_fsm_state55)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) or (ap_const_logic_1 = ap_CS_fsm_state55) or ((pool1_out5_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((pool1_out5_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((pool1_out5_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((pool1_out5_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((pool1_out5_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((pool1_out5_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((pool1_out5_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((pool1_out5_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            grp_fu_1002_ce <= ap_const_logic_0;
        else 
            grp_fu_1002_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_1002_p0_assign_proc : process(fc_layer1_weights_0_q0, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, reg_1017, reg_1039, reg_1049, reg_1059, reg_1069, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, reg_1103, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state45, fc_layer1_weights_4_load_1_reg_1696, fc_layer1_weights_6_load_1_reg_1706, fc_layer1_weights_8_load_1_reg_1716, fc_layer1_weights_0_load_2_reg_1791, fc_layer1_weights_4_load_2_reg_1801, fc_layer1_weights_6_load_2_reg_1811, fc_layer1_weights_8_load_2_reg_1821, fc_layer1_weights_0_load_3_reg_1886, fc_layer1_weights_2_load_3_reg_1896, fc_layer1_weights_6_load_3_reg_1906, fc_layer1_weights_8_load_3_reg_1916, fc_layer1_weights_0_load_4_reg_1981, fc_layer1_weights_2_load_4_reg_1991, fc_layer1_weights_4_load_4_reg_2001, fc_layer1_weights_8_load_4_reg_2011, fc_layer1_weights_0_load_5_reg_2077, fc_layer1_weights_2_load_5_reg_2087, fc_layer1_weights_4_load_5_reg_2097, fc_layer1_weights_6_load_5_reg_2107, fc_layer1_weights_2_load_6_reg_2172, fc_layer1_weights_4_load_6_reg_2182, fc_layer1_weights_6_load_6_reg_2192, fc_layer1_weights_8_load_6_reg_2202, fc_layer1_weights_0_load_7_reg_2267, fc_layer1_weights_4_load_7_reg_2277, fc_layer1_weights_6_load_7_reg_2287, fc_layer1_weights_8_load_7_reg_2297)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            grp_fu_1002_p0 <= fc_layer1_weights_8_load_7_reg_2297;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_fu_1002_p0 <= fc_layer1_weights_6_load_7_reg_2287;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_fu_1002_p0 <= fc_layer1_weights_4_load_7_reg_2277;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_1002_p0 <= fc_layer1_weights_0_load_7_reg_2267;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_1002_p0 <= fc_layer1_weights_8_load_6_reg_2202;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_fu_1002_p0 <= fc_layer1_weights_6_load_6_reg_2192;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_fu_1002_p0 <= fc_layer1_weights_4_load_6_reg_2182;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_1002_p0 <= fc_layer1_weights_2_load_6_reg_2172;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_1002_p0 <= fc_layer1_weights_6_load_5_reg_2107;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_1002_p0 <= fc_layer1_weights_4_load_5_reg_2097;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_1002_p0 <= fc_layer1_weights_2_load_5_reg_2087;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_1002_p0 <= fc_layer1_weights_0_load_5_reg_2077;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_1002_p0 <= fc_layer1_weights_8_load_4_reg_2011;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_1002_p0 <= fc_layer1_weights_4_load_4_reg_2001;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_1002_p0 <= fc_layer1_weights_2_load_4_reg_1991;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_1002_p0 <= fc_layer1_weights_0_load_4_reg_1981;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_1002_p0 <= fc_layer1_weights_8_load_3_reg_1916;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_1002_p0 <= fc_layer1_weights_6_load_3_reg_1906;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_1002_p0 <= fc_layer1_weights_2_load_3_reg_1896;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_1002_p0 <= fc_layer1_weights_0_load_3_reg_1886;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_1002_p0 <= fc_layer1_weights_8_load_2_reg_1821;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_1002_p0 <= fc_layer1_weights_6_load_2_reg_1811;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_1002_p0 <= fc_layer1_weights_4_load_2_reg_1801;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_1002_p0 <= fc_layer1_weights_0_load_2_reg_1791;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_1002_p0 <= fc_layer1_weights_8_load_1_reg_1716;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_1002_p0 <= fc_layer1_weights_6_load_1_reg_1706;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_1002_p0 <= fc_layer1_weights_4_load_1_reg_1696;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            grp_fu_1002_p0 <= reg_1103;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_fu_1002_p0 <= reg_1017;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_1002_p0 <= reg_1069;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_fu_1002_p0 <= reg_1059;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_1002_p0 <= reg_1049;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            grp_fu_1002_p0 <= reg_1039;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_1002_p0 <= fc_layer1_weights_0_q0;
        else 
            grp_fu_1002_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1002_p1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state45, bitcast_ln145_fu_1238_p1, bitcast_ln145_reg_1628, bitcast_ln145_1_fu_1353_p1, bitcast_ln145_1_reg_2071, bitcast_ln145_2_fu_1397_p1, bitcast_ln145_2_reg_2307, bitcast_ln145_3_fu_1402_p1, bitcast_ln145_3_reg_2313, bitcast_ln145_4_fu_1407_p1, bitcast_ln145_4_reg_2319, bitcast_ln145_5_fu_1412_p1, bitcast_ln145_5_reg_2325, bitcast_ln145_6_fu_1418_p1, bitcast_ln145_6_reg_2331, bitcast_ln145_7_fu_1423_p1, bitcast_ln145_7_reg_2337)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            grp_fu_1002_p1 <= bitcast_ln145_7_reg_2337;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_1002_p1 <= bitcast_ln145_7_fu_1423_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            grp_fu_1002_p1 <= bitcast_ln145_6_reg_2331;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_1002_p1 <= bitcast_ln145_6_fu_1418_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            grp_fu_1002_p1 <= bitcast_ln145_5_reg_2325;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_1002_p1 <= bitcast_ln145_5_fu_1412_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            grp_fu_1002_p1 <= bitcast_ln145_4_reg_2319;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_1002_p1 <= bitcast_ln145_4_fu_1407_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            grp_fu_1002_p1 <= bitcast_ln145_3_reg_2313;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_1002_p1 <= bitcast_ln145_3_fu_1402_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_fu_1002_p1 <= bitcast_ln145_2_reg_2307;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_1002_p1 <= bitcast_ln145_2_fu_1397_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            grp_fu_1002_p1 <= bitcast_ln145_1_reg_2071;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_1002_p1 <= bitcast_ln145_1_fu_1353_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            grp_fu_1002_p1 <= bitcast_ln145_reg_1628;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_1002_p1 <= bitcast_ln145_fu_1238_p1;
        else 
            grp_fu_1002_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_1002_p2 <= grp_fu_5500_p_dout0;

    grp_fu_1007_ce_assign_proc : process(ap_CS_fsm_state1, pool1_out5_empty_n, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_pp3_stage0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state50, ap_CS_fsm_state3, ap_CS_fsm_state49, ap_CS_fsm_state48, ap_CS_fsm_state55)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) or (ap_const_logic_1 = ap_CS_fsm_state55) or ((pool1_out5_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((pool1_out5_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((pool1_out5_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((pool1_out5_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((pool1_out5_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((pool1_out5_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((pool1_out5_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((pool1_out5_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            grp_fu_1007_ce <= ap_const_logic_0;
        else 
            grp_fu_1007_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_1007_p0_assign_proc : process(fc_layer1_weights_1_q0, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, reg_1028, reg_1044, reg_1054, reg_1064, reg_1074, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, reg_1108, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state45, fc_layer1_weights_5_load_1_reg_1701, fc_layer1_weights_7_load_1_reg_1711, fc_layer1_weights_9_load_1_reg_1721, fc_layer1_weights_1_load_2_reg_1796, fc_layer1_weights_5_load_2_reg_1806, fc_layer1_weights_7_load_2_reg_1816, fc_layer1_weights_9_load_2_reg_1826, fc_layer1_weights_1_load_3_reg_1891, fc_layer1_weights_3_load_3_reg_1901, fc_layer1_weights_7_load_3_reg_1911, fc_layer1_weights_9_load_3_reg_1921, fc_layer1_weights_1_load_4_reg_1986, fc_layer1_weights_3_load_4_reg_1996, fc_layer1_weights_5_load_4_reg_2006, fc_layer1_weights_9_load_4_reg_2016, fc_layer1_weights_1_load_5_reg_2082, fc_layer1_weights_3_load_5_reg_2092, fc_layer1_weights_5_load_5_reg_2102, fc_layer1_weights_7_load_5_reg_2112, fc_layer1_weights_3_load_6_reg_2177, fc_layer1_weights_5_load_6_reg_2187, fc_layer1_weights_7_load_6_reg_2197, fc_layer1_weights_9_load_6_reg_2207, fc_layer1_weights_1_load_7_reg_2272, fc_layer1_weights_5_load_7_reg_2282, fc_layer1_weights_7_load_7_reg_2292, fc_layer1_weights_9_load_7_reg_2302)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            grp_fu_1007_p0 <= fc_layer1_weights_9_load_7_reg_2302;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_fu_1007_p0 <= fc_layer1_weights_7_load_7_reg_2292;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_fu_1007_p0 <= fc_layer1_weights_5_load_7_reg_2282;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_1007_p0 <= fc_layer1_weights_1_load_7_reg_2272;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_1007_p0 <= fc_layer1_weights_9_load_6_reg_2207;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_fu_1007_p0 <= fc_layer1_weights_7_load_6_reg_2197;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_fu_1007_p0 <= fc_layer1_weights_5_load_6_reg_2187;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_1007_p0 <= fc_layer1_weights_3_load_6_reg_2177;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_1007_p0 <= fc_layer1_weights_7_load_5_reg_2112;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_1007_p0 <= fc_layer1_weights_5_load_5_reg_2102;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_1007_p0 <= fc_layer1_weights_3_load_5_reg_2092;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_1007_p0 <= fc_layer1_weights_1_load_5_reg_2082;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_1007_p0 <= fc_layer1_weights_9_load_4_reg_2016;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_1007_p0 <= fc_layer1_weights_5_load_4_reg_2006;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_1007_p0 <= fc_layer1_weights_3_load_4_reg_1996;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_1007_p0 <= fc_layer1_weights_1_load_4_reg_1986;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_1007_p0 <= fc_layer1_weights_9_load_3_reg_1921;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_1007_p0 <= fc_layer1_weights_7_load_3_reg_1911;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_1007_p0 <= fc_layer1_weights_3_load_3_reg_1901;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_1007_p0 <= fc_layer1_weights_1_load_3_reg_1891;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_1007_p0 <= fc_layer1_weights_9_load_2_reg_1826;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_1007_p0 <= fc_layer1_weights_7_load_2_reg_1816;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_1007_p0 <= fc_layer1_weights_5_load_2_reg_1806;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_1007_p0 <= fc_layer1_weights_1_load_2_reg_1796;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_1007_p0 <= fc_layer1_weights_9_load_1_reg_1721;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_1007_p0 <= fc_layer1_weights_7_load_1_reg_1711;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_1007_p0 <= fc_layer1_weights_5_load_1_reg_1701;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            grp_fu_1007_p0 <= reg_1108;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_fu_1007_p0 <= reg_1028;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_1007_p0 <= reg_1074;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_fu_1007_p0 <= reg_1064;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_1007_p0 <= reg_1054;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            grp_fu_1007_p0 <= reg_1044;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_1007_p0 <= fc_layer1_weights_1_q0;
        else 
            grp_fu_1007_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1007_p1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state45, bitcast_ln145_fu_1238_p1, bitcast_ln145_reg_1628, bitcast_ln145_1_fu_1353_p1, bitcast_ln145_1_reg_2071, bitcast_ln145_2_fu_1397_p1, bitcast_ln145_2_reg_2307, bitcast_ln145_3_fu_1402_p1, bitcast_ln145_3_reg_2313, bitcast_ln145_4_fu_1407_p1, bitcast_ln145_4_reg_2319, bitcast_ln145_5_fu_1412_p1, bitcast_ln145_5_reg_2325, bitcast_ln145_6_fu_1418_p1, bitcast_ln145_6_reg_2331, bitcast_ln145_7_fu_1423_p1, bitcast_ln145_7_reg_2337)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            grp_fu_1007_p1 <= bitcast_ln145_7_reg_2337;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_1007_p1 <= bitcast_ln145_7_fu_1423_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            grp_fu_1007_p1 <= bitcast_ln145_6_reg_2331;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_1007_p1 <= bitcast_ln145_6_fu_1418_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            grp_fu_1007_p1 <= bitcast_ln145_5_reg_2325;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_1007_p1 <= bitcast_ln145_5_fu_1412_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            grp_fu_1007_p1 <= bitcast_ln145_4_reg_2319;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_1007_p1 <= bitcast_ln145_4_fu_1407_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            grp_fu_1007_p1 <= bitcast_ln145_3_reg_2313;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_1007_p1 <= bitcast_ln145_3_fu_1402_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_fu_1007_p1 <= bitcast_ln145_2_reg_2307;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_1007_p1 <= bitcast_ln145_2_fu_1397_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            grp_fu_1007_p1 <= bitcast_ln145_1_reg_2071;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_1007_p1 <= bitcast_ln145_1_fu_1353_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            grp_fu_1007_p1 <= bitcast_ln145_reg_1628;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_1007_p1 <= bitcast_ln145_fu_1238_p1;
        else 
            grp_fu_1007_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_1007_p2 <= grp_fu_5504_p_dout0;
    grp_fu_5480_p_ce <= grp_fu_990_ce;
    grp_fu_5480_p_din0 <= grp_fu_990_p0;
    grp_fu_5480_p_din1 <= grp_fu_990_p1;
    grp_fu_5480_p_opcode <= ap_const_lv2_0;
    grp_fu_5484_p_ce <= grp_fu_994_ce;
    grp_fu_5484_p_din0 <= grp_fu_994_p0;
    grp_fu_5484_p_din1 <= grp_fu_994_p1;
    grp_fu_5484_p_opcode <= ap_const_lv2_0;
    grp_fu_5500_p_ce <= grp_fu_1002_ce;
    grp_fu_5500_p_din0 <= grp_fu_1002_p0;
    grp_fu_5500_p_din1 <= grp_fu_1002_p1;
    grp_fu_5504_p_ce <= grp_fu_1007_ce;
    grp_fu_5504_p_din0 <= grp_fu_1007_p0;
    grp_fu_5504_p_din1 <= grp_fu_1007_p1;

    grp_fu_990_ce_assign_proc : process(ap_CS_fsm_state1, pool1_out5_empty_n, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state50, ap_CS_fsm_state3, ap_CS_fsm_state55)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state55) or ((ap_const_boolean_1 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((pool1_out5_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((pool1_out5_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((pool1_out5_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((pool1_out5_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((pool1_out5_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((pool1_out5_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            grp_fu_990_ce <= ap_const_logic_0;
        else 
            grp_fu_990_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_990_p0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_block_pp3_stage0, output_q1, reg_1022, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, reg_1089, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state45, ap_CS_fsm_state47, reg_1123, reg_1134, reg_1144, reg_1154, reg_1164, output_load_5_reg_1776, ap_CS_fsm_state48)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            grp_fu_990_p0 <= output_q1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_fu_990_p0 <= reg_1164;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_fu_990_p0 <= reg_1154;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            grp_fu_990_p0 <= reg_1144;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            grp_fu_990_p0 <= reg_1134;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            grp_fu_990_p0 <= reg_1123;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_990_p0 <= output_load_5_reg_1776;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_fu_990_p0 <= reg_1089;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_990_p0 <= reg_1022;
        else 
            grp_fu_990_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_990_p1_assign_proc : process(fc_layer1_bias_q0, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_block_pp3_stage0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, reg_1079, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, reg_1113, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state45, ap_CS_fsm_state47, ap_CS_fsm_state48)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            grp_fu_990_p1 <= fc_layer1_bias_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_fu_990_p1 <= reg_1113;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_990_p1 <= reg_1079;
        else 
            grp_fu_990_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_990_p2 <= grp_fu_5480_p_dout0;

    grp_fu_994_ce_assign_proc : process(ap_CS_fsm_state1, pool1_out5_empty_n, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_pp3_stage0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state50, ap_CS_fsm_state3, ap_CS_fsm_state55)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state55) or ((pool1_out5_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((pool1_out5_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((pool1_out5_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((pool1_out5_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((pool1_out5_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((pool1_out5_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            grp_fu_994_ce <= ap_const_logic_0;
        else 
            grp_fu_994_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_994_p0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, reg_1033, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, reg_1094, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state45, ap_CS_fsm_state47, reg_1129, reg_1139, reg_1149, reg_1159, reg_1169, output_load_6_reg_1781, ap_CS_fsm_state48)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_fu_994_p0 <= reg_1169;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_fu_994_p0 <= reg_1159;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            grp_fu_994_p0 <= reg_1149;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            grp_fu_994_p0 <= reg_1139;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            grp_fu_994_p0 <= reg_1129;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_994_p0 <= output_load_6_reg_1781;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_fu_994_p0 <= reg_1094;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_994_p0 <= reg_1033;
        else 
            grp_fu_994_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_994_p1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, reg_1084, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state45, ap_CS_fsm_state47, reg_1118, ap_CS_fsm_state48)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_fu_994_p1 <= reg_1118;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_994_p1 <= reg_1084;
        else 
            grp_fu_994_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_994_p2 <= grp_fu_5484_p_dout0;
    icmp_ln19_fu_1197_p2 <= "1" when (indvars_iv17_reg_956 = ap_const_lv4_A) else "0";
    icmp_ln22_fu_1214_p2 <= "1" when (indvars_iv14_reg_967 = ap_const_lv8_C4) else "0";
    icmp_ln33_fu_1434_p2 <= "1" when (indvars_iv_reg_979 = ap_const_lv4_A) else "0";
    icmp_ln34_1_fu_1470_p2 <= "1" when (trunc_ln34_fu_1460_p1 = ap_const_lv23_0) else "0";
    icmp_ln34_fu_1464_p2 <= "0" when (tmp_fu_1450_p4 = ap_const_lv8_FF) else "1";
    indvars_iv17_cast_fu_1203_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv17_reg_956),64));
    indvars_iv_cast_fu_1440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv_reg_979),64));
    or_ln34_fu_1476_p2 <= (icmp_ln34_fu_1464_p2 or icmp_ln34_1_fu_1470_p2);
    out_stream_V_TDATA <= 
        bitcast_ln34_fu_1446_p1 when (and_ln34_fu_1482_p2(0) = '1') else 
        ap_const_lv32_0;

    out_stream_V_TDATA_blk_n_assign_proc : process(out_stream_V_TREADY, ap_enable_reg_pp3_iter3, ap_block_pp3_stage0, icmp_ln33_reg_2348_pp3_iter2_reg)
    begin
        if (((icmp_ln33_reg_2348_pp3_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter3 = ap_const_logic_1))) then 
            out_stream_V_TDATA_blk_n <= out_stream_V_TREADY;
        else 
            out_stream_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_stream_V_TVALID_assign_proc : process(ap_enable_reg_pp3_iter3, icmp_ln33_reg_2348_pp3_iter2_reg, ap_block_pp3_stage0_11001)
    begin
        if (((icmp_ln33_reg_2348_pp3_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter3 = ap_const_logic_1))) then 
            out_stream_V_TVALID <= ap_const_logic_1;
        else 
            out_stream_V_TVALID <= ap_const_logic_0;
        end if; 
    end process;


    output_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state46, ap_CS_fsm_state45, ap_CS_fsm_state47, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state49, p_cast_fu_1186_p1, indvars_iv17_cast_fu_1203_p1, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            output_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            output_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            output_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            output_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            output_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_address0 <= indvars_iv17_cast_fu_1203_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_address0 <= p_cast_fu_1186_p1(4 - 1 downto 0);
        else 
            output_address0 <= "XXXX";
        end if; 
    end process;


    output_address1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_block_pp3_stage0, ap_CS_fsm_pp3_stage0, ap_CS_fsm_state46, ap_CS_fsm_state45, ap_CS_fsm_state47, ap_CS_fsm_state6, ap_enable_reg_pp3_iter0, ap_CS_fsm_state49, indvars_iv_cast_fu_1440_p1, ap_CS_fsm_state48)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            output_address1 <= indvars_iv_cast_fu_1440_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            output_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            output_address1 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            output_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            output_address1 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            output_address1 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            output_address1 <= "XXXX";
        end if; 
    end process;


    output_ce0_assign_proc : process(pool1_out5_empty_n, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state46, ap_CS_fsm_state45, ap_CS_fsm_state47, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state49, ap_CS_fsm_state48)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state46) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            output_ce0 <= ap_const_logic_1;
        else 
            output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_ce1_assign_proc : process(pool1_out5_empty_n, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_CS_fsm_state46, ap_CS_fsm_state45, ap_CS_fsm_state47, ap_CS_fsm_state6, ap_enable_reg_pp3_iter0, ap_CS_fsm_state49, ap_CS_fsm_state48)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state46) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            output_ce1 <= ap_const_logic_1;
        else 
            output_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_d0_assign_proc : process(ap_CS_fsm_state46, ap_CS_fsm_state45, ap_CS_fsm_state47, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state49, ap_CS_fsm_state48, grp_fu_5480_p_dout0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            output_d0 <= grp_fu_5480_p_dout0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            output_d0 <= ap_const_lv32_0;
        else 
            output_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_we0_assign_proc : process(ap_CS_fsm_state46, ap_CS_fsm_state45, ap_CS_fsm_state47, ap_CS_fsm_state2, ap_CS_fsm_state4, exitcond201_fu_1180_p2, icmp_ln19_fu_1197_p2, ap_CS_fsm_state49, ap_CS_fsm_state48)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state46) or ((icmp_ln19_fu_1197_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((exitcond201_fu_1180_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            output_we0 <= ap_const_logic_1;
        else 
            output_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_we1_assign_proc : process(ap_CS_fsm_state46, ap_CS_fsm_state45, ap_CS_fsm_state47, ap_CS_fsm_state49, ap_CS_fsm_state48)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            output_we1 <= ap_const_logic_1;
        else 
            output_we1 <= ap_const_logic_0;
        end if; 
    end process;

    p_cast_fu_1186_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_reg_945),64));

    pool1_out5_blk_n_assign_proc : process(pool1_out5_empty_n, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            pool1_out5_blk_n <= pool1_out5_empty_n;
        else 
            pool1_out5_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    pool1_out5_read_assign_proc : process(pool1_out5_empty_n, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if ((((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((pool1_out5_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            pool1_out5_read <= ap_const_logic_1;
        else 
            pool1_out5_read <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln29_fu_1316_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_29_fu_1311_p2),10));

    tmp_fu_1450_p4 <= bitcast_ln34_fu_1446_p1(30 downto 23);
    trunc_ln34_fu_1460_p1 <= bitcast_ln34_fu_1446_p1(23 - 1 downto 0);
    zext_ln22_1_fu_1264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv14_reg_967),11));
    zext_ln22_2_fu_1268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv14_reg_967),10));
    zext_ln22_3_fu_1234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv14_reg_967),9));
    zext_ln22_fu_1220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv14_reg_967),64));
    zext_ln29_1_fu_1278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_27_fu_1272_p2),64));
    zext_ln29_2_fu_1297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_28_fu_1292_p2),64));
    zext_ln29_3_fu_1320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln29_fu_1316_p1),64));
    zext_ln29_4_fu_1339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_30_fu_1334_p2),64));
    zext_ln29_5_fu_1364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_31_fu_1359_p2),64));
    zext_ln29_6_fu_1383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_32_fu_1378_p2),64));
    zext_ln29_fu_1250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_26_fu_1244_p2),64));
end behav;
